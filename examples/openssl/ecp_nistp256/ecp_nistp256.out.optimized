
;; Function smallfelem_one (smallfelem_one, funcdef_no=404, decl_uid=10392, cgraph_uid=404, symbol_order=407)

smallfelem_one (u64 * out)
{
  <bb 2> [local count: 1073741825]:
  MEM[(u64 *)out_2(D)] = { 1, 0 };
  MEM[(u64 *)out_2(D) + 16B] = { 0, 0 };
  return;

}



;; Function smallfelem_assign (smallfelem_assign, funcdef_no=405, decl_uid=10396, cgraph_uid=405, symbol_order=408)

smallfelem_assign (u64 * out, const u64 * in)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> [local count: 1073741825]:
  _1 = *in_6(D);
  *out_7(D) = _1;
  _2 = MEM[(const u64 *)in_6(D) + 8B];
  MEM[(u64 *)out_7(D) + 8B] = _2;
  _3 = MEM[(const u64 *)in_6(D) + 16B];
  MEM[(u64 *)out_7(D) + 16B] = _3;
  _4 = MEM[(const u64 *)in_6(D) + 24B];
  MEM[(u64 *)out_7(D) + 24B] = _4;
  return;

}



;; Function smallfelem_square (smallfelem_square, funcdef_no=417, decl_uid=10459, cgraph_uid=417, symbol_order=423)

smallfelem_square (limb * out, const u64 * small)
{
  limb a;
  long unsigned int _1;
  __int128 unsigned _3;
  long unsigned int _4;
  __int128 unsigned _6;
  __int128 unsigned _8;
  long unsigned int _9;
  __int128 unsigned _11;
  __int128 unsigned _12;
  __int128 unsigned _13;
  long unsigned int _14;
  __int128 unsigned _16;
  __int128 unsigned _17;
  __int128 unsigned _18;
  __int128 unsigned _19;
  __int128 unsigned _20;
  __int128 unsigned _21;
  __int128 unsigned _22;
  __int128 unsigned _23;
  __int128 unsigned _24;
  __int128 unsigned _25;
  __int128 unsigned _26;
  __int128 unsigned _27;
  __int128 unsigned _28;
  __int128 unsigned _29;
  __int128 unsigned _30;
  __int128 unsigned _31;
  __int128 unsigned _32;
  __int128 unsigned _33;
  __int128 unsigned _34;
  __int128 unsigned _35;
  __int128 unsigned _36;
  __int128 unsigned _58;
  __int128 unsigned _59;
  __int128 unsigned _60;
  __int128 unsigned _61;
  __int128 unsigned _62;
  __int128 unsigned _63;
  __int128 unsigned _64;
  __int128 unsigned _65;
  __int128 unsigned _66;
  __int128 unsigned _67;
  __int128 unsigned _69;

  <bb 2> [local count: 1073741825]:
  _1 = *small_38(D);
  a_39 = _1 w* _1;
  _3 = a_39 >> 64;
  _58 = a_39 & 18446744073709551615;
  *out_40(D) = _58;
  _4 = MEM[(const u64 *)small_38(D) + 8B];
  a_42 = _1 w* _4;
  _6 = a_42 >> 64;
  _59 = a_42 & 18446744073709551615;
  _69 = _59 * 2;
  _8 = _3 + _69;
  MEM[(limb *)out_40(D) + 16B] = _8;
  _9 = MEM[(const u64 *)small_38(D) + 16B];
  a_44 = _1 w* _9;
  _11 = a_44 >> 64;
  _60 = a_44 & 18446744073709551615;
  _12 = _6 + _60;
  _13 = _12 * 2;
  _14 = MEM[(const u64 *)small_38(D) + 24B];
  a_45 = _1 w* _14;
  _16 = a_45 >> 64;
  _61 = a_45 & 18446744073709551615;
  _17 = _11 + _61;
  a_46 = _4 w* _9;
  _18 = a_46 >> 64;
  _62 = a_46 & 18446744073709551615;
  _19 = _17 + _62;
  _20 = _19 * 2;
  _21 = _16 + _18;
  a_47 = _4 w* _4;
  _22 = a_47 >> 64;
  _63 = a_47 & 18446744073709551615;
  _23 = _13 + _63;
  MEM[(limb *)out_40(D) + 32B] = _23;
  _24 = _20 + _22;
  MEM[(limb *)out_40(D) + 48B] = _24;
  a_50 = _4 w* _14;
  _25 = a_50 >> 64;
  _64 = a_50 & 18446744073709551615;
  _26 = _21 + _64;
  _27 = _26 * 2;
  a_51 = _9 w* _14;
  _28 = a_51 >> 64;
  _65 = a_51 & 18446744073709551615;
  _29 = _25 + _65;
  _30 = _29 * 2;
  _31 = _28 * 2;
  a_52 = _9 w* _9;
  _32 = a_52 >> 64;
  _66 = a_52 & 18446744073709551615;
  _33 = _27 + _66;
  MEM[(limb *)out_40(D) + 64B] = _33;
  _34 = _30 + _32;
  MEM[(limb *)out_40(D) + 80B] = _34;
  a_55 = _14 w* _14;
  _35 = a_55 >> 64;
  _67 = a_55 & 18446744073709551615;
  _36 = _31 + _67;
  MEM[(limb *)out_40(D) + 96B] = _36;
  MEM[(limb *)out_40(D) + 112B] = _35;
  return;

}



;; Function smallfelem_mul (smallfelem_mul, funcdef_no=419, decl_uid=10472, cgraph_uid=419, symbol_order=425)

smallfelem_mul (limb * out, const u64 * small1, const u64 * small2)
{
  limb a;
  long unsigned int _1;
  long unsigned int _3;
  __int128 unsigned _5;
  long unsigned int _6;
  __int128 unsigned _8;
  __int128 unsigned _9;
  long unsigned int _10;
  __int128 unsigned _12;
  __int128 unsigned _13;
  __int128 unsigned _14;
  long unsigned int _15;
  __int128 unsigned _17;
  __int128 unsigned _18;
  __int128 unsigned _19;
  __int128 unsigned _20;
  __int128 unsigned _21;
  long unsigned int _22;
  __int128 unsigned _24;
  __int128 unsigned _25;
  __int128 unsigned _26;
  long unsigned int _27;
  __int128 unsigned _29;
  __int128 unsigned _30;
  __int128 unsigned _31;
  __int128 unsigned _32;
  __int128 unsigned _33;
  __int128 unsigned _34;
  __int128 unsigned _35;
  __int128 unsigned _36;
  long unsigned int _37;
  __int128 unsigned _39;
  __int128 unsigned _40;
  __int128 unsigned _41;
  __int128 unsigned _42;
  __int128 unsigned _43;
  __int128 unsigned _44;
  __int128 unsigned _45;
  __int128 unsigned _46;
  __int128 unsigned _47;
  __int128 unsigned _48;
  __int128 unsigned _49;
  __int128 unsigned _50;
  __int128 unsigned _51;
  __int128 unsigned _52;
  __int128 unsigned _53;
  __int128 unsigned _54;
  __int128 unsigned _55;
  __int128 unsigned _56;
  __int128 unsigned _85;
  __int128 unsigned _86;
  __int128 unsigned _87;
  __int128 unsigned _88;
  __int128 unsigned _89;
  __int128 unsigned _90;
  __int128 unsigned _91;
  __int128 unsigned _92;
  __int128 unsigned _93;
  __int128 unsigned _94;
  __int128 unsigned _95;
  __int128 unsigned _96;
  __int128 unsigned _97;
  __int128 unsigned _98;
  __int128 unsigned _99;
  __int128 unsigned _100;

  <bb 2> [local count: 1073741825]:
  _1 = *small1_58(D);
  _3 = *small2_59(D);
  a_60 = _1 w* _3;
  _5 = a_60 >> 64;
  _85 = a_60 & 18446744073709551615;
  *out_61(D) = _85;
  _6 = MEM[(const u64 *)small2_59(D) + 8B];
  a_63 = _1 w* _6;
  _8 = a_63 >> 64;
  _86 = a_63 & 18446744073709551615;
  _9 = _5 + _86;
  _10 = MEM[(const u64 *)small1_58(D) + 8B];
  a_64 = _3 w* _10;
  _12 = a_64 >> 64;
  _87 = a_64 & 18446744073709551615;
  _13 = _9 + _87;
  MEM[(limb *)out_61(D) + 16B] = _13;
  _14 = _8 + _12;
  _15 = MEM[(const u64 *)small2_59(D) + 16B];
  a_66 = _1 w* _15;
  _17 = a_66 >> 64;
  _88 = a_66 & 18446744073709551615;
  _18 = _14 + _88;
  a_67 = _6 w* _10;
  _19 = a_67 >> 64;
  _89 = a_67 & 18446744073709551615;
  _20 = _18 + _89;
  _21 = _17 + _19;
  _22 = MEM[(const u64 *)small1_58(D) + 16B];
  a_68 = _3 w* _22;
  _24 = a_68 >> 64;
  _90 = a_68 & 18446744073709551615;
  _25 = _20 + _90;
  MEM[(limb *)out_61(D) + 32B] = _25;
  _26 = _21 + _24;
  _27 = MEM[(const u64 *)small2_59(D) + 24B];
  a_70 = _1 w* _27;
  _29 = a_70 >> 64;
  _91 = a_70 & 18446744073709551615;
  _30 = _26 + _91;
  a_71 = _10 w* _15;
  _31 = a_71 >> 64;
  _92 = a_71 & 18446744073709551615;
  _32 = _30 + _92;
  _33 = _29 + _31;
  a_72 = _6 w* _22;
  _34 = a_72 >> 64;
  _93 = a_72 & 18446744073709551615;
  _35 = _32 + _93;
  _36 = _33 + _34;
  _37 = MEM[(const u64 *)small1_58(D) + 24B];
  a_73 = _3 w* _37;
  _39 = a_73 >> 64;
  _94 = a_73 & 18446744073709551615;
  _40 = _35 + _94;
  MEM[(limb *)out_61(D) + 48B] = _40;
  _41 = _36 + _39;
  a_75 = _10 w* _27;
  _42 = a_75 >> 64;
  _95 = a_75 & 18446744073709551615;
  _43 = _41 + _95;
  a_76 = _15 w* _22;
  _44 = a_76 >> 64;
  _96 = a_76 & 18446744073709551615;
  _45 = _43 + _96;
  _46 = _42 + _44;
  a_77 = _6 w* _37;
  _47 = a_77 >> 64;
  _97 = a_77 & 18446744073709551615;
  _48 = _45 + _97;
  MEM[(limb *)out_61(D) + 64B] = _48;
  _49 = _46 + _47;
  a_79 = _22 w* _27;
  _50 = a_79 >> 64;
  _98 = a_79 & 18446744073709551615;
  _51 = _49 + _98;
  a_80 = _15 w* _37;
  _52 = a_80 >> 64;
  _99 = a_80 & 18446744073709551615;
  _53 = _51 + _99;
  MEM[(limb *)out_61(D) + 80B] = _53;
  _54 = _50 + _52;
  a_82 = _27 w* _37;
  _55 = a_82 >> 64;
  _100 = a_82 & 18446744073709551615;
  _56 = _54 + _100;
  MEM[(limb *)out_61(D) + 96B] = _56;
  MEM[(limb *)out_61(D) + 112B] = _55;
  return;

}



;; Function felem_reduce_ (felem_reduce_, funcdef_no=422, decl_uid=10493, cgraph_uid=422, symbol_order=429)

felem_reduce_ (limb * out, const limb * in)
{
  __int128 unsigned _1;
  __int128 unsigned _2;
  __int128 unsigned _3;
  __int128 unsigned _4;
  __int128 unsigned _5;
  __int128 unsigned _7;
  __int128 unsigned _8;
  __int128 unsigned _9;
  __int128 unsigned _10;
  __int128 unsigned _11;
  __int128 unsigned _13;
  __int128 unsigned _14;
  __int128 unsigned _15;
  __int128 unsigned _16;
  __int128 unsigned _17;
  __int128 unsigned _18;
  __int128 unsigned _19;
  __int128 unsigned _20;
  __int128 unsigned _21;
  __int128 unsigned _22;
  __int128 unsigned _23;
  __int128 unsigned _24;
  __int128 unsigned _25;
  __int128 unsigned _26;
  __int128 unsigned _27;
  __int128 unsigned _28;
  __int128 unsigned _29;
  __int128 unsigned _30;
  __int128 unsigned _31;
  __int128 unsigned _32;
  __int128 unsigned _33;
  __int128 unsigned _34;
  __int128 unsigned _35;
  __int128 unsigned _36;
  __int128 unsigned _37;
  __int128 unsigned _38;
  __int128 unsigned _39;
  __int128 unsigned _40;
  __int128 unsigned _41;
  __int128 unsigned _42;
  __int128 unsigned _43;
  __int128 unsigned _44;
  __int128 unsigned _45;
  __int128 unsigned _46;
  __int128 unsigned _47;
  __int128 unsigned _48;
  __int128 unsigned _49;
  __int128 unsigned _50;
  __int128 unsigned _72;
  __int128 unsigned _73;

  <bb 2> [local count: 1073741825]:
  _1 = MEM[(const limb *)in_51(D) + 64B];
  _2 = MEM[(const limb *)in_51(D) + 80B];
  _3 = _2 << 32;
  _4 = _1 + _3;
  _5 = *out_53(D);
  _7 = _4 + _5;
  *out_53(D) = _7;
  _8 = MEM[(limb *)out_53(D) + 48B];
  _9 = _8 - _4;
  MEM[(limb *)out_53(D) + 48B] = _9;
  _10 = MEM[(const limb *)in_51(D) + 80B];
  _11 = MEM[(const limb *)in_51(D) + 112B];
  _13 = MEM[(limb *)out_53(D) + 16B];
  _73 = _10 + _13;
  _14 = _73 - _11;
  MEM[(limb *)out_53(D) + 16B] = _14;
  _15 = MEM[(limb *)out_53(D) + 32B];
  _72 = _11 + _15;
  _16 = _72 - _10;
  MEM[(limb *)out_53(D) + 32B] = _16;
  _17 = MEM[(const limb *)in_51(D) + 64B];
  _18 = _17 << 32;
  _19 = _14 - _18;
  MEM[(limb *)out_53(D) + 16B] = _19;
  _20 = MEM[(const limb *)in_51(D) + 64B];
  _21 = _20 << 32;
  _22 = _9 + _21;
  MEM[(limb *)out_53(D) + 48B] = _22;
  _23 = MEM[(const limb *)in_51(D) + 80B];
  _24 = _23 << 32;
  _25 = _16 - _24;
  MEM[(limb *)out_53(D) + 32B] = _25;
  _26 = MEM[(const limb *)in_51(D) + 96B];
  _27 = _7 - _26;
  *out_53(D) = _27;
  _28 = MEM[(const limb *)in_51(D) + 96B];
  _29 = _28 << 32;
  _30 = _27 - _29;
  *out_53(D) = _30;
  _31 = MEM[(const limb *)in_51(D) + 96B];
  _32 = _31 << 33;
  _33 = _19 + _32;
  MEM[(limb *)out_53(D) + 16B] = _33;
  _34 = MEM[(const limb *)in_51(D) + 96B];
  _35 = _34 * 2;
  _36 = _25 + _35;
  MEM[(limb *)out_53(D) + 32B] = _36;
  _37 = MEM[(const limb *)in_51(D) + 96B];
  _38 = _37 << 32;
  _39 = _22 - _38;
  MEM[(limb *)out_53(D) + 48B] = _39;
  _40 = MEM[(const limb *)in_51(D) + 112B];
  _41 = _30 - _40;
  *out_53(D) = _41;
  _42 = MEM[(const limb *)in_51(D) + 112B];
  _43 = _42 << 32;
  _44 = _41 - _43;
  *out_53(D) = _44;
  _45 = MEM[(const limb *)in_51(D) + 112B];
  _46 = _45 << 33;
  _47 = _36 + _46;
  MEM[(limb *)out_53(D) + 32B] = _47;
  _48 = MEM[(const limb *)in_51(D) + 112B];
  _49 = _48 * 3;
  _50 = _39 + _49;
  MEM[(limb *)out_53(D) + 48B] = _50;
  return;

}



;; Function smallfelem_is_zero (smallfelem_is_zero, funcdef_no=429, decl_uid=10537, cgraph_uid=429, symbol_order=436)

smallfelem_is_zero (const u64 * small)
{
  u64 is_zero;
  u64 is_p;
  limb result;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  signed long is_zero.14_13;
  signed long _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  signed long is_p.15_26;
  signed long _27;
  __int128 unsigned _28;

  <bb 2> [local count: 1073741825]:
  _1 = *small_30(D);
  _2 = MEM[(const u64 *)small_30(D) + 8B];
  _3 = _1 | _2;
  _4 = MEM[(const u64 *)small_30(D) + 16B];
  _5 = _3 | _4;
  _6 = MEM[(const u64 *)small_30(D) + 24B];
  is_zero_31 = _5 | _6;
  is_zero_32 = is_zero_31 + 18446744073709551615;
  _7 = is_zero_32 << 32;
  is_zero_33 = _7 & is_zero_32;
  _8 = is_zero_33 << 16;
  is_zero_34 = _8 & is_zero_33;
  _9 = is_zero_34 << 8;
  is_zero_35 = _9 & is_zero_34;
  _10 = is_zero_35 << 4;
  is_zero_36 = _10 & is_zero_35;
  _11 = is_zero_36 << 2;
  is_zero_37 = _11 & is_zero_36;
  _12 = is_zero_37 << 1;
  is_zero_38 = _12 & is_zero_37;
  is_zero.14_13 = (signed long) is_zero_38;
  _14 = is_zero.14_13 >> 63;
  is_zero_39 = (u64) _14;
  _15 = ~_1;
  _16 = _2 ^ 4294967295;
  _17 = _15 | _16;
  _18 = _4 | _17;
  _19 = _6 ^ 18446744069414584321;
  is_p_40 = _18 | _19;
  is_p_41 = is_p_40 + 18446744073709551615;
  _20 = is_p_41 << 32;
  is_p_42 = _20 & is_p_41;
  _21 = is_p_42 << 16;
  is_p_43 = _21 & is_p_42;
  _22 = is_p_43 << 8;
  is_p_44 = _22 & is_p_43;
  _23 = is_p_44 << 4;
  is_p_45 = _23 & is_p_44;
  _24 = is_p_45 << 2;
  is_p_46 = _24 & is_p_45;
  _25 = is_p_46 << 1;
  is_p_47 = _25 & is_p_46;
  is_p.15_26 = (signed long) is_p_47;
  _27 = is_p.15_26 >> 63;
  is_p_48 = (u64) _27;
  is_zero_49 = is_zero_39 | is_p_48;
  result_50 = (limb) is_zero_49;
  _28 = result_50 << 64;
  result_51 = _28 | result_50;
  return result_51;

}



;; Function ec_GFp_nistp256_have_precompute_mult (ec_GFp_nistp256_have_precompute_mult, funcdef_no=452, decl_uid=10110, cgraph_uid=452, symbol_order=460)

ec_GFp_nistp256_have_precompute_mult (const struct EC_GROUP * group)
{
  <unnamed type> _1;
  struct NISTP256_PRE_COMP * _2;
  int iftmp.20_3;
  _Bool _6;
  int _7;

  <bb 2> [local count: 1073741825]:
  _1 = group_5(D)->pre_comp_type;
  if (_1 == 2)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072220]:
  _2 = group_5(D)->pre_comp.nistp256;
  _6 = _2 != 0B;
  _7 = (int) _6;

  <bb 4> [local count: 1073741825]:
  # iftmp.20_3 = PHI <_7(3), 0(2)>
  return iftmp.20_3;

}



;; Function ec_GFp_nistp256_group_init (ec_GFp_nistp256_group_init, funcdef_no=446, decl_uid=10077, cgraph_uid=446, symbol_order=454)

ec_GFp_nistp256_group_init (struct EC_GROUP * group)
{
  int ret;

  <bb 2> [local count: 1073741825]:
  ret_4 = ec_GFp_simple_group_init (group_2(D));
  group_2(D)->a_is_minus3 = 1;
  return ret_4;

}



;; Function ec_GFp_nistp256_group_set_curve (ec_GFp_nistp256_group_set_curve, funcdef_no=447, decl_uid=10083, cgraph_uid=447, symbol_order=455)

ec_GFp_nistp256_group_set_curve (struct EC_GROUP * group, const struct BIGNUM * p, const struct BIGNUM * a, const struct BIGNUM * b, struct BN_CTX * ctx)
{
  struct BIGNUM * curve_b;
  struct BIGNUM * curve_a;
  struct BIGNUM * curve_p;
  struct BN_CTX * new_ctx;
  int ret;
  int _1;
  int _2;
  int _3;
  int _7;

  <bb 2> [local count: 1073741825]:
  if (ctx_12(D) == 0B)
    goto <bb 3>; [30.00%]
  else
    goto <bb 4>; [70.00%]

  <bb 3> [local count: 322122547]:
  new_ctx_15 = BN_CTX_new ();
  if (new_ctx_15 == 0B)
    goto <bb 11>; [18.09%]
  else
    goto <bb 4>; [81.91%]

  <bb 4> [local count: 1015469856]:
  # ctx_4 = PHI <ctx_12(D)(2), new_ctx_15(3)>
  # new_ctx_6 = PHI <0B(2), new_ctx_15(3)>
  BN_CTX_start (ctx_4);
  curve_p_18 = BN_CTX_get (ctx_4);
  curve_a_20 = BN_CTX_get (ctx_4);
  curve_b_22 = BN_CTX_get (ctx_4);
  if (curve_b_22 == 0B)
    goto <bb 10>; [30.95%]
  else
    goto <bb 5>; [69.05%]

  <bb 5> [local count: 701181935]:
  BN_bin2bn (&nistp256_curve_params[0], 32, curve_p_18);
  BN_bin2bn (&nistp256_curve_params[1], 32, curve_a_20);
  BN_bin2bn (&nistp256_curve_params[2], 32, curve_b_22);
  _1 = BN_cmp (curve_p_18, p_26(D));
  if (_1 != 0)
    goto <bb 6>; [34.00%]
  else
    goto <bb 7>; [66.00%]

  <bb 6> [local count: 590612006]:
  ERR_put_error (16, 230, 145, "ecp_nistp256.c", 1927);
  goto <bb 10>; [100.00%]

  <bb 7> [local count: 462780077]:
  _2 = BN_cmp (curve_a_20, a_28(D));
  if (_2 != 0)
    goto <bb 6>; [51.12%]
  else
    goto <bb 8>; [48.88%]

  <bb 8> [local count: 226206902]:
  _3 = BN_cmp (curve_b_22, b_30(D));
  if (_3 != 0)
    goto <bb 6>; [51.12%]
  else
    goto <bb 9>; [48.88%]

  <bb 9> [local count: 110569933]:
  group_32(D)->field_mod_func = BN_nist_mod_256;
  ret_35 = ec_GFp_simple_group_set_curve (group_32(D), p_26(D), a_28(D), b_30(D), ctx_4);

  <bb 10> [local count: 1015469855]:
  # ret_5 = PHI <ret_35(9), 0(6), 0(4)>
err:
  BN_CTX_end (ctx_4);
  BN_CTX_free (new_ctx_6);

  <bb 11> [local count: 1073741824]:
  # _7 = PHI <ret_5(10), 0(3)>
  return _7;

}



;; Function BN_to_felem (BN_to_felem, funcdef_no=402, decl_uid=10380, cgraph_uid=402, symbol_order=405)

BN_to_felem (limb * out, const struct BIGNUM * bn)
{
  unsigned long ivtmp.32;
  unsigned int ivtmp.30;
  unsigned int num_bytes;
  u8 b_out[32];
  u8 b_in[32];
  int _1;
  int _2;
  int _3;
  int _4;
  int _5;
  int _6;
  sizetype _31;
  const u8 * _32;
  unsigned char _35;
  void * _51;
  unsigned int _56;
  long unsigned int pretmp_64;
  __int128 unsigned _66;
  __int128 unsigned prephitmp_67;
  long unsigned int pretmp_68;
  __int128 unsigned _70;
  __int128 unsigned prephitmp_71;
  long unsigned int pretmp_72;
  __int128 unsigned _74;
  __int128 unsigned prephitmp_75;
  long unsigned int pretmp_76;
  __int128 unsigned _78;
  __int128 unsigned prephitmp_79;

  <bb 2> [local count: 271146926]:
  __builtin_memset (&b_out, 0, 32);
  _1 = BN_num_bits (bn_9(D));
  _2 = _1 + 7;
  _3 = _2 / 8;
  num_bytes_11 = (unsigned int) _3;
  if (num_bytes_11 > 32)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 92189955]:
  ERR_put_error (16, 224, 144, "ecp_nistp256.c", 168);
  goto <bb 11>; [100.00%]

  <bb 4> [local count: 178956971]:
  _4 = BN_is_negative (bn_9(D));
  if (_4 != 0)
    goto <bb 5>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 5> [local count: 60845370]:
  ERR_put_error (16, 224, 144, "ecp_nistp256.c", 172);
  goto <bb 11>; [100.00%]

  <bb 6> [local count: 118111601]:
  _5 = BN_bn2bin (bn_9(D), &b_in);
  num_bytes_16 = (unsigned int) _5;
  if (num_bytes_16 != 0)
    goto <bb 7>; [89.00%]
  else
    goto <bb 10>; [11.00%]

  <bb 7> [local count: 105119325]:
  _56 = num_bytes_16 + 4294967295;
  ivtmp.32_52 = (unsigned long) &b_out;

  <bb 8> [local count: 955630223]:
  # ivtmp.30_63 = PHI <_56(7), ivtmp.30_62(8)>
  # ivtmp.32_54 = PHI <ivtmp.32_52(7), ivtmp.32_53(8)>
  _31 = (sizetype) ivtmp.30_63;
  _32 = &b_in + _31;
  _35 = *_32;
  _51 = (void *) ivtmp.32_54;
  MEM[base: _51, offset: 0B] = _35;
  ivtmp.30_62 = ivtmp.30_63 + 4294967295;
  ivtmp.32_53 = ivtmp.32_54 + 1;
  if (ivtmp.30_62 != 4294967295)
    goto <bb 8>; [89.00%]
  else
    goto <bb 9>; [11.00%]

  <bb 9> [local count: 105119324]:
  pretmp_64 = MEM[(u64 *)&b_out];
  _66 = (__int128 unsigned) pretmp_64;
  pretmp_68 = MEM[(u64 *)&b_out + 8B];
  _70 = (__int128 unsigned) pretmp_68;
  pretmp_72 = MEM[(u64 *)&b_out + 16B];
  _74 = (__int128 unsigned) pretmp_72;
  pretmp_76 = MEM[(u64 *)&b_out + 24B];
  _78 = (__int128 unsigned) pretmp_76;

  <bb 10> [local count: 118111601]:
  # prephitmp_67 = PHI <_66(9), 0(6)>
  # prephitmp_71 = PHI <_70(9), 0(6)>
  # prephitmp_75 = PHI <_74(9), 0(6)>
  # prephitmp_79 = PHI <_78(9), 0(6)>
  *out_17(D) = prephitmp_67;
  MEM[(limb *)out_17(D) + 16B] = prephitmp_71;
  MEM[(limb *)out_17(D) + 32B] = prephitmp_75;
  MEM[(limb *)out_17(D) + 48B] = prephitmp_79;

  <bb 11> [local count: 271146926]:
  # _6 = PHI <0(3), 0(5), 1(10)>
  b_in ={v} {CLOBBER};
  b_out ={v} {CLOBBER};
  return _6;

}



;; Function felem_reduce (felem_reduce, funcdef_no=423, decl_uid=10498, cgraph_uid=423, symbol_order=430)

felem_reduce (limb * out, const limb * in)
{
  __int128 unsigned _1;
  __int128 unsigned _2;
  __int128 unsigned _3;
  __int128 unsigned _4;
  __int128 unsigned _5;
  __int128 unsigned _6;
  __int128 unsigned _7;
  __int128 unsigned _8;
  __int128 unsigned _17;
  __int128 unsigned _18;
  __int128 unsigned _19;
  __int128 unsigned _20;
  __int128 unsigned _22;
  __int128 unsigned _24;
  __int128 unsigned _25;
  __int128 unsigned _26;
  __int128 unsigned _28;
  __int128 unsigned _29;
  __int128 unsigned _30;
  __int128 unsigned _32;
  __int128 unsigned _33;
  __int128 unsigned _34;
  __int128 unsigned _35;
  __int128 unsigned _36;
  __int128 unsigned _37;
  __int128 unsigned _38;
  __int128 unsigned _39;
  __int128 unsigned _40;
  __int128 unsigned _41;
  __int128 unsigned _42;
  __int128 unsigned _43;
  __int128 unsigned _44;
  __int128 unsigned _45;
  __int128 unsigned _46;
  __int128 unsigned _47;
  __int128 unsigned _48;
  __int128 unsigned _49;
  __int128 unsigned _50;
  __int128 unsigned _51;
  __int128 unsigned _52;
  __int128 unsigned _53;
  __int128 unsigned _54;
  __int128 unsigned _55;
  __int128 unsigned _56;
  __int128 unsigned _57;
  __int128 unsigned _58;
  __int128 unsigned _59;
  __int128 unsigned _60;
  __int128 unsigned _61;
  __int128 unsigned _62;
  __int128 unsigned _63;
  __int128 unsigned _64;
  __int128 unsigned _65;
  __int128 unsigned _66;

  <bb 2> [local count: 1073741825]:
  _1 = *in_10(D);
  _2 = _1 + 0xfffffffffffffffeffffffff0;
  *out_11(D) = _2;
  _3 = MEM[(const limb *)in_10(D) + 16B];
  _4 = _3 + 0x10000000000000000000000000;
  MEM[(limb *)out_11(D) + 16B] = _4;
  _5 = MEM[(const limb *)in_10(D) + 32B];
  _6 = _5 + 0xffffffffffffffff000000010;
  MEM[(limb *)out_11(D) + 32B] = _6;
  _7 = MEM[(const limb *)in_10(D) + 48B];
  _8 = _7 + 0xffffffffffffffff000000010;
  MEM[(limb *)out_11(D) + 48B] = _8;
  _17 = MEM[(const limb *)in_10(D) + 64B];
  _18 = MEM[(const limb *)in_10(D) + 80B];
  _19 = _18 << 32;
  _20 = _17 + _19;
  _22 = _2 + _20;
  *out_11(D) = _22;
  _24 = _8 - _20;
  MEM[(limb *)out_11(D) + 48B] = _24;
  _25 = MEM[(const limb *)in_10(D) + 80B];
  _26 = MEM[(const limb *)in_10(D) + 112B];
  _30 = _4 - _26;
  _29 = _25 + _30;
  MEM[(limb *)out_11(D) + 16B] = _29;
  _28 = _6 - _25;
  _32 = _26 + _28;
  MEM[(limb *)out_11(D) + 32B] = _32;
  _33 = MEM[(const limb *)in_10(D) + 64B];
  _34 = _33 << 32;
  _35 = _29 - _34;
  MEM[(limb *)out_11(D) + 16B] = _35;
  _36 = MEM[(const limb *)in_10(D) + 64B];
  _37 = _36 << 32;
  _38 = _24 + _37;
  MEM[(limb *)out_11(D) + 48B] = _38;
  _39 = MEM[(const limb *)in_10(D) + 80B];
  _40 = _39 << 32;
  _41 = _32 - _40;
  MEM[(limb *)out_11(D) + 32B] = _41;
  _42 = MEM[(const limb *)in_10(D) + 96B];
  _43 = _22 - _42;
  *out_11(D) = _43;
  _44 = MEM[(const limb *)in_10(D) + 96B];
  _45 = _44 << 32;
  _46 = _43 - _45;
  *out_11(D) = _46;
  _47 = MEM[(const limb *)in_10(D) + 96B];
  _48 = _47 << 33;
  _49 = _35 + _48;
  MEM[(limb *)out_11(D) + 16B] = _49;
  _50 = MEM[(const limb *)in_10(D) + 96B];
  _51 = _50 * 2;
  _52 = _41 + _51;
  MEM[(limb *)out_11(D) + 32B] = _52;
  _53 = MEM[(const limb *)in_10(D) + 96B];
  _54 = _53 << 32;
  _55 = _38 - _54;
  MEM[(limb *)out_11(D) + 48B] = _55;
  _56 = MEM[(const limb *)in_10(D) + 112B];
  _57 = _46 - _56;
  *out_11(D) = _57;
  _58 = MEM[(const limb *)in_10(D) + 112B];
  _59 = _58 << 32;
  _60 = _57 - _59;
  *out_11(D) = _60;
  _61 = MEM[(const limb *)in_10(D) + 112B];
  _62 = _61 << 33;
  _63 = _52 + _62;
  MEM[(limb *)out_11(D) + 32B] = _63;
  _64 = MEM[(const limb *)in_10(D) + 112B];
  _65 = _64 * 3;
  _66 = _55 + _65;
  MEM[(limb *)out_11(D) + 48B] = _66;
  return;

}



;; Function smallfelem_is_zero_int (smallfelem_is_zero_int, funcdef_no=430, decl_uid=10543, cgraph_uid=430, symbol_order=437)

smallfelem_is_zero_int (const void * small)
{
  u64 is_zero;
  u64 is_p;
  limb result;
  int _2;
  int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _14;
  long unsigned int _16;
  long unsigned int _18;
  long unsigned int _20;
  long unsigned int _22;
  long unsigned int _24;
  signed long is_zero.14_26;
  signed long _27;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  long unsigned int _33;
  long unsigned int _36;
  long unsigned int _38;
  long unsigned int _40;
  long unsigned int _42;
  long unsigned int _44;
  long unsigned int _46;
  signed long is_p.15_48;
  signed long _49;
  __int128 unsigned _53;

  <bb 2> [local count: 1073741825]:
  _6 = MEM[(const u64 *)small_4(D)];
  _7 = MEM[(const u64 *)small_4(D) + 8B];
  _8 = _6 | _7;
  _9 = MEM[(const u64 *)small_4(D) + 16B];
  _10 = _8 | _9;
  _11 = MEM[(const u64 *)small_4(D) + 24B];
  is_zero_12 = _10 | _11;
  is_zero_13 = is_zero_12 + 18446744073709551615;
  _14 = is_zero_13 << 32;
  is_zero_15 = is_zero_13 & _14;
  _16 = is_zero_15 << 16;
  is_zero_17 = is_zero_15 & _16;
  _18 = is_zero_17 << 8;
  is_zero_19 = is_zero_17 & _18;
  _20 = is_zero_19 << 4;
  is_zero_21 = is_zero_19 & _20;
  _22 = is_zero_21 << 2;
  is_zero_23 = is_zero_21 & _22;
  _24 = is_zero_23 << 1;
  is_zero_25 = is_zero_23 & _24;
  is_zero.14_26 = (signed long) is_zero_25;
  _27 = is_zero.14_26 >> 63;
  is_zero_28 = (u64) _27;
  _29 = ~_6;
  _30 = _7 ^ 4294967295;
  _31 = _29 | _30;
  _32 = _9 | _31;
  _33 = _11 ^ 18446744069414584321;
  is_p_34 = _32 | _33;
  is_p_35 = is_p_34 + 18446744073709551615;
  _36 = is_p_35 << 32;
  is_p_37 = is_p_35 & _36;
  _38 = is_p_37 << 16;
  is_p_39 = is_p_37 & _38;
  _40 = is_p_39 << 8;
  is_p_41 = is_p_39 & _40;
  _42 = is_p_41 << 4;
  is_p_43 = is_p_41 & _42;
  _44 = is_p_43 << 2;
  is_p_45 = is_p_43 & _44;
  _46 = is_p_45 << 1;
  is_p_47 = is_p_45 & _46;
  is_p.15_48 = (signed long) is_p_47;
  _49 = is_p.15_48 >> 63;
  is_p_50 = (u64) _49;
  is_zero_51 = is_zero_28 | is_p_50;
  result_52 = (limb) is_zero_51;
  _53 = result_52 << 64;
  result_54 = result_52 | _53;
  _2 = (int) result_54;
  _5 = _2 & 1;
  return _5;

}



;; Function felem_sum (felem_sum, funcdef_no=407, decl_uid=10404, cgraph_uid=407, symbol_order=410)

__attribute__((used))
felem_sum (limb * out, const limb * in)
{
  __int128 unsigned _1;
  __int128 unsigned _2;
  __int128 unsigned _3;
  __int128 unsigned _4;
  __int128 unsigned _5;
  __int128 unsigned _6;
  __int128 unsigned _7;
  __int128 unsigned _8;
  __int128 unsigned _9;
  __int128 unsigned _10;
  __int128 unsigned _11;
  __int128 unsigned _12;

  <bb 2> [local count: 1073741825]:
  _1 = *out_14(D);
  _2 = *in_15(D);
  _3 = _1 + _2;
  *out_14(D) = _3;
  _4 = MEM[(limb *)out_14(D) + 16B];
  _5 = MEM[(const limb *)in_15(D) + 16B];
  _6 = _4 + _5;
  MEM[(limb *)out_14(D) + 16B] = _6;
  _7 = MEM[(limb *)out_14(D) + 32B];
  _8 = MEM[(const limb *)in_15(D) + 32B];
  _9 = _7 + _8;
  MEM[(limb *)out_14(D) + 32B] = _9;
  _10 = MEM[(limb *)out_14(D) + 48B];
  _11 = MEM[(const limb *)in_15(D) + 48B];
  _12 = _10 + _11;
  MEM[(limb *)out_14(D) + 48B] = _12;
  return;

}



;; Function felem_small_sum (felem_small_sum, funcdef_no=408, decl_uid=10408, cgraph_uid=408, symbol_order=411)

__attribute__((used))
felem_small_sum (limb * out, const u64 * in)
{
  __int128 unsigned _1;
  long unsigned int _2;
  __int128 unsigned _3;
  __int128 unsigned _4;
  __int128 unsigned _5;
  long unsigned int _6;
  __int128 unsigned _7;
  __int128 unsigned _8;
  __int128 unsigned _9;
  long unsigned int _10;
  __int128 unsigned _11;
  __int128 unsigned _12;
  __int128 unsigned _13;
  long unsigned int _14;
  __int128 unsigned _15;
  __int128 unsigned _16;

  <bb 2> [local count: 1073741825]:
  _1 = *out_18(D);
  _2 = *in_19(D);
  _3 = (__int128 unsigned) _2;
  _4 = _1 + _3;
  *out_18(D) = _4;
  _5 = MEM[(limb *)out_18(D) + 16B];
  _6 = MEM[(const u64 *)in_19(D) + 8B];
  _7 = (__int128 unsigned) _6;
  _8 = _5 + _7;
  MEM[(limb *)out_18(D) + 16B] = _8;
  _9 = MEM[(limb *)out_18(D) + 32B];
  _10 = MEM[(const u64 *)in_19(D) + 16B];
  _11 = (__int128 unsigned) _10;
  _12 = _9 + _11;
  MEM[(limb *)out_18(D) + 32B] = _12;
  _13 = MEM[(limb *)out_18(D) + 48B];
  _14 = MEM[(const u64 *)in_19(D) + 24B];
  _15 = (__int128 unsigned) _14;
  _16 = _13 + _15;
  MEM[(limb *)out_18(D) + 48B] = _16;
  return;

}



;; Function felem_scalar (felem_scalar, funcdef_no=409, decl_uid=10412, cgraph_uid=409, symbol_order=412)

__attribute__((used))
felem_scalar (limb * out, const u64 scalar)
{
  __int128 unsigned _1;
  __int128 unsigned _2;
  __int128 unsigned _3;
  __int128 unsigned _4;
  __int128 unsigned _5;
  __int128 unsigned _6;
  __int128 unsigned _7;
  __int128 unsigned _8;
  __int128 unsigned _9;

  <bb 2> [local count: 1073741825]:
  _1 = *out_11(D);
  _2 = (__int128 unsigned) scalar_12(D);
  _3 = _1 * _2;
  *out_11(D) = _3;
  _4 = MEM[(limb *)out_11(D) + 16B];
  _5 = _2 * _4;
  MEM[(limb *)out_11(D) + 16B] = _5;
  _6 = MEM[(limb *)out_11(D) + 32B];
  _7 = _2 * _6;
  MEM[(limb *)out_11(D) + 32B] = _7;
  _8 = MEM[(limb *)out_11(D) + 48B];
  _9 = _2 * _8;
  MEM[(limb *)out_11(D) + 48B] = _9;
  return;

}



;; Function smallfelem_neg (smallfelem_neg, funcdef_no=411, decl_uid=10421, cgraph_uid=411, symbol_order=415)

__attribute__((used))
smallfelem_neg (limb * out, const u64 * small)
{
  long unsigned int _1;
  __int128 unsigned _2;
  __int128 unsigned _3;
  long unsigned int _4;
  __int128 unsigned _5;
  __int128 unsigned _6;
  long unsigned int _7;
  __int128 unsigned _8;
  __int128 unsigned _9;
  long unsigned int _10;
  __int128 unsigned _11;
  __int128 unsigned _12;

  <bb 2> [local count: 1073741825]:
  _1 = *small_14(D);
  _2 = (__int128 unsigned) _1;
  _3 = 0x1fffffffffffffffdfffffffe00 - _2;
  *out_15(D) = _3;
  _4 = MEM[(const u64 *)small_14(D) + 8B];
  _5 = (__int128 unsigned) _4;
  _6 = 0x200000000000000000000000000 - _5;
  MEM[(limb *)out_15(D) + 16B] = _6;
  _7 = MEM[(const u64 *)small_14(D) + 16B];
  _8 = (__int128 unsigned) _7;
  _9 = 0x1fffffffffffffffe0000000200 - _8;
  MEM[(limb *)out_15(D) + 32B] = _9;
  _10 = MEM[(const u64 *)small_14(D) + 24B];
  _11 = (__int128 unsigned) _10;
  _12 = 0x1fffffffffffffffe0000000200 - _11;
  MEM[(limb *)out_15(D) + 48B] = _12;
  return;

}



;; Function felem_diff (felem_diff, funcdef_no=412, decl_uid=10425, cgraph_uid=412, symbol_order=416)

__attribute__((used))
felem_diff (limb * out, const limb * in)
{
  __int128 unsigned _1;
  __int128 unsigned _2;
  __int128 unsigned _3;
  __int128 unsigned _4;
  __int128 unsigned _5;
  __int128 unsigned _6;
  __int128 unsigned _7;
  __int128 unsigned _8;
  __int128 unsigned _9;
  __int128 unsigned _10;
  __int128 unsigned _11;
  __int128 unsigned _12;
  __int128 unsigned _13;
  __int128 unsigned _14;
  __int128 unsigned _15;
  __int128 unsigned _16;

  <bb 2> [local count: 1073741825]:
  _1 = *out_18(D);
  _2 = _1 + 0x1fffffffffffffffdfffffffe00;
  *out_18(D) = _2;
  _3 = MEM[(limb *)out_18(D) + 16B];
  _4 = _3 + 0x200000000000000000000000000;
  MEM[(limb *)out_18(D) + 16B] = _4;
  _5 = MEM[(limb *)out_18(D) + 32B];
  _6 = _5 + 0x1fffffffffffffffe0000000200;
  MEM[(limb *)out_18(D) + 32B] = _6;
  _7 = MEM[(limb *)out_18(D) + 48B];
  _8 = _7 + 0x1fffffffffffffffe0000000200;
  MEM[(limb *)out_18(D) + 48B] = _8;
  _9 = *in_23(D);
  _10 = _2 - _9;
  *out_18(D) = _10;
  _11 = MEM[(const limb *)in_23(D) + 16B];
  _12 = _4 - _11;
  MEM[(limb *)out_18(D) + 16B] = _12;
  _13 = MEM[(const limb *)in_23(D) + 32B];
  _14 = _6 - _13;
  MEM[(limb *)out_18(D) + 32B] = _14;
  _15 = MEM[(const limb *)in_23(D) + 48B];
  _16 = _8 - _15;
  MEM[(limb *)out_18(D) + 48B] = _16;
  return;

}



;; Function felem_shrink (felem_shrink, funcdef_no=415, decl_uid=10444, cgraph_uid=415, symbol_order=421)

__attribute__((used))
felem_shrink (u64 * out, const limb * in)
{
  u64 low;
  u64 high;
  u64 mask;
  u64 b;
  u64 a;
  __int128 unsigned _1;
  __int128 unsigned _2;
  __int128 unsigned _3;
  __int128 unsigned _4;
  __int128 unsigned _5;
  __int128 unsigned _6;
  __int128 unsigned _7;
  __int128 unsigned _8;
  __int128 unsigned _9;
  __int128 unsigned _10;
  __int128 unsigned _11;
  __int128 unsigned _12;
  __int128 unsigned _13;
  __int128 unsigned _14;
  __int128 unsigned _16;
  __int128 unsigned _17;
  __int128 unsigned _18;
  __int128 unsigned _20;
  __int128 unsigned _21;
  __int128 unsigned _22;
  __int128 unsigned _23;
  __int128 unsigned _24;
  __int128 unsigned _25;
  __int128 unsigned _26;
  signed long low.0_27;
  signed long _28;
  signed long low.1_29;
  signed long _30;
  long unsigned int _31;
  __int128 unsigned _32;
  __int128 unsigned _33;
  long unsigned int _34;
  __int128 unsigned _35;
  __int128 unsigned _36;
  long unsigned int _37;
  __int128 unsigned _38;
  __int128 unsigned _39;
  __int128 unsigned _40;
  __int128 unsigned _41;
  long unsigned int _42;
  __int128 unsigned _43;
  __int128 unsigned _44;
  long unsigned int _45;
  __int128 unsigned _46;
  __int128 unsigned _47;
  long unsigned int _48;
  long unsigned int _49;
  __int128 unsigned _75;
  __int128 unsigned _76;

  <bb 2> [local count: 1073741825]:
  _2 = MEM[(const limb *)in_50(D) + 48B];
  _3 = _2 + 18446744069414584320;
  _4 = MEM[(const limb *)in_50(D) + 32B];
  _5 = _4 >> 64;
  _6 = _3 + _5;
  _1 = _4 & 18446744073709551615;
  _8 = _1 + 18446673704965373952;
  _10 = *in_50(D);
  _11 = _10 + 18446744073709551615;
  _12 = MEM[(const limb *)in_50(D) + 16B];
  _13 = _12 + 0x40000000000000000000ffffffff;
  _14 = _6 >> 64;
  a_52 = (u64) _14;
  _7 = _6 & 18446744073709551615;
  _16 = _14 << 32;
  _76 = _16 - _14;
  _17 = _7 + _76;
  _18 = _17 >> 64;
  a_53 = (u64) _18;
  b_54 = a_52 + a_53;
  _9 = _17 & 18446744073709551615;
  _20 = _18 << 32;
  _75 = _20 - _18;
  _21 = _9 + _75;
  _22 = (__int128 unsigned) b_54;
  _23 = _11 + _22;
  _24 = _22 << 32;
  _25 = _13 - _24;
  _26 = _21 >> 64;
  high_55 = (u64) _26;
  high_56 = -high_55;
  low_57 = (u64) _21;
  low.0_27 = (signed long) _21;
  _28 = low.0_27 >> 63;
  mask_58 = (u64) _28;
  low_59 = low_57 & 9223372036854775807;
  low_60 = low_59 + 9223372041149743103;
  low_61 = ~low_60;
  low.1_29 = (signed long) low_61;
  _30 = low.1_29 >> 63;
  low_62 = (u64) _30;
  _31 = mask_58 & low_62;
  mask_63 = _31 | high_56;
  _32 = (__int128 unsigned) mask_63;
  _33 = _23 - _32;
  _34 = mask_63 & 4294967295;
  _35 = (__int128 unsigned) _34;
  _36 = _25 - _35;
  _37 = mask_63 & 18446744069414584321;
  _38 = (__int128 unsigned) _37;
  _39 = _21 - _38;
  _40 = _33 >> 64;
  _41 = _36 + _40;
  _42 = (long unsigned int) _33;
  _43 = _41 >> 64;
  _44 = _8 + _43;
  _45 = (long unsigned int) _41;
  _46 = _44 >> 64;
  _47 = _39 + _46;
  _48 = (long unsigned int) _44;
  *out_64(D) = _42;
  MEM[(u64 *)out_64(D) + 8B] = _45;
  MEM[(u64 *)out_64(D) + 16B] = _48;
  _49 = (long unsigned int) _47;
  MEM[(u64 *)out_64(D) + 24B] = _49;
  return;

}



;; Function felem_mul (felem_mul, funcdef_no=420, decl_uid=10480, cgraph_uid=420, symbol_order=426)

felem_mul (limb * out, const limb * in1, const limb * in2)
{
  u64 low;
  u64 high;
  u64 mask;
  u64 b;
  u64 a;
  u64 small2[4];
  u64 small1[4];
  __int128 unsigned _10;
  __int128 unsigned _11;
  __int128 unsigned _12;
  __int128 unsigned _13;
  __int128 unsigned _14;
  __int128 unsigned _15;
  __int128 unsigned _16;
  __int128 unsigned _17;
  __int128 unsigned _18;
  __int128 unsigned _19;
  __int128 unsigned _20;
  __int128 unsigned _21;
  __int128 unsigned _23;
  __int128 unsigned _25;
  __int128 unsigned _26;
  __int128 unsigned _27;
  __int128 unsigned _30;
  __int128 unsigned _32;
  __int128 unsigned _33;
  __int128 unsigned _34;
  __int128 unsigned _35;
  __int128 unsigned _36;
  __int128 unsigned _37;
  __int128 unsigned _38;
  signed long low.0_42;
  signed long _43;
  signed long low.1_48;
  signed long _49;
  long unsigned int _51;
  __int128 unsigned _53;
  __int128 unsigned _54;
  long unsigned int _55;
  __int128 unsigned _56;
  __int128 unsigned _57;
  long unsigned int _58;
  __int128 unsigned _59;
  __int128 unsigned _60;
  __int128 unsigned _61;
  __int128 unsigned _62;
  long unsigned int _63;
  __int128 unsigned _64;
  __int128 unsigned _65;
  long unsigned int _66;
  __int128 unsigned _67;
  __int128 unsigned _68;
  long unsigned int _69;
  long unsigned int _70;
  __int128 unsigned _80;
  __int128 unsigned _81;

  <bb 2> [local count: 1073741825]:
  _10 = MEM[(const limb *)in1_2(D) + 48B];
  _11 = _10 + 18446744069414584320;
  _12 = MEM[(const limb *)in1_2(D) + 32B];
  _13 = _12 >> 64;
  _14 = _11 + _13;
  _15 = _12 & 18446744073709551615;
  _16 = _15 + 18446673704965373952;
  _17 = *in1_2(D);
  _18 = _17 + 18446744073709551615;
  _19 = MEM[(const limb *)in1_2(D) + 16B];
  _20 = _19 + 0x40000000000000000000ffffffff;
  _21 = _14 >> 64;
  a_22 = (u64) _21;
  _23 = _14 & 18446744073709551615;
  _25 = _21 << 32;
  _81 = _25 - _21;
  _26 = _23 + _81;
  _27 = _26 >> 64;
  a_28 = (u64) _27;
  b_29 = a_22 + a_28;
  _30 = _26 & 18446744073709551615;
  _32 = _27 << 32;
  _80 = _32 - _27;
  _33 = _30 + _80;
  _34 = (__int128 unsigned) b_29;
  _35 = _18 + _34;
  _36 = _34 << 32;
  _37 = _20 - _36;
  _38 = _33 >> 64;
  high_39 = (u64) _38;
  high_40 = -high_39;
  low_41 = (u64) _33;
  low.0_42 = (signed long) _33;
  _43 = low.0_42 >> 63;
  mask_44 = (u64) _43;
  low_45 = low_41 & 9223372036854775807;
  low_46 = low_45 + 9223372041149743103;
  low_47 = ~low_46;
  low.1_48 = (signed long) low_47;
  _49 = low.1_48 >> 63;
  low_50 = (u64) _49;
  _51 = mask_44 & low_50;
  mask_52 = high_40 | _51;
  _53 = (__int128 unsigned) mask_52;
  _54 = _35 - _53;
  _55 = mask_52 & 4294967295;
  _56 = (__int128 unsigned) _55;
  _57 = _37 - _56;
  _58 = mask_52 & 18446744069414584321;
  _59 = (__int128 unsigned) _58;
  _60 = _33 - _59;
  _61 = _54 >> 64;
  _62 = _57 + _61;
  _63 = (long unsigned int) _54;
  _64 = _62 >> 64;
  _65 = _16 + _64;
  _66 = (long unsigned int) _62;
  _67 = _65 >> 64;
  _68 = _60 + _67;
  _69 = (long unsigned int) _65;
  MEM[(u64 *)&small1] = _63;
  MEM[(u64 *)&small1 + 8B] = _66;
  MEM[(u64 *)&small1 + 16B] = _69;
  _70 = (long unsigned int) _68;
  MEM[(u64 *)&small1 + 24B] = _70;
  felem_shrink (&small2, in2_4(D));
  smallfelem_mul (out_6(D), &small1, &small2);
  small1 ={v} {CLOBBER};
  small2 ={v} {CLOBBER};
  return;

}



;; Function felem_inv (felem_inv, funcdef_no=431, decl_uid=10547, cgraph_uid=431, symbol_order=438)

felem_inv (limb * out, const limb * in)
{
  u64 small[4];
  u64 small[4];
  u64 small[4];
  u64 small[4];
  u64 small[4];
  u64 small[4];
  u64 small[4];
  u64 small[4];
  u64 small[4];
  u64 small[4];
  u64 small[4];
  u64 small[4];
  u64 small[4];
  u64 small[4];
  u64 small[4];
  u64 small[4];
  u64 small[4];
  u64 small[4];
  limb tmp[8];
  limb e64[4];
  limb e32[4];
  limb e16[4];
  limb e8[4];
  limb e4[4];
  limb e2[4];
  limb ftmp2[4];
  limb ftmp[4];
  unsigned int ivtmp_1;
  unsigned int ivtmp_2;
  unsigned int ivtmp_3;
  unsigned int ivtmp_4;
  unsigned int ivtmp_5;
  unsigned int ivtmp_6;
  unsigned int ivtmp_7;
  __int128 unsigned _78;
  __int128 unsigned _79;
  __int128 unsigned _80;
  __int128 unsigned _81;
  __int128 unsigned _82;
  __int128 unsigned _83;
  __int128 unsigned _84;
  __int128 unsigned _85;
  __int128 unsigned _86;
  __int128 unsigned _87;
  __int128 unsigned _88;
  __int128 unsigned _89;
  __int128 unsigned _90;
  __int128 unsigned _91;
  __int128 unsigned _92;
  __int128 unsigned _93;
  __int128 unsigned _94;
  __int128 unsigned _95;
  __int128 unsigned _96;
  __int128 unsigned _97;
  __int128 unsigned _98;
  __int128 unsigned _99;
  __int128 unsigned _100;
  __int128 unsigned _101;
  unsigned int ivtmp_187;
  unsigned int ivtmp_189;
  unsigned int ivtmp_191;
  unsigned int ivtmp_193;
  unsigned int ivtmp_195;
  unsigned int ivtmp_197;
  unsigned int ivtmp_199;

  <bb 2> [local count: 10737418]:
  felem_shrink (&small, in_16(D));
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp, &tmp);
  felem_mul (&tmp, in_16(D), &ftmp);
  felem_reduce (&ftmp, &tmp);
  _86 = MEM[(const limb *)&ftmp];
  MEM[(limb *)&e2] = _86;
  _87 = MEM[(const limb *)&ftmp + 16B];
  MEM[(limb *)&e2 + 16B] = _87;
  _88 = MEM[(const limb *)&ftmp + 32B];
  MEM[(limb *)&e2 + 32B] = _88;
  _89 = MEM[(const limb *)&ftmp + 48B];
  MEM[(limb *)&e2 + 48B] = _89;
  felem_shrink (&small, &ftmp);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp, &tmp);
  felem_shrink (&small, &ftmp);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp, &tmp);
  felem_mul (&tmp, &ftmp, &e2);
  felem_reduce (&ftmp, &tmp);
  _82 = MEM[(const limb *)&ftmp];
  MEM[(limb *)&e4] = _82;
  _83 = MEM[(const limb *)&ftmp + 16B];
  MEM[(limb *)&e4 + 16B] = _83;
  _84 = MEM[(const limb *)&ftmp + 32B];
  MEM[(limb *)&e4 + 32B] = _84;
  _85 = MEM[(const limb *)&ftmp + 48B];
  MEM[(limb *)&e4 + 48B] = _85;
  felem_shrink (&small, &ftmp);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp, &tmp);
  felem_shrink (&small, &ftmp);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp, &tmp);
  felem_shrink (&small, &ftmp);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp, &tmp);
  felem_shrink (&small, &ftmp);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp, &tmp);
  felem_mul (&tmp, &ftmp, &e4);
  felem_reduce (&ftmp, &tmp);
  _78 = MEM[(const limb *)&ftmp];
  MEM[(limb *)&e8] = _78;
  _79 = MEM[(const limb *)&ftmp + 16B];
  MEM[(limb *)&e8 + 16B] = _79;
  _80 = MEM[(const limb *)&ftmp + 32B];
  MEM[(limb *)&e8 + 32B] = _80;
  _81 = MEM[(const limb *)&ftmp + 48B];
  MEM[(limb *)&e8 + 48B] = _81;

  <bb 3> [local count: 85909008]:
  # ivtmp_1 = PHI <8(2), ivtmp_199(3)>
  felem_shrink (&small, &ftmp);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp, &tmp);
  ivtmp_199 = ivtmp_1 + 4294967295;
  if (ivtmp_199 != 0)
    goto <bb 3>; [87.50%]
  else
    goto <bb 4>; [12.50%]

  <bb 4> [local count: 10737418]:
  felem_mul (&tmp, &ftmp, &e8);
  felem_reduce (&ftmp, &tmp);
  _90 = MEM[(const limb *)&ftmp];
  MEM[(limb *)&e16] = _90;
  _91 = MEM[(const limb *)&ftmp + 16B];
  MEM[(limb *)&e16 + 16B] = _91;
  _92 = MEM[(const limb *)&ftmp + 32B];
  MEM[(limb *)&e16 + 32B] = _92;
  _93 = MEM[(const limb *)&ftmp + 48B];
  MEM[(limb *)&e16 + 48B] = _93;

  <bb 5> [local count: 171871730]:
  # ivtmp_2 = PHI <16(4), ivtmp_197(5)>
  felem_shrink (&small, &ftmp);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp, &tmp);
  ivtmp_197 = ivtmp_2 + 4294967295;
  if (ivtmp_197 != 0)
    goto <bb 5>; [93.75%]
  else
    goto <bb 6>; [6.25%]

  <bb 6> [local count: 10737418]:
  felem_mul (&tmp, &ftmp, &e16);
  felem_reduce (&ftmp, &tmp);
  _94 = MEM[(const limb *)&ftmp];
  MEM[(limb *)&e32] = _94;
  _95 = MEM[(const limb *)&ftmp + 16B];
  MEM[(limb *)&e32 + 16B] = _95;
  _96 = MEM[(const limb *)&ftmp + 32B];
  MEM[(limb *)&e32 + 32B] = _96;
  _97 = MEM[(const limb *)&ftmp + 48B];
  MEM[(limb *)&e32 + 48B] = _97;

  <bb 7> [local count: 343632813]:
  # ivtmp_3 = PHI <32(6), ivtmp_195(7)>
  felem_shrink (&small, &ftmp);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp, &tmp);
  ivtmp_195 = ivtmp_3 + 4294967295;
  if (ivtmp_195 != 0)
    goto <bb 7>; [96.88%]
  else
    goto <bb 8>; [3.12%]

  <bb 8> [local count: 10737418]:
  _98 = MEM[(const limb *)&ftmp];
  MEM[(limb *)&e64] = _98;
  _99 = MEM[(const limb *)&ftmp + 16B];
  MEM[(limb *)&e64 + 16B] = _99;
  _100 = MEM[(const limb *)&ftmp + 32B];
  MEM[(limb *)&e64 + 32B] = _100;
  _101 = MEM[(const limb *)&ftmp + 48B];
  MEM[(limb *)&e64 + 48B] = _101;
  felem_mul (&tmp, &ftmp, in_16(D));
  felem_reduce (&ftmp, &tmp);

  <bb 9> [local count: 1063004407]:
  # ivtmp_4 = PHI <192(8), ivtmp_193(9)>
  felem_shrink (&small, &ftmp);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp, &tmp);
  ivtmp_193 = ivtmp_4 + 4294967295;
  if (ivtmp_193 != 0)
    goto <bb 9>; [98.99%]
  else
    goto <bb 10>; [1.01%]

  <bb 10> [local count: 10737418]:
  felem_mul (&tmp, &e64, &e32);
  felem_reduce (&ftmp2, &tmp);

  <bb 11> [local count: 171871736]:
  # ivtmp_6 = PHI <16(10), ivtmp_5(11)>
  felem_shrink (&small, &ftmp2);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp2, &tmp);
  ivtmp_5 = ivtmp_6 + 4294967295;
  if (ivtmp_5 != 0)
    goto <bb 11>; [93.75%]
  else
    goto <bb 12>; [6.25%]

  <bb 12> [local count: 10737418]:
  felem_mul (&tmp, &ftmp2, &e16);
  felem_reduce (&ftmp2, &tmp);

  <bb 13> [local count: 85909011]:
  # ivtmp_187 = PHI <8(12), ivtmp_7(13)>
  felem_shrink (&small, &ftmp2);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp2, &tmp);
  ivtmp_7 = ivtmp_187 + 4294967295;
  if (ivtmp_7 != 0)
    goto <bb 13>; [87.50%]
  else
    goto <bb 14>; [12.50%]

  <bb 14> [local count: 10737418]:
  felem_mul (&tmp, &ftmp2, &e8);
  felem_reduce (&ftmp2, &tmp);

  <bb 15> [local count: 42949673]:
  # ivtmp_191 = PHI <4(14), ivtmp_189(15)>
  felem_shrink (&small, &ftmp2);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp2, &tmp);
  ivtmp_189 = ivtmp_191 + 4294967295;
  if (ivtmp_189 != 0)
    goto <bb 15>; [75.00%]
  else
    goto <bb 16>; [25.00%]

  <bb 16> [local count: 10737418]:
  felem_mul (&tmp, &ftmp2, &e4);
  felem_reduce (&ftmp2, &tmp);
  felem_shrink (&small, &ftmp2);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp2, &tmp);
  felem_shrink (&small, &ftmp2);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp2, &tmp);
  felem_mul (&tmp, &ftmp2, &e2);
  felem_reduce (&ftmp2, &tmp);
  felem_shrink (&small, &ftmp2);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp2, &tmp);
  felem_shrink (&small, &ftmp2);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp2, &tmp);
  felem_mul (&tmp, &ftmp2, in_16(D));
  felem_reduce (&ftmp2, &tmp);
  felem_mul (&tmp, &ftmp2, &ftmp);
  felem_reduce (out_67(D), &tmp);
  ftmp ={v} {CLOBBER};
  ftmp2 ={v} {CLOBBER};
  e2 ={v} {CLOBBER};
  e4 ={v} {CLOBBER};
  e8 ={v} {CLOBBER};
  e16 ={v} {CLOBBER};
  e32 ={v} {CLOBBER};
  e64 ={v} {CLOBBER};
  tmp ={v} {CLOBBER};
  return;

}



;; Function felem_contract (felem_contract, funcdef_no=426, decl_uid=10512, cgraph_uid=426, symbol_order=433)

felem_contract (u64 * out, const limb * in)
{
  uint128_t r;
  uint128_t r;
  uint128_t r;
  uint128_t r;
  uint128_t r;
  uint128_t a;
  u64 equal;
  u64 result;
  u64 all_equal_so_far;
  long unsigned int _6;
  __int128 unsigned _7;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  signed long equal.7_17;
  signed long _18;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _43;
  __int128 unsigned _46;
  __int128 unsigned _48;
  long unsigned int _49;
  long unsigned int _50;
  long unsigned int _51;
  __int128 unsigned _53;
  __int128 unsigned _55;
  long unsigned int _56;
  long unsigned int _57;
  long unsigned int _58;
  long unsigned int _59;
  long unsigned int _61;
  __int128 unsigned _63;
  __int128 unsigned _65;
  long unsigned int _66;
  long unsigned int _67;
  long unsigned int _68;
  long unsigned int _69;
  __int128 unsigned _71;
  __int128 unsigned _73;
  long unsigned int _74;
  long unsigned int _75;
  long unsigned int _76;
  __int128 unsigned _79;
  __int128 unsigned _81;
  long unsigned int _82;
  long unsigned int _83;
  long unsigned int _84;
  signed long _130;
  signed long equal.7_131;
  long unsigned int _133;
  long unsigned int _135;
  long unsigned int _137;
  long unsigned int _139;
  long unsigned int _141;
  long unsigned int _143;
  long unsigned int _147;
  long unsigned int _148;
  __int128 unsigned _149;
  __int128 unsigned _151;
  long unsigned int _152;
  signed long _166;
  signed long equal.7_167;
  long unsigned int _169;
  long unsigned int _171;
  long unsigned int _173;
  long unsigned int _175;
  long unsigned int _177;
  long unsigned int _179;
  long unsigned int _183;
  long unsigned int _184;
  __int128 unsigned _185;
  __int128 unsigned _187;
  long unsigned int _188;
  signed long _202;
  signed long equal.7_203;
  long unsigned int _205;
  long unsigned int _207;
  long unsigned int _209;
  long unsigned int _211;
  long unsigned int _219;
  long unsigned int _221;
  long unsigned int _226;
  __int128 unsigned _227;
  __int128 unsigned _229;
  long unsigned int _230;
  __int128 unsigned _244;
  __int128 unsigned _245;

  <bb 2> [local count: 214748365]:
  felem_shrink (out_26(D), in_27(D));
  _230 = MEM[(u64 *)out_26(D) + 24B];
  _229 = (__int128 unsigned) _230;
  a_228 = 18446744069414584321 - _229;
  _227 = a_228 >> 64;
  _226 = (long unsigned int) _227;
  equal_223 = _230 ^ 18446744069414584321;
  equal_222 = equal_223 + 18446744073709551615;
  _221 = equal_222 << 32;
  equal_220 = _221 & equal_222;
  _219 = equal_220 << 16;
  equal_218 = _219 & equal_220;
  _211 = equal_218 << 8;
  equal_210 = _211 & equal_218;
  _209 = equal_210 << 4;
  equal_208 = _209 & equal_210;
  _207 = equal_208 << 2;
  equal_206 = _207 & equal_208;
  _205 = equal_206 << 1;
  equal_204 = _205 & equal_206;
  equal.7_203 = (signed long) equal_204;
  _202 = equal.7_203 >> 63;
  equal_201 = (u64) _202;
  _188 = MEM[(u64 *)out_26(D) + 16B];
  _187 = (__int128 unsigned) _188;
  a_186 = -_187;
  _185 = a_186 >> 64;
  _184 = (long unsigned int) _185;
  _183 = _184 & equal_201;
  result_182 = _183 | _226;
  equal_180 = _188 + 18446744073709551615;
  _179 = equal_180 << 32;
  equal_178 = _179 & equal_180;
  _177 = equal_178 << 16;
  equal_176 = _177 & equal_178;
  _175 = equal_176 << 8;
  equal_174 = _175 & equal_176;
  _173 = equal_174 << 4;
  equal_172 = _173 & equal_174;
  _171 = equal_172 << 2;
  equal_170 = _171 & equal_172;
  _169 = equal_170 << 1;
  equal_168 = _169 & equal_170;
  equal.7_167 = (signed long) equal_168;
  _166 = equal.7_167 >> 63;
  equal_165 = (u64) _166;
  all_equal_so_far_164 = equal_165 & equal_201;
  _152 = MEM[(u64 *)out_26(D) + 8B];
  _151 = (__int128 unsigned) _152;
  a_150 = 4294967295 - _151;
  _149 = a_150 >> 64;
  _148 = (long unsigned int) _149;
  _147 = _148 & all_equal_so_far_164;
  result_146 = _147 | result_182;
  equal_145 = _152 ^ 4294967295;
  equal_144 = equal_145 + 18446744073709551615;
  _143 = equal_144 << 32;
  equal_142 = _143 & equal_144;
  _141 = equal_142 << 16;
  equal_140 = _141 & equal_142;
  _139 = equal_140 << 8;
  equal_138 = _139 & equal_140;
  _137 = equal_138 << 4;
  equal_136 = _137 & equal_138;
  _135 = equal_136 << 2;
  equal_134 = _135 & equal_136;
  _133 = equal_134 << 1;
  equal_132 = _133 & equal_134;
  equal.7_131 = (signed long) equal_132;
  _130 = equal.7_131 >> 63;
  equal_129 = (u64) _130;
  all_equal_so_far_128 = equal_129 & all_equal_so_far_164;
  _6 = *out_26(D);
  _7 = (__int128 unsigned) _6;
  equal_31 = ~_6;
  equal_32 = equal_31 + 18446744073709551615;
  _11 = equal_32 << 32;
  equal_33 = _11 & equal_32;
  _12 = equal_33 << 16;
  equal_34 = _12 & equal_33;
  _13 = equal_34 << 8;
  equal_35 = _13 & equal_34;
  _14 = equal_35 << 4;
  equal_36 = _14 & equal_35;
  _15 = equal_36 << 2;
  equal_37 = _15 & equal_36;
  _16 = equal_37 << 1;
  equal_38 = _16 & equal_37;
  equal.7_17 = (signed long) equal_38;
  _18 = equal.7_17 >> 63;
  equal_39 = (u64) _18;
  all_equal_so_far_40 = equal_39 & all_equal_so_far_128;
  result_42 = all_equal_so_far_40 | result_146;
  _79 = (__int128 unsigned) result_42;
  r_80 = _7 - _79;
  _81 = r_80 >> 64;
  _82 = (long unsigned int) _81;
  _83 = _82 & 1;
  _84 = _6 - result_42;
  *out_26(D) = _84;
  _69 = MEM[(u64 *)out_26(D) + 8B];
  r_70 = (uint128_t) _69;
  _71 = (__int128 unsigned) _83;
  r_72 = r_70 - _71;
  _73 = r_72 >> 64;
  _74 = (long unsigned int) _73;
  _75 = _74 & 1;
  _76 = _69 - _83;
  _61 = MEM[(u64 *)out_26(D) + 16B];
  r_62 = (uint128_t) _61;
  _63 = (__int128 unsigned) _75;
  r_64 = r_62 - _63;
  _65 = r_64 >> 64;
  _66 = (long unsigned int) _65;
  _67 = _66 & 1;
  _68 = _61 - _75;
  _59 = MEM[(u64 *)out_26(D) + 24B];
  _20 = result_42 & 4294967295;
  _244 = (__int128 unsigned) _76;
  _53 = (__int128 unsigned) _20;
  r_54 = _244 - _53;
  _55 = r_54 >> 64;
  _56 = (long unsigned int) _55;
  _57 = _56 & 1;
  _58 = _76 - _20;
  MEM[(u64 *)out_26(D) + 8B] = _58;
  _245 = (__int128 unsigned) _68;
  _46 = (__int128 unsigned) _57;
  r_47 = _245 - _46;
  _48 = r_47 >> 64;
  _49 = (long unsigned int) _48;
  _50 = _49 & 1;
  _51 = _68 - _57;
  MEM[(u64 *)out_26(D) + 16B] = _51;
  _21 = result_42 & 18446744069414584321;
  _22 = _59 - _21;
  _23 = _22 - _67;
  _43 = _23 - _50;
  MEM[(u64 *)out_26(D) + 24B] = _43;
  return;

}



;; Function smallfelem_inv_contract (smallfelem_inv_contract, funcdef_no=432, decl_uid=10582, cgraph_uid=432, symbol_order=439)

smallfelem_inv_contract (u64 * out, const u64 * in)
{
  limb tmp[4];
  long unsigned int _7;
  __int128 unsigned _8;
  long unsigned int _9;
  __int128 unsigned _10;
  long unsigned int _11;
  __int128 unsigned _12;
  long unsigned int _13;
  __int128 unsigned _14;

  <bb 2> [local count: 1073741825]:
  _7 = *in_2(D);
  _8 = (__int128 unsigned) _7;
  MEM[(limb *)&tmp] = _8;
  _9 = MEM[(const u64 *)in_2(D) + 8B];
  _10 = (__int128 unsigned) _9;
  MEM[(limb *)&tmp + 16B] = _10;
  _11 = MEM[(const u64 *)in_2(D) + 16B];
  _12 = (__int128 unsigned) _11;
  MEM[(limb *)&tmp + 32B] = _12;
  _13 = MEM[(const u64 *)in_2(D) + 24B];
  _14 = (__int128 unsigned) _13;
  MEM[(limb *)&tmp + 48B] = _14;
  felem_inv (&tmp, &tmp);
  felem_contract (out_4(D), &tmp);
  tmp ={v} {CLOBBER};
  return;

}



;; Function smallfelem_mul_contract (smallfelem_mul_contract, funcdef_no=428, decl_uid=10532, cgraph_uid=428, symbol_order=435)

smallfelem_mul_contract (u64 * out, const u64 * in1, const u64 * in2)
{
  limb tmp[4];
  limb longtmp[8];
  __int128 unsigned _10;
  __int128 unsigned _11;
  __int128 unsigned _12;
  __int128 unsigned _14;
  __int128 unsigned _16;
  __int128 unsigned _17;
  __int128 unsigned _18;
  __int128 unsigned _19;
  __int128 unsigned _20;
  __int128 unsigned _21;
  __int128 unsigned _22;
  __int128 unsigned _24;
  __int128 unsigned _26;
  __int128 unsigned _27;
  __int128 unsigned _29;
  __int128 unsigned _31;
  __int128 unsigned _34;
  __int128 unsigned _35;
  __int128 unsigned _38;
  __int128 unsigned _40;
  __int128 unsigned _41;
  __int128 unsigned _43;
  __int128 unsigned _45;
  __int128 unsigned _46;
  __int128 unsigned _49;
  __int128 unsigned _50;
  __int128 unsigned _52;
  __int128 unsigned _58;
  __int128 unsigned _60;
  __int128 unsigned _61;
  __int128 unsigned _63;
  __int128 unsigned _64;
  __int128 unsigned _66;
  __int128 unsigned _67;
  __int128 unsigned _78;
  __int128 unsigned _79;
  __int128 unsigned _80;
  __int128 unsigned _83;
  __int128 unsigned _84;

  <bb 2> [local count: 1073741825]:
  smallfelem_mul (&longtmp, in1_2(D), in2_3(D));
  _10 = MEM[(const limb *)&longtmp];
  _11 = _10 + 0xfffffffffffffffeffffffff0;
  _12 = MEM[(const limb *)&longtmp + 16B];
  _14 = MEM[(const limb *)&longtmp + 32B];
  _16 = MEM[(const limb *)&longtmp + 48B];
  _17 = _16 + 0xffffffffffffffff000000010;
  _18 = MEM[(const limb *)&longtmp + 64B];
  _19 = MEM[(const limb *)&longtmp + 80B];
  _38 = _12 + _19;
  _20 = _19 << 32;
  _21 = _18 + _20;
  _27 = MEM[(const limb *)&longtmp + 112B];
  _83 = _14 + _27;
  _40 = _38 + 0x10000000000000000000000000;
  _41 = _40 - _27;
  _84 = _83 + 0xffffffffffffffff000000010;
  _22 = _84 - _19;
  _35 = _18 << 32;
  _78 = _17 + _35;
  _43 = MEM[(const limb *)&longtmp + 96B];
  _29 = _11 - _43;
  _46 = _43 << 32;
  _49 = _43 << 33;
  _45 = _41 + _49;
  _50 = _45 - _35;
  MEM[(limb *)&tmp + 16B] = _50;
  _52 = _43 * 2;
  _24 = _22 + _52;
  _31 = _29 - _27;
  _34 = _21 + _31;
  _58 = _34 - _46;
  _60 = _27 << 32;
  _61 = _58 - _60;
  MEM[(limb *)&tmp] = _61;
  _63 = _27 << 33;
  _26 = _24 + _63;
  _64 = _26 - _20;
  MEM[(limb *)&tmp + 32B] = _64;
  _66 = _27 * 3;
  _79 = _66 + _78;
  _80 = _79 - _46;
  _67 = _80 - _21;
  MEM[(limb *)&tmp + 48B] = _67;
  felem_contract (out_6(D), &tmp);
  longtmp ={v} {CLOBBER};
  tmp ={v} {CLOBBER};
  return;

}



;; Function smallfelem_square_contract (smallfelem_square_contract, funcdef_no=427, decl_uid=10525, cgraph_uid=427, symbol_order=434)

smallfelem_square_contract (u64 * out, const u64 * in)
{
  limb tmp[4];
  limb longtmp[8];
  __int128 unsigned _9;
  __int128 unsigned _10;
  __int128 unsigned _11;
  __int128 unsigned _13;
  __int128 unsigned _15;
  __int128 unsigned _16;
  __int128 unsigned _17;
  __int128 unsigned _18;
  __int128 unsigned _19;
  __int128 unsigned _20;
  __int128 unsigned _21;
  __int128 unsigned _23;
  __int128 unsigned _25;
  __int128 unsigned _26;
  __int128 unsigned _28;
  __int128 unsigned _30;
  __int128 unsigned _33;
  __int128 unsigned _34;
  __int128 unsigned _37;
  __int128 unsigned _39;
  __int128 unsigned _40;
  __int128 unsigned _42;
  __int128 unsigned _44;
  __int128 unsigned _45;
  __int128 unsigned _48;
  __int128 unsigned _49;
  __int128 unsigned _51;
  __int128 unsigned _57;
  __int128 unsigned _59;
  __int128 unsigned _60;
  __int128 unsigned _62;
  __int128 unsigned _63;
  __int128 unsigned _65;
  __int128 unsigned _66;
  __int128 unsigned _77;
  __int128 unsigned _78;
  __int128 unsigned _79;
  __int128 unsigned _82;
  __int128 unsigned _83;

  <bb 2> [local count: 1073741825]:
  smallfelem_square (&longtmp, in_2(D));
  _9 = MEM[(const limb *)&longtmp];
  _10 = _9 + 0xfffffffffffffffeffffffff0;
  _11 = MEM[(const limb *)&longtmp + 16B];
  _13 = MEM[(const limb *)&longtmp + 32B];
  _15 = MEM[(const limb *)&longtmp + 48B];
  _16 = _15 + 0xffffffffffffffff000000010;
  _17 = MEM[(const limb *)&longtmp + 64B];
  _18 = MEM[(const limb *)&longtmp + 80B];
  _37 = _11 + _18;
  _19 = _18 << 32;
  _20 = _17 + _19;
  _26 = MEM[(const limb *)&longtmp + 112B];
  _82 = _13 + _26;
  _39 = _37 + 0x10000000000000000000000000;
  _40 = _39 - _26;
  _83 = _82 + 0xffffffffffffffff000000010;
  _21 = _83 - _18;
  _34 = _17 << 32;
  _77 = _16 + _34;
  _42 = MEM[(const limb *)&longtmp + 96B];
  _28 = _10 - _42;
  _45 = _42 << 32;
  _48 = _42 << 33;
  _44 = _40 + _48;
  _49 = _44 - _34;
  MEM[(limb *)&tmp + 16B] = _49;
  _51 = _42 * 2;
  _23 = _21 + _51;
  _30 = _28 - _26;
  _33 = _20 + _30;
  _57 = _33 - _45;
  _59 = _26 << 32;
  _60 = _57 - _59;
  MEM[(limb *)&tmp] = _60;
  _62 = _26 << 33;
  _25 = _23 + _62;
  _63 = _25 - _19;
  MEM[(limb *)&tmp + 32B] = _63;
  _65 = _26 * 3;
  _78 = _65 + _77;
  _79 = _78 - _45;
  _66 = _79 - _20;
  MEM[(limb *)&tmp + 48B] = _66;
  felem_contract (out_5(D), &tmp);
  longtmp ={v} {CLOBBER};
  tmp ={v} {CLOBBER};
  return;

}



;; Function point_double (point_double, funcdef_no=433, decl_uid=10591, cgraph_uid=433, symbol_order=440)

point_double (limb * x_out, limb * y_out, limb * z_out, const limb * x_in, const limb * y_in, const limb * z_in)
{
  u64 small2[4];
  u64 small1[4];
  u64 small[4];
  u64 small[4];
  u64 small2[4];
  u64 small[4];
  u64 small2[4];
  u64 small2[4];
  u64 small1[4];
  limb ftmp2[4];
  limb ftmp[4];
  limb alpha[4];
  limb beta[4];
  limb gamma[4];
  limb delta[4];
  limb tmp2[8];
  limb tmp[8];
  __int128 unsigned _31;
  __int128 unsigned _32;
  __int128 unsigned _33;
  __int128 unsigned _34;
  __int128 unsigned _35;
  __int128 unsigned _36;
  __int128 unsigned _37;
  __int128 unsigned _38;
  __int128 unsigned _39;
  __int128 unsigned _40;
  __int128 unsigned _41;
  __int128 unsigned _42;
  __int128 unsigned _43;
  __int128 unsigned _44;
  __int128 unsigned _45;
  __int128 unsigned _46;
  __int128 unsigned _47;
  __int128 unsigned _48;
  __int128 unsigned _49;
  __int128 unsigned _50;
  __int128 unsigned _51;
  __int128 unsigned _52;
  __int128 unsigned _53;
  __int128 unsigned _54;
  __int128 unsigned _55;
  __int128 unsigned _56;
  __int128 unsigned _57;
  __int128 unsigned _58;
  __int128 unsigned _59;
  __int128 unsigned _60;
  __int128 unsigned _61;
  __int128 unsigned _62;
  __int128 unsigned _63;
  __int128 unsigned _64;
  __int128 unsigned _65;
  __int128 unsigned _66;
  __int128 unsigned _67;
  __int128 unsigned _69;
  __int128 unsigned _71;
  __int128 unsigned _73;
  __int128 unsigned _75;
  __int128 unsigned _76;
  __int128 unsigned _77;
  __int128 unsigned _78;
  __int128 unsigned _79;
  __int128 unsigned _80;
  __int128 unsigned _81;
  __int128 unsigned _82;
  __int128 unsigned _83;
  __int128 unsigned _84;
  __int128 unsigned _85;
  __int128 unsigned _86;
  __int128 unsigned _87;
  __int128 unsigned _88;
  __int128 unsigned _89;
  __int128 unsigned _90;
  __int128 unsigned _91;
  __int128 unsigned _92;
  __int128 unsigned _93;
  __int128 unsigned _94;
  __int128 unsigned _95;
  __int128 unsigned _96;
  __int128 unsigned _97;
  __int128 unsigned _98;
  __int128 unsigned _99;
  __int128 unsigned _100;
  __int128 unsigned _101;
  __int128 unsigned _102;
  __int128 unsigned _103;
  __int128 unsigned _104;
  __int128 unsigned _105;
  __int128 unsigned _106;
  __int128 unsigned _107;
  __int128 unsigned _109;
  __int128 unsigned _111;
  __int128 unsigned _113;
  __int128 unsigned _115;
  __int128 unsigned _116;
  __int128 unsigned _117;
  __int128 unsigned _118;
  __int128 unsigned _119;
  __int128 unsigned _120;
  __int128 unsigned _121;
  __int128 unsigned _122;
  __int128 unsigned _123;
  __int128 unsigned _124;
  __int128 unsigned _125;
  __int128 unsigned _126;
  __int128 unsigned _127;
  __int128 unsigned _128;
  __int128 unsigned _129;
  __int128 unsigned _130;
  __int128 unsigned _131;
  __int128 unsigned _132;
  __int128 unsigned _133;
  __int128 unsigned _134;
  __int128 unsigned _135;
  __int128 unsigned _136;
  __int128 unsigned _137;
  __int128 unsigned _138;
  __int128 unsigned _139;
  __int128 unsigned _140;
  __int128 unsigned _141;
  __int128 unsigned _142;
  __int128 unsigned _143;
  __int128 unsigned _144;
  __int128 unsigned _145;
  __int128 unsigned _146;
  __int128 unsigned _147;
  __int128 unsigned _148;
  __int128 unsigned _149;
  __int128 unsigned _150;
  __int128 unsigned _151;
  __int128 unsigned _152;
  __int128 unsigned _153;
  __int128 unsigned _154;
  __int128 unsigned _155;
  __int128 unsigned _156;
  __int128 unsigned _157;
  __int128 unsigned _158;
  __int128 unsigned _219;
  __int128 unsigned _221;
  __int128 unsigned _223;
  __int128 unsigned _225;
  __int128 unsigned _226;
  __int128 unsigned _227;
  __int128 unsigned _228;
  __int128 unsigned _229;
  __int128 unsigned _230;
  __int128 unsigned _231;
  __int128 unsigned _232;
  __int128 unsigned _233;
  __int128 unsigned _234;
  __int128 unsigned _235;
  __int128 unsigned _236;
  __int128 unsigned _237;
  __int128 unsigned _238;
  __int128 unsigned _239;
  __int128 unsigned _240;
  __int128 unsigned _241;
  __int128 unsigned _243;
  __int128 unsigned _245;
  __int128 unsigned _247;
  __int128 unsigned _249;
  __int128 unsigned _251;
  __int128 unsigned _253;
  __int128 unsigned _255;
  __int128 unsigned _257;
  __int128 unsigned _285;
  __int128 unsigned _286;
  __int128 unsigned _287;
  __int128 unsigned _288;
  __int128 unsigned _289;
  __int128 unsigned _290;
  __int128 unsigned _291;
  __int128 unsigned _292;

  <bb 2> [local count: 1073741825]:
  _155 = *x_in_2(D);
  MEM[(limb *)&ftmp] = _155;
  _156 = MEM[(const limb *)x_in_2(D) + 16B];
  MEM[(limb *)&ftmp + 16B] = _156;
  _157 = MEM[(const limb *)x_in_2(D) + 32B];
  MEM[(limb *)&ftmp + 32B] = _157;
  _158 = MEM[(const limb *)x_in_2(D) + 48B];
  MEM[(limb *)&ftmp + 48B] = _158;
  MEM[(limb *)&ftmp2] = _155;
  MEM[(limb *)&ftmp2 + 16B] = _156;
  MEM[(limb *)&ftmp2 + 32B] = _157;
  MEM[(limb *)&ftmp2 + 48B] = _158;
  felem_shrink (&small, z_in_3(D));
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&delta, &tmp);
  felem_shrink (&small, y_in_5(D));
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&gamma, &tmp);
  felem_shrink (&small1, &gamma);
  felem_shrink (&small2, x_in_2(D));
  smallfelem_mul (&tmp, &small1, &small2);
  small2 ={v} {CLOBBER};
  felem_reduce (&beta, &tmp);
  _139 = MEM[(limb *)&ftmp];
  _140 = _139 + 0x1fffffffffffffffdfffffffe00;
  _141 = MEM[(limb *)&ftmp + 16B];
  _142 = _141 + 0x200000000000000000000000000;
  _143 = MEM[(limb *)&ftmp + 32B];
  _144 = _143 + 0x1fffffffffffffffe0000000200;
  _145 = MEM[(limb *)&ftmp + 48B];
  _146 = _145 + 0x1fffffffffffffffe0000000200;
  _147 = MEM[(const limb *)&delta];
  _148 = _140 - _147;
  MEM[(limb *)&ftmp] = _148;
  _149 = MEM[(const limb *)&delta + 16B];
  _150 = _142 - _149;
  MEM[(limb *)&ftmp + 16B] = _150;
  _151 = MEM[(const limb *)&delta + 32B];
  _152 = _144 - _151;
  MEM[(limb *)&ftmp + 32B] = _152;
  _153 = MEM[(const limb *)&delta + 48B];
  _154 = _146 - _153;
  MEM[(limb *)&ftmp + 48B] = _154;
  _131 = MEM[(limb *)&ftmp2];
  _132 = _131 + _147;
  _133 = MEM[(limb *)&ftmp2 + 16B];
  _134 = _133 + _149;
  _135 = MEM[(limb *)&ftmp2 + 32B];
  _136 = _135 + _151;
  _137 = MEM[(limb *)&ftmp2 + 48B];
  _138 = _137 + _153;
  _127 = _132 * 3;
  MEM[(limb *)&ftmp2] = _127;
  _128 = _134 * 3;
  MEM[(limb *)&ftmp2 + 16B] = _128;
  _129 = _136 * 3;
  MEM[(limb *)&ftmp2 + 32B] = _129;
  _130 = _138 * 3;
  MEM[(limb *)&ftmp2 + 48B] = _130;
  felem_shrink (&small1, &ftmp);
  felem_shrink (&small2, &ftmp2);
  smallfelem_mul (&tmp, &small1, &small2);
  small1 ={v} {CLOBBER};
  small2 ={v} {CLOBBER};
  felem_reduce (&alpha, &tmp);
  felem_shrink (&small2, &alpha);
  smallfelem_square (&tmp, &small2);
  felem_reduce (x_out_13(D), &tmp);
  _123 = MEM[(const limb *)&beta];
  _124 = MEM[(const limb *)&beta + 16B];
  _125 = MEM[(const limb *)&beta + 32B];
  _126 = MEM[(const limb *)&beta + 48B];
  _119 = _123 * 8;
  _120 = _124 * 8;
  _121 = _125 * 8;
  _122 = _126 * 8;
  _107 = *x_out_13(D);
  _109 = MEM[(limb *)x_out_13(D) + 16B];
  _111 = MEM[(limb *)x_out_13(D) + 32B];
  _113 = MEM[(limb *)x_out_13(D) + 48B];
  _292 = 0x1fffffffffffffffdfffffffe00 - _119;
  _115 = _107 + _292;
  *x_out_13(D) = _115;
  _291 = 0x200000000000000000000000000 - _120;
  _116 = _109 + _291;
  MEM[(limb *)x_out_13(D) + 16B] = _116;
  _290 = 0x1fffffffffffffffe0000000200 - _121;
  _117 = _111 + _290;
  MEM[(limb *)x_out_13(D) + 32B] = _117;
  _289 = 0x1fffffffffffffffe0000000200 - _122;
  _118 = _113 + _289;
  MEM[(limb *)x_out_13(D) + 48B] = _118;
  _95 = MEM[(limb *)&delta];
  _96 = MEM[(const limb *)&gamma];
  _97 = _95 + _96;
  MEM[(limb *)&delta] = _97;
  _98 = MEM[(limb *)&delta + 16B];
  _99 = MEM[(const limb *)&gamma + 16B];
  _100 = _98 + _99;
  MEM[(limb *)&delta + 16B] = _100;
  _101 = MEM[(limb *)&delta + 32B];
  _102 = MEM[(const limb *)&gamma + 32B];
  _103 = _101 + _102;
  MEM[(limb *)&delta + 32B] = _103;
  _104 = MEM[(limb *)&delta + 48B];
  _105 = MEM[(const limb *)&gamma + 48B];
  _106 = _104 + _105;
  MEM[(limb *)&delta + 48B] = _106;
  _91 = *y_in_5(D);
  _92 = MEM[(const limb *)y_in_5(D) + 16B];
  _93 = MEM[(const limb *)y_in_5(D) + 32B];
  _94 = MEM[(const limb *)y_in_5(D) + 48B];
  _83 = *z_in_3(D);
  _84 = _83 + _91;
  MEM[(limb *)&ftmp] = _84;
  _85 = MEM[(const limb *)z_in_3(D) + 16B];
  _86 = _85 + _92;
  MEM[(limb *)&ftmp + 16B] = _86;
  _87 = MEM[(const limb *)z_in_3(D) + 32B];
  _88 = _87 + _93;
  MEM[(limb *)&ftmp + 32B] = _88;
  _89 = MEM[(const limb *)z_in_3(D) + 48B];
  _90 = _89 + _94;
  MEM[(limb *)&ftmp + 48B] = _90;
  felem_shrink (&small, &ftmp);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (z_out_15(D), &tmp);
  _67 = *z_out_15(D);
  _69 = MEM[(limb *)z_out_15(D) + 16B];
  _71 = MEM[(limb *)z_out_15(D) + 32B];
  _73 = MEM[(limb *)z_out_15(D) + 48B];
  _75 = MEM[(const limb *)&delta];
  _288 = 0x1fffffffffffffffdfffffffe00 - _75;
  _76 = _67 + _288;
  *z_out_15(D) = _76;
  _77 = MEM[(const limb *)&delta + 16B];
  _287 = 0x200000000000000000000000000 - _77;
  _78 = _69 + _287;
  MEM[(limb *)z_out_15(D) + 16B] = _78;
  _79 = MEM[(const limb *)&delta + 32B];
  _286 = 0x1fffffffffffffffe0000000200 - _79;
  _80 = _71 + _286;
  MEM[(limb *)z_out_15(D) + 32B] = _80;
  _81 = MEM[(const limb *)&delta + 48B];
  _285 = 0x1fffffffffffffffe0000000200 - _81;
  _82 = _73 + _285;
  MEM[(limb *)z_out_15(D) + 48B] = _82;
  _59 = MEM[(limb *)&beta];
  _60 = _59 * 4;
  _61 = MEM[(limb *)&beta + 16B];
  _62 = _61 * 4;
  _63 = MEM[(limb *)&beta + 32B];
  _64 = _63 * 4;
  _65 = MEM[(limb *)&beta + 48B];
  _66 = _65 * 4;
  _47 = _60 + 0x7fffffffffffffff7fffffff800;
  _48 = _62 + 0x800000000000000000000000000;
  _49 = _64 + 0x7fffffffffffffff80000000800;
  _50 = _66 + 0x7fffffffffffffff80000000800;
  _51 = MEM[(const limb *)x_out_13(D)];
  _52 = _47 - _51;
  MEM[(limb *)&beta] = _52;
  _53 = MEM[(const limb *)x_out_13(D) + 16B];
  _54 = _48 - _53;
  MEM[(limb *)&beta + 16B] = _54;
  _55 = MEM[(const limb *)x_out_13(D) + 32B];
  _56 = _49 - _55;
  MEM[(limb *)&beta + 32B] = _56;
  _57 = MEM[(const limb *)x_out_13(D) + 48B];
  _58 = _50 - _57;
  MEM[(limb *)&beta + 48B] = _58;
  felem_shrink (&small2, &beta);
  smallfelem_mul (&tmp, &small2, &small2);
  small2 ={v} {CLOBBER};
  smallfelem_square (&tmp2, &small1);
  _31 = MEM[(limb *)&tmp2];
  _32 = _31 * 8;
  MEM[(limb *)&tmp2] = _32;
  _33 = MEM[(limb *)&tmp2 + 16B];
  _34 = _33 * 8;
  MEM[(limb *)&tmp2 + 16B] = _34;
  _35 = MEM[(limb *)&tmp2 + 32B];
  _36 = _35 * 8;
  MEM[(limb *)&tmp2 + 32B] = _36;
  _37 = MEM[(limb *)&tmp2 + 48B];
  _38 = _37 * 8;
  MEM[(limb *)&tmp2 + 48B] = _38;
  _39 = MEM[(limb *)&tmp2 + 64B];
  _40 = _39 * 8;
  MEM[(limb *)&tmp2 + 64B] = _40;
  _41 = MEM[(limb *)&tmp2 + 80B];
  _42 = _41 * 8;
  MEM[(limb *)&tmp2 + 80B] = _42;
  _43 = MEM[(limb *)&tmp2 + 96B];
  _44 = _43 * 8;
  MEM[(limb *)&tmp2 + 96B] = _44;
  _45 = MEM[(limb *)&tmp2 + 112B];
  _46 = _45 * 8;
  MEM[(limb *)&tmp2 + 112B] = _46;
  _226 = MEM[(limb *)&tmp];
  _227 = _226 + 0x3fffffffffffffff40;
  _228 = MEM[(limb *)&tmp + 16B];
  _229 = _228 + 0x400000010000000000;
  _230 = MEM[(limb *)&tmp + 32B];
  _231 = _230 + 0x400000000000000000;
  _232 = MEM[(limb *)&tmp + 48B];
  _233 = _232 + 0x3ffffffec000000040;
  _234 = MEM[(limb *)&tmp + 64B];
  _235 = _234 + 0x3fffffffffffffffc0;
  _236 = MEM[(limb *)&tmp + 80B];
  _237 = _236 + 0x3fffffffffffffffc0;
  _238 = MEM[(limb *)&tmp + 96B];
  _239 = _238 + 0x3fffffffffffffffc0;
  _240 = MEM[(limb *)&tmp + 112B];
  _241 = _240 + 0x3fffffffffffffffc0;
  _243 = _227 - _32;
  MEM[(limb *)&tmp] = _243;
  _245 = _229 - _34;
  MEM[(limb *)&tmp + 16B] = _245;
  _247 = _231 - _36;
  MEM[(limb *)&tmp + 32B] = _247;
  _249 = _233 - _38;
  MEM[(limb *)&tmp + 48B] = _249;
  _251 = _235 - _40;
  MEM[(limb *)&tmp + 64B] = _251;
  _253 = _237 - _42;
  MEM[(limb *)&tmp + 80B] = _253;
  _255 = _239 - _44;
  MEM[(limb *)&tmp + 96B] = _255;
  _257 = _241 - _46;
  MEM[(limb *)&tmp + 112B] = _257;
  _219 = _243 + 0x1fffffffffffffffdfffffffe00;
  *y_out_19(D) = _219;
  _221 = _245 + 0x200000000000000000000000000;
  MEM[(limb *)y_out_19(D) + 16B] = _221;
  _223 = _247 + 0x1fffffffffffffffe0000000200;
  MEM[(limb *)y_out_19(D) + 32B] = _223;
  _225 = _249 + 0x1fffffffffffffffe0000000200;
  MEM[(limb *)y_out_19(D) + 48B] = _225;
  felem_reduce_ (y_out_19(D), &tmp);
  tmp ={v} {CLOBBER};
  tmp2 ={v} {CLOBBER};
  delta ={v} {CLOBBER};
  gamma ={v} {CLOBBER};
  beta ={v} {CLOBBER};
  alpha ={v} {CLOBBER};
  ftmp ={v} {CLOBBER};
  ftmp2 ={v} {CLOBBER};
  small1 ={v} {CLOBBER};
  small2 ={v} {CLOBBER};
  return;

}



;; Function ec_GFp_nistp256_point_get_affine_coordinates.part.3 (ec_GFp_nistp256_point_get_affine_coordinates.part.3, funcdef_no=456, decl_uid=11351, cgraph_uid=425, symbol_order=578)

ec_GFp_nistp256_point_get_affine_coordinates.part.3 (const struct EC_POINT * point, struct BIGNUM * x, struct BIGNUM * y)
{
  unsigned long ivtmp.99;
  unsigned long ivtmp.97;
  unsigned long ivtmp.89;
  unsigned long ivtmp.87;
  const vector(2) long unsigned int vect__57.78;
  const vector(2) long unsigned int vect__57.77;
  const vector(2) long unsigned int vect__44.72;
  const vector(2) long unsigned int vect__44.71;
  u8 b_in[32];
  u8 b_out[32];
  u64 small2[4];
  u64 small1[4];
  u64 small2[4];
  u64 small1[4];
  u8 b_in[32];
  u8 b_out[32];
  u64 small2[4];
  u64 small1[4];
  limb z1[4];
  limb z2[4];
  limb x_in[4];
  limb y_in[4];
  u64 x_out[4];
  u64 y_out[4];
  limb tmp[8];
  u64 small[4];
  struct BIGNUM * _2;
  int _3;
  struct BIGNUM * _4;
  int _5;
  struct BIGNUM * _6;
  int _7;
  int _12;
  unsigned char _54;
  struct BIGNUM * _56;
  unsigned char _67;
  struct BIGNUM * _69;
  void * _77;
  void * _114;
  unsigned long _115;
  void * _123;
  void * _124;
  unsigned long _125;

  <bb 2> [local count: 1073741825]:
  _2 = point_1(D)->X;
  _3 = BN_to_felem (&x_in, _2);
  if (_3 == 0)
    goto <bb 3>; [51.12%]
  else
    goto <bb 4>; [48.88%]

  <bb 3> [local count: 948343008]:
  goto <bb 17>; [100.00%]

  <bb 4> [local count: 524845004]:
  _4 = point_1(D)->Y;
  _5 = BN_to_felem (&y_in, _4);
  if (_5 == 0)
    goto <bb 3>; [51.12%]
  else
    goto <bb 5>; [48.88%]

  <bb 5> [local count: 256544238]:
  _6 = point_1(D)->Z;
  _7 = BN_to_felem (&z1, _6);
  if (_7 == 0)
    goto <bb 3>; [51.12%]
  else
    goto <bb 6>; [48.88%]

  <bb 6> [local count: 125398823]:
  felem_inv (&z2, &z1);
  felem_shrink (&small, &z2);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&z1, &tmp);
  felem_shrink (&small1, &x_in);
  felem_shrink (&small2, &z1);
  smallfelem_mul (&tmp, &small1, &small2);
  small1 ={v} {CLOBBER};
  small2 ={v} {CLOBBER};
  felem_reduce (&x_in, &tmp);
  felem_contract (&x_out, &x_in);
  if (x_8(D) != 0B)
    goto <bb 7>; [70.00%]
  else
    goto <bb 11>; [30.00%]

  <bb 7> [local count: 87779176]:
  vect__44.71_110 = MEM[(const u64 *)&x_out];
  vect__44.72_70 = MEM[(const u64 *)&x_out + 16B];
  MEM[(u64 *)&b_in] = vect__44.71_110;
  MEM[(u64 *)&b_in + 16B] = vect__44.72_70;
  ivtmp.97_13 = (unsigned long) &MEM[(void *)&b_in + 31B];
  ivtmp.99_122 = (unsigned long) &b_out;
  _125 = (unsigned long) &b_in;

  <bb 8> [local count: 710213334]:
  # ivtmp.97_113 = PHI <ivtmp.97_13(7), ivtmp.97_109(8)>
  # ivtmp.99_104 = PHI <ivtmp.99_122(7), ivtmp.99_85(8)>
  _123 = (void *) ivtmp.97_113;
  _54 = MEM[base: _123, offset: 0B];
  _124 = (void *) ivtmp.99_104;
  MEM[base: _124, offset: 0B] = _54;
  ivtmp.97_109 = ivtmp.97_113 + 18446744073709551615;
  ivtmp.99_85 = ivtmp.99_104 + 1;
  if (ivtmp.97_113 != _125)
    goto <bb 8>; [87.64%]
  else
    goto <bb 9>; [12.36%]

  <bb 9> [local count: 87779176]:
  _56 = BN_bin2bn (&b_out, 32, x_8(D));
  b_in ={v} {CLOBBER};
  b_out ={v} {CLOBBER};
  if (_56 == 0B)
    goto <bb 10>; [9.81%]
  else
    goto <bb 11>; [90.19%]

  <bb 10> [local count: 8611137]:
  ERR_put_error (16, 232, 3, "ecp_nistp256.c", 1968);
  goto <bb 17>; [100.00%]

  <bb 11> [local count: 116787686]:
  felem_shrink (&small1, &z1);
  felem_shrink (&small2, &z2);
  smallfelem_mul (&tmp, &small1, &small2);
  small1 ={v} {CLOBBER};
  small2 ={v} {CLOBBER};
  felem_reduce (&z1, &tmp);
  felem_shrink (&small1, &y_in);
  felem_shrink (&small2, &z1);
  smallfelem_mul (&tmp, &small1, &small2);
  small1 ={v} {CLOBBER};
  small2 ={v} {CLOBBER};
  felem_reduce (&y_in, &tmp);
  felem_contract (&y_out, &y_in);
  if (y_10(D) != 0B)
    goto <bb 13>; [53.47%]
  else
    goto <bb 12>; [46.53%]

  <bb 12> [local count: 110661696]:
  goto <bb 17>; [100.00%]

  <bb 13> [local count: 62446376]:
  vect__57.77_32 = MEM[(const u64 *)&y_out];
  vect__57.78_28 = MEM[(const u64 *)&y_out + 16B];
  MEM[(u64 *)&b_in] = vect__57.77_32;
  MEM[(u64 *)&b_in + 16B] = vect__57.78_28;
  ivtmp.87_97 = (unsigned long) &MEM[(void *)&b_in + 31B];
  ivtmp.89_78 = (unsigned long) &b_out;
  _115 = (unsigned long) &b_in;

  <bb 14> [local count: 505247946]:
  # ivtmp.87_99 = PHI <ivtmp.87_97(13), ivtmp.87_98(14)>
  # ivtmp.89_80 = PHI <ivtmp.89_78(13), ivtmp.89_79(14)>
  _77 = (void *) ivtmp.87_99;
  _67 = MEM[base: _77, offset: 0B];
  _114 = (void *) ivtmp.89_80;
  MEM[base: _114, offset: 0B] = _67;
  ivtmp.87_98 = ivtmp.87_99 + 18446744073709551615;
  ivtmp.89_79 = ivtmp.89_80 + 1;
  if (ivtmp.87_99 != _115)
    goto <bb 14>; [87.64%]
  else
    goto <bb 15>; [12.36%]

  <bb 15> [local count: 62446375]:
  _69 = BN_bin2bn (&b_out, 32, y_10(D));
  b_in ={v} {CLOBBER};
  b_out ={v} {CLOBBER};
  if (_69 == 0B)
    goto <bb 16>; [9.81%]
  else
    goto <bb 12>; [90.19%]

  <bb 16> [local count: 6125989]:
  ERR_put_error (16, 232, 3, "ecp_nistp256.c", 1980);

  <bb 17> [local count: 1073741823]:
  # _12 = PHI <0(3), 0(10), 0(16), 1(12)>
  z1 ={v} {CLOBBER};
  z2 ={v} {CLOBBER};
  x_in ={v} {CLOBBER};
  y_in ={v} {CLOBBER};
  x_out ={v} {CLOBBER};
  y_out ={v} {CLOBBER};
  tmp ={v} {CLOBBER};
  return _12;

}



;; Function ec_GFp_nistp256_point_get_affine_coordinates (ec_GFp_nistp256_point_get_affine_coordinates, funcdef_no=448, decl_uid=10089, cgraph_uid=448, symbol_order=456)

ec_GFp_nistp256_point_get_affine_coordinates (const struct EC_GROUP * group, const struct EC_POINT * point, struct BIGNUM * x, struct BIGNUM * y, struct BN_CTX * ctx)
{
  int _1;
  int _2;
  int _10;

  <bb 2> [local count: 1073741825]:
  _1 = EC_POINT_is_at_infinity (group_5(D), point_6(D));
  if (_1 != 0)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072220]:
  ERR_put_error (16, 232, 106, "ecp_nistp256.c", 1953);
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 708669601]:
  _10 = ec_GFp_nistp256_point_get_affine_coordinates.part.3 (point_6(D), x_9(D), y_11(D)); [tail call]

  <bb 5> [local count: 1073741825]:
  # _2 = PHI <0(3), _10(4)>
  return _2;

}



;; Function point_add (point_add, funcdef_no=437, decl_uid=10647, cgraph_uid=437, symbol_order=444)

point_add (limb * x3, limb * y3, limb * z3, const limb * x1, const limb * y1, const limb * z1, const int mixed, const u64 * x2, const u64 * y2, const u64 * z2)
{
  u64 small2[4];
  u64 small1[4];
  u64 small2[4];
  u64 small1[4];
  u64 small2[4];
  u64 small1[4];
  u64 small2[4];
  u64 small1[4];
  u64 small[4];
  u64 small2[4];
  const u64 mask64;
  const limb tmp;
  const limb tmp;
  const limb tmp;
  u64 small2[4];
  u64 small2[4];
  u64 small[4];
  limb z2_is_zero;
  limb z1_is_zero;
  limb y_equal;
  limb x_equal;
  u64 small5[4];
  u64 small4[4];
  u64 small3[4];
  u64 small2[4];
  u64 small1[4];
  limb tmp2[8];
  limb tmp[8];
  limb z_out[4];
  limb y_out[4];
  limb x_out[4];
  limb ftmp6[4];
  limb ftmp5[4];
  limb ftmp4[4];
  limb ftmp3[4];
  limb ftmp2[4];
  limb ftmp[4];
  _Bool _1;
  _Bool _2;
  _Bool _3;
  __int128 unsigned _4;
  __int128 unsigned _10;
  __int128 unsigned _13;
  __int128 unsigned _36;
  __int128 unsigned _44;
  __int128 unsigned _92;
  __int128 unsigned _93;
  __int128 unsigned _94;
  __int128 unsigned _95;
  __int128 unsigned _96;
  __int128 unsigned _97;
  __int128 unsigned _98;
  __int128 unsigned _99;
  __int128 unsigned _100;
  __int128 unsigned _101;
  __int128 unsigned _102;
  __int128 unsigned _103;
  __int128 unsigned _104;
  __int128 unsigned _105;
  __int128 unsigned _106;
  __int128 unsigned _107;
  __int128 unsigned _108;
  __int128 unsigned _109;
  __int128 unsigned _110;
  __int128 unsigned _111;
  long unsigned int _112;
  __int128 unsigned _113;
  __int128 unsigned _114;
  long unsigned int _115;
  __int128 unsigned _116;
  __int128 unsigned _117;
  long unsigned int _118;
  __int128 unsigned _119;
  __int128 unsigned _120;
  long unsigned int _121;
  __int128 unsigned _122;
  __int128 unsigned _123;
  __int128 unsigned _124;
  __int128 unsigned _125;
  __int128 unsigned _126;
  __int128 unsigned _127;
  __int128 unsigned _128;
  __int128 unsigned _129;
  __int128 unsigned _130;
  __int128 unsigned _131;
  __int128 unsigned _132;
  __int128 unsigned _133;
  __int128 unsigned _134;
  __int128 unsigned _135;
  __int128 unsigned _136;
  __int128 unsigned _137;
  __int128 unsigned _138;
  __int128 unsigned _139;
  __int128 unsigned _140;
  __int128 unsigned _141;
  __int128 unsigned _142;
  __int128 unsigned _143;
  __int128 unsigned _144;
  __int128 unsigned _145;
  __int128 unsigned _146;
  __int128 unsigned _147;
  __int128 unsigned _148;
  __int128 unsigned _149;
  __int128 unsigned _150;
  __int128 unsigned _151;
  __int128 unsigned _152;
  __int128 unsigned _153;
  __int128 unsigned _154;
  __int128 unsigned _155;
  __int128 unsigned _156;
  __int128 unsigned _157;
  __int128 unsigned _158;
  __int128 unsigned _159;
  __int128 unsigned _160;
  __int128 unsigned _161;
  __int128 unsigned _162;
  __int128 unsigned _163;
  __int128 unsigned _164;
  __int128 unsigned _165;
  __int128 unsigned _166;
  __int128 unsigned _167;
  __int128 unsigned _168;
  __int128 unsigned _169;
  __int128 unsigned _170;
  __int128 unsigned _171;
  __int128 unsigned _172;
  __int128 unsigned _173;
  __int128 unsigned _174;
  __int128 unsigned _175;
  __int128 unsigned _176;
  __int128 unsigned _177;
  __int128 unsigned _178;
  __int128 unsigned _179;
  __int128 unsigned _196;
  __int128 unsigned _199;
  __int128 unsigned _201;
  long unsigned int _207;
  long unsigned int _208;
  __int128 unsigned _209;
  __int128 unsigned _212;
  __int128 unsigned _213;
  __int128 unsigned _214;
  __int128 unsigned _215;
  __int128 unsigned _217;
  __int128 unsigned _221;
  __int128 unsigned _224;
  __int128 unsigned _226;
  __int128 unsigned _228;
  long unsigned int _232;
  long unsigned int _233;
  __int128 unsigned _234;
  __int128 unsigned _237;
  __int128 unsigned _239;
  __int128 unsigned _240;
  __int128 unsigned _246;
  __int128 unsigned _249;
  __int128 unsigned _251;
  __int128 unsigned _254;
  long unsigned int _258;
  long unsigned int _259;
  __int128 unsigned _260;
  __int128 unsigned _263;
  __int128 unsigned _264;
  __int128 unsigned _265;
  __int128 unsigned _266;
  __int128 unsigned _268;
  __int128 unsigned _269;
  __int128 unsigned _270;
  __int128 unsigned _271;
  __int128 unsigned _272;
  __int128 unsigned _273;
  __int128 unsigned _274;
  __int128 unsigned _275;
  __int128 unsigned _276;
  __int128 unsigned _277;
  __int128 unsigned _278;
  __int128 unsigned _279;
  __int128 unsigned _280;
  __int128 unsigned _281;
  __int128 unsigned _282;
  __int128 unsigned _283;
  long unsigned int _284;
  long unsigned int _285;
  __int128 unsigned _288;
  __int128 unsigned _289;
  __int128 unsigned _290;
  __int128 unsigned _291;
  __int128 unsigned _292;
  __int128 unsigned _293;
  __int128 unsigned _294;
  __int128 unsigned _295;
  __int128 unsigned _296;
  __int128 unsigned _297;
  __int128 unsigned _298;
  __int128 unsigned _299;
  __int128 unsigned _300;
  __int128 unsigned _301;
  __int128 unsigned _302;
  __int128 unsigned _303;
  __int128 unsigned _304;
  __int128 unsigned _305;
  __int128 unsigned _306;
  __int128 unsigned _307;
  __int128 unsigned _308;
  __int128 unsigned _309;
  __int128 unsigned _310;
  __int128 unsigned _311;
  __int128 unsigned _312;
  __int128 unsigned _313;
  __int128 unsigned _314;
  __int128 unsigned _315;
  __int128 unsigned _316;
  __int128 unsigned _317;
  __int128 unsigned _318;
  __int128 unsigned _319;
  __int128 unsigned _320;
  __int128 unsigned _321;
  __int128 unsigned _322;
  __int128 unsigned _323;
  __int128 unsigned _324;
  __int128 unsigned _325;
  __int128 unsigned _326;
  __int128 unsigned _327;
  __int128 unsigned _328;
  __int128 unsigned _330;
  __int128 unsigned _331;
  __int128 unsigned _333;
  __int128 unsigned _424;
  __int128 unsigned _425;
  __int128 unsigned _426;
  __int128 unsigned _428;
  __int128 unsigned _430;
  __int128 unsigned _431;
  __int128 unsigned _432;
  __int128 unsigned _433;
  __int128 unsigned _434;
  __int128 unsigned _435;
  __int128 unsigned _436;
  __int128 unsigned _437;
  __int128 unsigned _438;
  __int128 unsigned _439;
  __int128 unsigned _440;
  __int128 unsigned _441;
  __int128 unsigned _442;
  __int128 unsigned _443;
  __int128 unsigned _444;
  __int128 unsigned _445;
  __int128 unsigned _446;
  __int128 unsigned _448;
  __int128 unsigned _450;
  __int128 unsigned _451;
  __int128 unsigned _452;
  __int128 unsigned _453;
  __int128 unsigned _454;
  __int128 unsigned _455;
  __int128 unsigned _456;
  __int128 unsigned _457;
  __int128 unsigned _458;
  __int128 unsigned _460;
  __int128 unsigned _461;
  __int128 unsigned _462;
  __int128 unsigned _484;
  long unsigned int _485;
  long unsigned int _486;
  __int128 unsigned _509;
  __int128 unsigned _511;
  __int128 unsigned _512;
  __int128 unsigned _515;
  __int128 unsigned _537;
  __int128 unsigned _539;
  __int128 unsigned _542;
  __int128 unsigned _552;
  __int128 unsigned _554;
  __int128 unsigned _557;
  __int128 unsigned _566;
  __int128 unsigned _572;
  __int128 unsigned _580;
  __int128 unsigned _581;
  __int128 unsigned _594;
  __int128 unsigned _597;
  __int128 unsigned _598;
  long unsigned int _604;
  long unsigned int _605;
  __int128 unsigned _607;
  __int128 unsigned _612;
  __int128 unsigned _614;
  __int128 unsigned _624;
  __int128 unsigned _627;
  __int128 unsigned _629;
  long unsigned int _639;
  long unsigned int _640;
  __int128 unsigned _641;
  __int128 unsigned _644;
  __int128 unsigned _645;
  __int128 unsigned _646;
  long unsigned int _656;
  long unsigned int _657;
  __int128 unsigned _658;
  __int128 unsigned _661;
  __int128 unsigned _662;
  __int128 unsigned _663;
  long unsigned int _673;
  long unsigned int _674;
  __int128 unsigned _675;
  __int128 unsigned _678;
  __int128 unsigned _679;
  __int128 unsigned _680;
  __int128 unsigned _690;
  __int128 unsigned _693;
  __int128 unsigned _695;
  __int128 unsigned _705;
  __int128 unsigned _708;
  __int128 unsigned _710;
  __int128 unsigned _720;
  __int128 unsigned _723;
  __int128 unsigned _725;
  long unsigned int _735;
  long unsigned int _736;
  __int128 unsigned _737;
  __int128 unsigned _740;
  __int128 unsigned _741;
  __int128 unsigned _742;
  long unsigned int _752;
  long unsigned int _753;
  __int128 unsigned _754;
  __int128 unsigned _757;
  __int128 unsigned _758;
  __int128 unsigned _759;
  long unsigned int _769;
  long unsigned int _770;
  __int128 unsigned _771;
  __int128 unsigned _774;
  __int128 unsigned _775;
  __int128 unsigned _776;

  <bb 2> [local count: 248438631]:
  felem_shrink (&small3, z1_8(D));
  z1_is_zero_11 = smallfelem_is_zero (&small3);
  z2_is_zero_14 = smallfelem_is_zero (z2_12(D));
  smallfelem_square (&tmp, &small3);
  felem_reduce (&ftmp, &tmp);
  felem_shrink (&small1, &ftmp);
  if (mixed_18(D) == 0)
    goto <bb 3>; [33.00%]
  else
    goto <bb 4>; [67.00%]

  <bb 3> [local count: 81984748]:
  smallfelem_square (&tmp, z2_12(D));
  felem_reduce (&ftmp2, &tmp);
  felem_shrink (&small2, &ftmp2);
  felem_shrink (&small5, x1_22(D));
  smallfelem_mul (&tmp, &small5, &small2);
  felem_reduce (&ftmp3, &tmp);
  _124 = *z1_8(D);
  _125 = MEM[(const limb *)z1_8(D) + 16B];
  _126 = MEM[(const limb *)z1_8(D) + 32B];
  _127 = MEM[(const limb *)z1_8(D) + 48B];
  _112 = *z2_12(D);
  _113 = (__int128 unsigned) _112;
  _114 = _113 + _124;
  MEM[(limb *)&ftmp5] = _114;
  _115 = MEM[(const u64 *)z2_12(D) + 8B];
  _116 = (__int128 unsigned) _115;
  _117 = _116 + _125;
  MEM[(limb *)&ftmp5 + 16B] = _117;
  _118 = MEM[(const u64 *)z2_12(D) + 16B];
  _119 = (__int128 unsigned) _118;
  _120 = _119 + _126;
  MEM[(limb *)&ftmp5 + 32B] = _120;
  _121 = MEM[(const u64 *)z2_12(D) + 24B];
  _122 = (__int128 unsigned) _121;
  _123 = _122 + _127;
  MEM[(limb *)&ftmp5 + 48B] = _123;
  felem_shrink (&small, &ftmp5);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp5, &tmp);
  _100 = MEM[(limb *)&ftmp2];
  _101 = MEM[(const limb *)&ftmp];
  _102 = _100 + _101;
  MEM[(limb *)&ftmp2] = _102;
  _103 = MEM[(limb *)&ftmp2 + 16B];
  _104 = MEM[(const limb *)&ftmp + 16B];
  _105 = _103 + _104;
  MEM[(limb *)&ftmp2 + 16B] = _105;
  _106 = MEM[(limb *)&ftmp2 + 32B];
  _107 = MEM[(const limb *)&ftmp + 32B];
  _108 = _106 + _107;
  MEM[(limb *)&ftmp2 + 32B] = _108;
  _109 = MEM[(limb *)&ftmp2 + 48B];
  _110 = MEM[(const limb *)&ftmp + 48B];
  _111 = _109 + _110;
  MEM[(limb *)&ftmp2 + 48B] = _111;
  _44 = MEM[(limb *)&ftmp5];
  _36 = _44 + 0x1fffffffffffffffdfffffffe00;
  _13 = MEM[(limb *)&ftmp5 + 16B];
  _10 = _13 + 0x200000000000000000000000000;
  _92 = MEM[(limb *)&ftmp5 + 32B];
  _93 = _92 + 0x1fffffffffffffffe0000000200;
  _94 = MEM[(limb *)&ftmp5 + 48B];
  _95 = _94 + 0x1fffffffffffffffe0000000200;
  _96 = _36 - _102;
  MEM[(limb *)&ftmp5] = _96;
  _97 = _10 - _105;
  MEM[(limb *)&ftmp5 + 16B] = _97;
  _98 = _93 - _108;
  MEM[(limb *)&ftmp5 + 32B] = _98;
  _99 = _95 - _111;
  MEM[(limb *)&ftmp5 + 48B] = _99;
  smallfelem_mul (&tmp, &small2, z2_12(D));
  felem_reduce (&ftmp2, &tmp);
  felem_shrink (&small1, y1_29(D));
  felem_shrink (&small2, &ftmp2);
  smallfelem_mul (&tmp, &small1, &small2);
  small1 ={v} {CLOBBER};
  small2 ={v} {CLOBBER};
  felem_reduce (&ftmp6, &tmp);
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 166453883]:
  _140 = *x1_22(D);
  MEM[(limb *)&ftmp3] = _140;
  _141 = MEM[(const limb *)x1_22(D) + 16B];
  MEM[(limb *)&ftmp3 + 16B] = _141;
  _142 = MEM[(const limb *)x1_22(D) + 32B];
  MEM[(limb *)&ftmp3 + 32B] = _142;
  _143 = MEM[(const limb *)x1_22(D) + 48B];
  MEM[(limb *)&ftmp3 + 48B] = _143;
  _136 = *z1_8(D);
  _137 = MEM[(const limb *)z1_8(D) + 16B];
  _138 = MEM[(const limb *)z1_8(D) + 32B];
  _139 = MEM[(const limb *)z1_8(D) + 48B];
  _132 = _136 * 2;
  MEM[(limb *)&ftmp5] = _132;
  _133 = _137 * 2;
  MEM[(limb *)&ftmp5 + 16B] = _133;
  _134 = _138 * 2;
  MEM[(limb *)&ftmp5 + 32B] = _134;
  _135 = _139 * 2;
  MEM[(limb *)&ftmp5 + 48B] = _135;
  _128 = *y1_29(D);
  MEM[(limb *)&ftmp6] = _128;
  _129 = MEM[(const limb *)y1_29(D) + 16B];
  MEM[(limb *)&ftmp6 + 16B] = _129;
  _130 = MEM[(const limb *)y1_29(D) + 32B];
  MEM[(limb *)&ftmp6 + 32B] = _130;
  _131 = MEM[(const limb *)y1_29(D) + 48B];
  MEM[(limb *)&ftmp6 + 48B] = _131;

  <bb 5> [local count: 248438631]:
  smallfelem_mul (&tmp, x2_32(D), &small1);
  felem_reduce (&ftmp4, &tmp);
  _164 = MEM[(limb *)&ftmp4];
  _165 = _164 + 0x7fffffffffffffff7fffffff800;
  _166 = MEM[(limb *)&ftmp4 + 16B];
  _167 = _166 + 0x800000000000000000000000000;
  _168 = MEM[(limb *)&ftmp4 + 32B];
  _169 = _168 + 0x7fffffffffffffff80000000800;
  _170 = MEM[(limb *)&ftmp4 + 48B];
  _171 = _170 + 0x7fffffffffffffff80000000800;
  _172 = MEM[(const limb *)&ftmp3];
  _173 = _165 - _172;
  MEM[(limb *)&ftmp4] = _173;
  _174 = MEM[(const limb *)&ftmp3 + 16B];
  _175 = _167 - _174;
  MEM[(limb *)&ftmp4 + 16B] = _175;
  _176 = MEM[(const limb *)&ftmp3 + 32B];
  _177 = _169 - _176;
  MEM[(limb *)&ftmp4 + 32B] = _177;
  _178 = MEM[(const limb *)&ftmp3 + 48B];
  _179 = _171 - _178;
  MEM[(limb *)&ftmp4 + 48B] = _179;
  felem_shrink (&small4, &ftmp4);
  x_equal_37 = smallfelem_is_zero (&small4);
  felem_shrink (&small2, &ftmp5);
  smallfelem_mul (&tmp, &small4, &small2);
  small2 ={v} {CLOBBER};
  felem_reduce (&z_out, &tmp);
  smallfelem_mul (&tmp, &small1, &small3);
  felem_reduce (&ftmp, &tmp);
  felem_shrink (&small2, &ftmp);
  smallfelem_mul (&tmp, y2_41(D), &small2);
  small2 ={v} {CLOBBER};
  felem_reduce (&ftmp5, &tmp);
  _148 = MEM[(limb *)&ftmp5];
  _149 = _148 + 0x7fffffffffffffff7fffffff800;
  _150 = MEM[(limb *)&ftmp5 + 16B];
  _151 = _150 + 0x800000000000000000000000000;
  _152 = MEM[(limb *)&ftmp5 + 32B];
  _153 = _152 + 0x7fffffffffffffff80000000800;
  _154 = MEM[(limb *)&ftmp5 + 48B];
  _155 = _154 + 0x7fffffffffffffff80000000800;
  _156 = MEM[(const limb *)&ftmp6];
  _157 = _149 - _156;
  _158 = MEM[(const limb *)&ftmp6 + 16B];
  _159 = _151 - _158;
  _160 = MEM[(const limb *)&ftmp6 + 32B];
  _161 = _153 - _160;
  _162 = MEM[(const limb *)&ftmp6 + 48B];
  _163 = _155 - _162;
  _144 = _157 * 2;
  MEM[(limb *)&ftmp5] = _144;
  _145 = _159 * 2;
  MEM[(limb *)&ftmp5 + 16B] = _145;
  _146 = _161 * 2;
  MEM[(limb *)&ftmp5 + 32B] = _146;
  _147 = _163 * 2;
  MEM[(limb *)&ftmp5 + 48B] = _147;
  felem_shrink (&small1, &ftmp5);
  y_equal_45 = smallfelem_is_zero (&small1);
  _1 = x_equal_37 != 0;
  _2 = y_equal_45 != 0;
  _3 = _1 & _2;
  if (_3 != 0)
    goto <bb 6>; [67.00%]
  else
    goto <bb 8>; [33.00%]

  <bb 6> [local count: 166453883]:
  _4 = z1_is_zero_11 | z2_is_zero_14;
  if (_4 == 0)
    goto <bb 7>; [20.24%]
  else
    goto <bb 8>; [79.76%]

  <bb 7> [local count: 33690266]:
  point_double (x3_46(D), y3_47(D), z3_48(D), x1_22(D), y1_29(D), z1_8(D));
  ftmp ={v} {CLOBBER};
  ftmp2 ={v} {CLOBBER};
  ftmp3 ={v} {CLOBBER};
  ftmp4 ={v} {CLOBBER};
  ftmp5 ={v} {CLOBBER};
  ftmp6 ={v} {CLOBBER};
  x_out ={v} {CLOBBER};
  y_out ={v} {CLOBBER};
  z_out ={v} {CLOBBER};
  tmp ={v} {CLOBBER};
  tmp2 ={v} {CLOBBER};
  small1 ={v} {CLOBBER};
  small2 ={v} {CLOBBER};
  small3 ={v} {CLOBBER};
  small4 ={v} {CLOBBER};
  small5 ={v} {CLOBBER};
  goto <bb 9>; [100.00%]

  <bb 8> [local count: 214748371]:
  _324 = MEM[(const limb *)&ftmp4];
  _325 = MEM[(const limb *)&ftmp4 + 16B];
  _326 = MEM[(const limb *)&ftmp4 + 32B];
  _327 = MEM[(const limb *)&ftmp4 + 48B];
  _320 = _324 * 2;
  MEM[(limb *)&ftmp] = _320;
  _321 = _325 * 2;
  MEM[(limb *)&ftmp + 16B] = _321;
  _322 = _326 * 2;
  MEM[(limb *)&ftmp + 32B] = _322;
  _323 = _327 * 2;
  MEM[(limb *)&ftmp + 48B] = _323;
  felem_shrink (&small, &ftmp);
  smallfelem_square (&tmp, &small);
  small ={v} {CLOBBER};
  felem_reduce (&ftmp, &tmp);
  felem_shrink (&small1, &ftmp4);
  felem_shrink (&small2, &ftmp);
  smallfelem_mul (&tmp, &small1, &small2);
  small1 ={v} {CLOBBER};
  small2 ={v} {CLOBBER};
  felem_reduce (&ftmp2, &tmp);
  felem_shrink (&small1, &ftmp3);
  felem_shrink (&small2, &ftmp);
  smallfelem_mul (&tmp, &small1, &small2);
  small1 ={v} {CLOBBER};
  small2 ={v} {CLOBBER};
  felem_reduce (&ftmp4, &tmp);
  smallfelem_square (&tmp, &small1);
  felem_reduce (&x_out, &tmp);
  _316 = MEM[(const limb *)&ftmp4];
  _317 = MEM[(const limb *)&ftmp4 + 16B];
  _318 = MEM[(const limb *)&ftmp4 + 32B];
  _319 = MEM[(const limb *)&ftmp4 + 48B];
  _312 = _316 * 2;
  _313 = _317 * 2;
  _314 = _318 * 2;
  _315 = _319 * 2;
  _304 = MEM[(const limb *)&ftmp2];
  _305 = _304 + _312;
  MEM[(limb *)&ftmp4] = _305;
  _306 = MEM[(const limb *)&ftmp2 + 16B];
  _307 = _306 + _313;
  MEM[(limb *)&ftmp4 + 16B] = _307;
  _308 = MEM[(const limb *)&ftmp2 + 32B];
  _309 = _308 + _314;
  MEM[(limb *)&ftmp4 + 32B] = _309;
  _310 = MEM[(const limb *)&ftmp2 + 48B];
  _311 = _310 + _315;
  MEM[(limb *)&ftmp4 + 48B] = _311;
  _292 = MEM[(limb *)&x_out];
  _293 = _292 + 0x1fffffffffffffffdfffffffe00;
  _294 = MEM[(limb *)&x_out + 16B];
  _295 = _294 + 0x200000000000000000000000000;
  _296 = MEM[(limb *)&x_out + 32B];
  _297 = _296 + 0x1fffffffffffffffe0000000200;
  _298 = MEM[(limb *)&x_out + 48B];
  _299 = _298 + 0x1fffffffffffffffe0000000200;
  _300 = _293 - _305;
  MEM[(limb *)&x_out] = _300;
  _301 = _295 - _307;
  MEM[(limb *)&x_out + 16B] = _301;
  _302 = _297 - _309;
  MEM[(limb *)&x_out + 32B] = _302;
  _303 = _299 - _311;
  MEM[(limb *)&x_out + 48B] = _303;
  _457 = _316 + 0x7fffffffffffffff7fffffff800;
  _425 = _305 + _457;
  _288 = _425 - _293;
  MEM[(limb *)&ftmp3] = _288;
  _328 = _317 + 0x800000000000000000000000000;
  _461 = _307 + _328;
  _289 = _461 - _295;
  MEM[(limb *)&ftmp3 + 16B] = _289;
  _331 = _318 + 0x7fffffffffffffff80000000800;
  _330 = _309 + _331;
  _290 = _330 - _297;
  MEM[(limb *)&ftmp3 + 32B] = _290;
  _511 = _319 + 0x7fffffffffffffff80000000800;
  _333 = _311 + _511;
  _291 = _333 - _299;
  MEM[(limb *)&ftmp3 + 48B] = _291;
  felem_shrink (&small2, &ftmp3);
  smallfelem_mul (&tmp, &small1, &small2);
  small2 ={v} {CLOBBER};
  felem_shrink (&small1, &ftmp6);
  felem_shrink (&small2, &ftmp2);
  smallfelem_mul (&tmp2, &small1, &small2);
  small1 ={v} {CLOBBER};
  small2 ={v} {CLOBBER};
  _268 = MEM[(limb *)&tmp2];
  _269 = _268 * 2;
  MEM[(limb *)&tmp2] = _269;
  _270 = MEM[(limb *)&tmp2 + 16B];
  _271 = _270 * 2;
  MEM[(limb *)&tmp2 + 16B] = _271;
  _272 = MEM[(limb *)&tmp2 + 32B];
  _273 = _272 * 2;
  MEM[(limb *)&tmp2 + 32B] = _273;
  _274 = MEM[(limb *)&tmp2 + 48B];
  _275 = _274 * 2;
  MEM[(limb *)&tmp2 + 48B] = _275;
  _276 = MEM[(limb *)&tmp2 + 64B];
  _277 = _276 * 2;
  MEM[(limb *)&tmp2 + 64B] = _277;
  _278 = MEM[(limb *)&tmp2 + 80B];
  _279 = _278 * 2;
  MEM[(limb *)&tmp2 + 80B] = _279;
  _280 = MEM[(limb *)&tmp2 + 96B];
  _281 = _280 * 2;
  MEM[(limb *)&tmp2 + 96B] = _281;
  _282 = MEM[(limb *)&tmp2 + 112B];
  _283 = _282 * 2;
  MEM[(limb *)&tmp2 + 112B] = _283;
  _431 = MEM[(limb *)&tmp];
  _432 = _431 + 0x3fffffffffffffff40;
  _433 = MEM[(limb *)&tmp + 16B];
  _434 = _433 + 0x400000010000000000;
  _435 = MEM[(limb *)&tmp + 32B];
  _436 = _435 + 0x400000000000000000;
  _437 = MEM[(limb *)&tmp + 48B];
  _438 = _437 + 0x3ffffffec000000040;
  _439 = MEM[(limb *)&tmp + 64B];
  _440 = _439 + 0x3fffffffffffffffc0;
  _441 = MEM[(limb *)&tmp + 80B];
  _442 = _441 + 0x3fffffffffffffffc0;
  _443 = MEM[(limb *)&tmp + 96B];
  _444 = _443 + 0x3fffffffffffffffc0;
  _445 = MEM[(limb *)&tmp + 112B];
  _446 = _445 + 0x3fffffffffffffffc0;
  _448 = _432 - _269;
  MEM[(limb *)&tmp] = _448;
  _450 = _434 - _271;
  MEM[(limb *)&tmp + 16B] = _450;
  _452 = _436 - _273;
  MEM[(limb *)&tmp + 32B] = _452;
  _454 = _438 - _275;
  MEM[(limb *)&tmp + 48B] = _454;
  _456 = _440 - _277;
  MEM[(limb *)&tmp + 64B] = _456;
  _458 = _442 - _279;
  MEM[(limb *)&tmp + 80B] = _458;
  _460 = _444 - _281;
  MEM[(limb *)&tmp + 96B] = _460;
  _462 = _446 - _283;
  MEM[(limb *)&tmp + 112B] = _462;
  _424 = _448 + 0x1fffffffffffffffdfffffffe00;
  MEM[(limb *)&y_out] = _424;
  _426 = _450 + 0x200000000000000000000000000;
  MEM[(limb *)&y_out + 16B] = _426;
  _428 = _452 + 0x1fffffffffffffffe0000000200;
  MEM[(limb *)&y_out + 32B] = _428;
  _430 = _454 + 0x1fffffffffffffffe0000000200;
  MEM[(limb *)&y_out + 48B] = _430;
  felem_reduce_ (&y_out, &tmp);
  mask64_253 = (const u64) z1_is_zero_11;
  _566 = ~z1_is_zero_11;
  _735 = *x2_32(D);
  _736 = mask64_253 & _735;
  _737 = (__int128 unsigned) _736;
  _740 = MEM[(limb *)&x_out];
  _741 = _566 & _740;
  _742 = _737 | _741;
  _752 = MEM[(const u64 *)x2_32(D) + 8B];
  _753 = mask64_253 & _752;
  _754 = (__int128 unsigned) _753;
  _757 = MEM[(limb *)&x_out + 16B];
  _758 = _566 & _757;
  _759 = _754 | _758;
  MEM[(limb *)&x_out + 16B] = _759;
  _769 = MEM[(const u64 *)x2_32(D) + 16B];
  _770 = mask64_253 & _769;
  _771 = (__int128 unsigned) _770;
  _774 = MEM[(limb *)&x_out + 32B];
  _775 = _566 & _774;
  _776 = _771 | _775;
  MEM[(limb *)&x_out + 32B] = _776;
  _258 = MEM[(const u64 *)x2_32(D) + 24B];
  _259 = mask64_253 & _258;
  _260 = (__int128 unsigned) _259;
  _263 = MEM[(limb *)&x_out + 48B];
  _265 = _263 & _566;
  _266 = _260 | _265;
  MEM[(limb *)&x_out + 48B] = _266;
  _690 = *x1_22(D);
  _693 = _690 ^ _742;
  tmp_694 = z2_is_zero_14 & _693;
  _695 = tmp_694 ^ _742;
  MEM[(limb *)&x_out] = _695;
  _705 = MEM[(const limb *)x1_22(D) + 16B];
  _708 = _705 ^ _759;
  tmp_709 = z2_is_zero_14 & _708;
  _710 = tmp_709 ^ _759;
  MEM[(limb *)&x_out + 16B] = _710;
  _720 = MEM[(const limb *)x1_22(D) + 32B];
  _723 = _720 ^ _776;
  tmp_724 = z2_is_zero_14 & _723;
  _725 = tmp_724 ^ _776;
  MEM[(limb *)&x_out + 32B] = _725;
  _246 = MEM[(const limb *)x1_22(D) + 48B];
  _249 = _246 ^ _266;
  tmp_250 = z2_is_zero_14 & _249;
  _251 = tmp_250 ^ _266;
  MEM[(limb *)&x_out + 48B] = _251;
  _639 = *y2_41(D);
  _640 = mask64_253 & _639;
  _641 = (__int128 unsigned) _640;
  _644 = MEM[(limb *)&y_out];
  _645 = _566 & _644;
  _646 = _641 | _645;
  _656 = MEM[(const u64 *)y2_41(D) + 8B];
  _657 = mask64_253 & _656;
  _658 = (__int128 unsigned) _657;
  _661 = MEM[(limb *)&y_out + 16B];
  _662 = _566 & _661;
  _663 = _658 | _662;
  MEM[(limb *)&y_out + 16B] = _663;
  _673 = MEM[(const u64 *)y2_41(D) + 16B];
  _674 = mask64_253 & _673;
  _675 = (__int128 unsigned) _674;
  _678 = MEM[(limb *)&y_out + 32B];
  _679 = _566 & _678;
  _680 = _675 | _679;
  MEM[(limb *)&y_out + 32B] = _680;
  _232 = MEM[(const u64 *)y2_41(D) + 24B];
  _233 = _232 & mask64_253;
  _234 = (__int128 unsigned) _233;
  _237 = MEM[(limb *)&y_out + 48B];
  _239 = _237 & _566;
  _240 = _234 | _239;
  MEM[(limb *)&y_out + 48B] = _240;
  _581 = *y1_29(D);
  _580 = _581 ^ _646;
  tmp_576 = z2_is_zero_14 & _580;
  _572 = tmp_576 ^ _646;
  MEM[(limb *)&y_out] = _572;
  _264 = MEM[(const limb *)y1_29(D) + 16B];
  _612 = _264 ^ _663;
  tmp_613 = z2_is_zero_14 & _612;
  _614 = tmp_613 ^ _663;
  MEM[(limb *)&y_out + 16B] = _614;
  _624 = MEM[(const limb *)y1_29(D) + 32B];
  _627 = _624 ^ _680;
  tmp_628 = z2_is_zero_14 & _627;
  _629 = tmp_628 ^ _680;
  MEM[(limb *)&y_out + 32B] = _629;
  _221 = MEM[(const limb *)y1_29(D) + 48B];
  _224 = _221 ^ _240;
  tmp_225 = z2_is_zero_14 & _224;
  _226 = tmp_225 ^ _240;
  MEM[(limb *)&y_out + 48B] = _226;
  _486 = *z2_12(D);
  _485 = mask64_253 & _486;
  _484 = (__int128 unsigned) _485;
  _455 = MEM[(limb *)&z_out];
  _453 = _455 & _566;
  _451 = _453 | _484;
  _285 = MEM[(const u64 *)z2_12(D) + 8B];
  _284 = mask64_253 & _285;
  _254 = (__int128 unsigned) _284;
  _228 = MEM[(limb *)&z_out + 16B];
  _217 = _228 & _566;
  _213 = _217 | _254;
  MEM[(limb *)&z_out + 16B] = _213;
  _604 = MEM[(const u64 *)z2_12(D) + 16B];
  _605 = mask64_253 & _604;
  _607 = (__int128 unsigned) _605;
  _594 = MEM[(limb *)&z_out + 32B];
  _597 = _566 & _594;
  _598 = _597 | _607;
  MEM[(limb *)&z_out + 32B] = _598;
  _207 = MEM[(const u64 *)z2_12(D) + 24B];
  _208 = _207 & mask64_253;
  _209 = (__int128 unsigned) _208;
  _212 = MEM[(limb *)&z_out + 48B];
  _214 = _212 & _566;
  _215 = _209 | _214;
  MEM[(limb *)&z_out + 48B] = _215;
  _557 = *z1_8(D);
  _554 = _451 ^ _557;
  tmp_553 = z2_is_zero_14 & _554;
  _552 = _451 ^ tmp_553;
  MEM[(limb *)&z_out] = _552;
  _542 = MEM[(const limb *)z1_8(D) + 16B];
  _539 = _213 ^ _542;
  tmp_538 = z2_is_zero_14 & _539;
  _537 = _213 ^ tmp_538;
  MEM[(limb *)&z_out + 16B] = _537;
  _515 = MEM[(const limb *)z1_8(D) + 32B];
  _512 = _515 ^ _598;
  tmp_510 = z2_is_zero_14 & _512;
  _509 = tmp_510 ^ _598;
  MEM[(limb *)&z_out + 32B] = _509;
  _196 = MEM[(const limb *)z1_8(D) + 48B];
  _199 = _196 ^ _215;
  tmp_200 = z2_is_zero_14 & _199;
  _201 = tmp_200 ^ _215;
  *x3_46(D) = _695;
  MEM[(limb *)x3_46(D) + 16B] = _710;
  MEM[(limb *)x3_46(D) + 32B] = _725;
  MEM[(limb *)x3_46(D) + 48B] = _251;
  *y3_47(D) = _572;
  MEM[(limb *)y3_47(D) + 16B] = _614;
  MEM[(limb *)y3_47(D) + 32B] = _629;
  MEM[(limb *)y3_47(D) + 48B] = _226;
  *z3_48(D) = _552;
  MEM[(limb *)z3_48(D) + 16B] = _537;
  MEM[(limb *)z3_48(D) + 32B] = _509;
  MEM[(limb *)z3_48(D) + 48B] = _201;
  ftmp ={v} {CLOBBER};
  ftmp2 ={v} {CLOBBER};
  ftmp3 ={v} {CLOBBER};
  ftmp4 ={v} {CLOBBER};
  ftmp5 ={v} {CLOBBER};
  ftmp6 ={v} {CLOBBER};
  x_out ={v} {CLOBBER};
  y_out ={v} {CLOBBER};
  z_out ={v} {CLOBBER};
  tmp ={v} {CLOBBER};
  tmp2 ={v} {CLOBBER};
  small1 ={v} {CLOBBER};
  small2 ={v} {CLOBBER};
  small3 ={v} {CLOBBER};
  small4 ={v} {CLOBBER};
  small5 ={v} {CLOBBER};

  <bb 9> [local count: 248438629]:
  return;

}



;; Function batch_mul (batch_mul, funcdef_no=441, decl_uid=10717, cgraph_uid=441, symbol_order=449)

batch_mul (limb * x_out, limb * y_out, limb * z_out, const u8[32] * scalars, const unsigned int num_points, const u8 * g_scalar, const int mixed, const u64[17][3][4] * pre_comp, const u64[16][3][4] * g_pre_comp)
{
  unsigned long ivtmp.174;
  unsigned long ivtmp.169;
  unsigned long ivtmp.167;
  unsigned long ivtmp.162;
  unsigned long ivtmp.155;
  unsigned long ivtmp.153;
  unsigned long ivtmp.149;
  unsigned long ivtmp.144;
  u64 tmp__lsm.136;
  u64 tmp__lsm.135;
  u64 tmp__lsm.134;
  u64 tmp__lsm.133;
  u64 tmp__lsm.132;
  u64 tmp__lsm.131;
  u64 tmp__lsm.130;
  u64 tmp__lsm.129;
  u64 tmp__lsm.128;
  u64 tmp__lsm.127;
  u64 tmp__lsm.126;
  u64 tmp__lsm.125;
  u64 tmp__lsm.124;
  u64 tmp__lsm.123;
  u64 tmp__lsm.122;
  u64 tmp__lsm.121;
  u64 tmp__lsm.120;
  u64 tmp__lsm.119;
  u64 tmp__lsm.118;
  u64 tmp__lsm.117;
  u64 tmp__lsm.116;
  u64 tmp__lsm.115;
  u64 tmp__lsm.114;
  u64 tmp__lsm.113;
  u64 tmp__lsm.112;
  u64 tmp__lsm.111;
  u64 tmp__lsm.110;
  u64 tmp__lsm.109;
  u64 tmp__lsm.108;
  u64 tmp__lsm.107;
  u64 tmp__lsm.106;
  u64 tmp__lsm.105;
  u64 tmp__lsm.104;
  u64 tmp__lsm.103;
  u64 tmp__lsm.102;
  u64 tmp__lsm.101;
  u64 mask;
  u64 mask;
  u64 mask;
  const u64 mask64;
  u8 digit;
  u8 sign;
  u64 bits;
  u64 tmp[3][4];
  limb ftmp[4];
  limb nq[3][4];
  int skip;
  int i;
  _Bool _1;
  _Bool _3;
  _Bool _4;
  int _7;
  int _8;
  int _11;
  int _13;
  long unsigned int _15;
  int _18;
  int _19;
  int _21;
  int _23;
  long unsigned int _24;
  int _25;
  unsigned int _26;
  int _27;
  int _28;
  int _29;
  unsigned int _32;
  unsigned int _34;
  unsigned int _36;
  int _38;
  int _43;
  unsigned char digit.17_45;
  long unsigned int _46;
  unsigned char sign.18_47;
  __int128 unsigned _48;
  __int128 unsigned _49;
  int _52;
  int _66;
  int _68;
  int _69;
  int _72;
  int _73;
  __int128 unsigned _77;
  int _80;
  int _81;
  long unsigned int _85;
  int _92;
  int _94;
  __int128 unsigned _113;
  __int128 unsigned _115;
  __int128 unsigned _117;
  __int128 unsigned _119;
  __int128 unsigned _121;
  __int128 unsigned _123;
  __int128 unsigned _125;
  __int128 unsigned _127;
  __int128 unsigned _129;
  __int128 unsigned _131;
  __int128 unsigned _133;
  __int128 unsigned _135;
  __int128 unsigned _156;
  __int128 unsigned _157;
  __int128 unsigned _159;
  __int128 unsigned _160;
  __int128 unsigned _162;
  __int128 unsigned _163;
  __int128 unsigned _165;
  __int128 unsigned _166;
  unsigned long _167;
  long unsigned int _185;
  __int128 unsigned _186;
  long unsigned int _187;
  __int128 unsigned _188;
  long unsigned int _189;
  __int128 unsigned _190;
  long unsigned int _191;
  __int128 unsigned _192;
  long unsigned int _193;
  __int128 unsigned _194;
  long unsigned int _195;
  __int128 unsigned _196;
  long unsigned int _197;
  __int128 unsigned _198;
  long unsigned int _199;
  __int128 unsigned _200;
  long unsigned int _201;
  __int128 unsigned _202;
  long unsigned int _203;
  __int128 unsigned _204;
  long unsigned int _205;
  __int128 unsigned _206;
  long unsigned int _207;
  __int128 unsigned _208;
  __int128 unsigned _209;
  __int128 unsigned _210;
  __int128 unsigned _211;
  __int128 unsigned _212;
  __int128 unsigned _213;
  __int128 unsigned _214;
  __int128 unsigned _215;
  __int128 unsigned _216;
  __int128 unsigned _217;
  __int128 unsigned _218;
  __int128 unsigned _219;
  __int128 unsigned _220;
  int _224;
  int _237;
  int _238;
  int _239;
  unsigned long _270;
  long unsigned int _276;
  long unsigned int _278;
  int _293;
  sizetype _294;
  const u8 * _295;
  unsigned char _296;
  int _297;
  int _298;
  int _299;
  char _300;
  char _301;
  __int128 unsigned _302;
  int _303;
  sizetype _304;
  const u8 * _305;
  unsigned char _306;
  int _307;
  int _308;
  int _309;
  char _310;
  char _311;
  __int128 unsigned _312;
  int _313;
  sizetype _314;
  const u8 * _315;
  unsigned char _316;
  int _317;
  int _318;
  int _319;
  char _320;
  char _321;
  __int128 unsigned _322;
  int _323;
  sizetype _324;
  const u8 * _325;
  unsigned char _326;
  int _327;
  int _328;
  int _329;
  char _330;
  char _331;
  char _338;
  long unsigned int _343;
  long unsigned int _345;
  int _359;
  int _360;
  sizetype _361;
  const u8 * _362;
  unsigned char _363;
  int _364;
  int _365;
  int _366;
  char _367;
  char _368;
  __int128 unsigned _369;
  int _370;
  sizetype _371;
  const u8 * _372;
  unsigned char _373;
  int _374;
  int _375;
  int _376;
  char _377;
  char _378;
  int _380;
  sizetype _381;
  const u8 * _382;
  unsigned char _383;
  int _384;
  int _385;
  int _386;
  char _387;
  char _388;
  int _390;
  sizetype _391;
  const u8 * _392;
  unsigned char _393;
  int _394;
  int _395;
  int _396;
  char _397;
  char _398;
  int _400;
  sizetype _401;
  unsigned char _403;
  int _404;
  int _405;
  int _406;
  char _407;
  char _408;
  int _410;
  sizetype _411;
  unsigned char _413;
  int _414;
  int _415;
  int _416;
  char _417;
  char _418;
  int _420;
  sizetype _421;
  unsigned char _423;
  int _424;
  int _425;
  int _426;
  char _427;
  char _428;
  int _430;
  sizetype _431;
  unsigned char _433;
  int _434;
  int _435;
  int _436;
  char _437;
  char _438;
  int _440;
  sizetype _441;
  int _442;
  unsigned char _443;
  int _444;
  int _446;
  char _447;
  char _448;
  int _450;
  sizetype _451;
  unsigned char _453;
  int _454;
  int _455;
  int _456;
  char _457;
  char _458;
  long unsigned int _461;
  long unsigned int _468;
  long unsigned int _470;
  long unsigned int _472;
  char _508;
  unsigned long _511;
  __int128 unsigned _517;
  __int128 unsigned _518;
  long unsigned int _527;
  __int128 unsigned _528;
  int _531;
  __int128 unsigned _533;
  __int128 unsigned _534;
  long unsigned int _543;
  __int128 unsigned _544;
  __int128 unsigned _549;
  __int128 unsigned _550;
  long unsigned int _560;
  long unsigned int _561;
  long unsigned int _562;
  long unsigned int _572;
  long unsigned int _573;
  long unsigned int _574;
  long unsigned int _584;
  long unsigned int _585;
  long unsigned int _586;
  long unsigned int _596;
  long unsigned int _597;
  long unsigned int _598;
  long unsigned int _608;
  long unsigned int _609;
  long unsigned int _610;
  long unsigned int _620;
  long unsigned int _621;
  long unsigned int _622;
  void * _631;
  long unsigned int _632;
  long unsigned int _633;
  long unsigned int _634;
  int _643;
  long unsigned int _644;
  long unsigned int _645;
  long unsigned int _646;
  long unsigned int _656;
  long unsigned int _657;
  long unsigned int _658;
  long unsigned int _668;
  long unsigned int _669;
  long unsigned int _670;
  long unsigned int _680;
  long unsigned int _681;
  long unsigned int _682;
  long unsigned int _692;
  long unsigned int _693;
  long unsigned int _694;
  long unsigned int _704;
  long unsigned int _705;
  long unsigned int _706;
  long unsigned int _716;
  long unsigned int _717;
  long unsigned int _718;
  const u8 * _725;
  long unsigned int _728;
  long unsigned int _729;
  long unsigned int _730;
  unsigned int _737;
  long unsigned int _740;
  long unsigned int _741;
  long unsigned int _742;
  unsigned long _749;
  long unsigned int _752;
  long unsigned int _753;
  long unsigned int _754;
  long unsigned int _764;
  long unsigned int _765;
  long unsigned int _766;
  unsigned long _773;
  long unsigned int _776;
  long unsigned int _777;
  long unsigned int _778;
  long unsigned int _788;
  long unsigned int _789;
  long unsigned int _790;
  long unsigned int _800;
  long unsigned int _801;
  long unsigned int _802;
  long unsigned int _812;
  long unsigned int _813;
  long unsigned int _814;
  unsigned int _821;
  long unsigned int _824;
  long unsigned int _825;
  long unsigned int _826;
  long unsigned int _836;
  long unsigned int _837;
  long unsigned int _838;
  long unsigned int _848;
  long unsigned int _849;
  long unsigned int _850;
  long unsigned int _860;
  long unsigned int _861;
  long unsigned int _862;
  long unsigned int _872;
  long unsigned int _873;
  long unsigned int _874;
  long unsigned int _884;
  long unsigned int _885;
  long unsigned int _886;
  sizetype _893;
  long unsigned int _896;
  long unsigned int _897;
  long unsigned int _898;
  long unsigned int _908;
  long unsigned int _909;
  long unsigned int _910;
  long unsigned int _920;
  long unsigned int _921;
  long unsigned int _922;
  unsigned long _929;
  long unsigned int _932;
  long unsigned int _933;
  long unsigned int _934;
  unsigned int _941;
  long unsigned int _944;
  long unsigned int _945;
  long unsigned int _946;
  long unsigned int _956;
  long unsigned int _957;
  long unsigned int _958;
  long unsigned int _968;
  long unsigned int _969;
  long unsigned int _970;
  long unsigned int _980;
  long unsigned int _981;
  long unsigned int _982;
  int _1389;
  unsigned int _1390;
  int _1392;
  unsigned int _1393;
  int _1395;
  unsigned int _1396;
  int _1398;
  unsigned int _1399;
  int _1401;
  unsigned int _1402;
  int _1404;
  unsigned int _1405;
  int _1407;
  unsigned int _1408;
  unsigned int _1411;
  unsigned int _1412;
  int _1413;
  unsigned int _1414;
  unsigned int _1415;
  int _1419;
  unsigned int _1420;
  unsigned int _1421;
  int _1425;
  unsigned int _1426;
  unsigned int _1427;
  int _1431;
  unsigned int _1432;
  unsigned int _1433;
  void * _1446;
  const u64[3][4] * _1447;
  void * _1474;
  int _1484;
  void * _1489;
  sizetype _1490;
  void * _1493;
  sizetype _1494;
  int _1495;
  int _1497;
  int prephitmp_1498;
  int _1500;
  int _1502;
  int prephitmp_1503;
  int _1505;
  int _1507;
  int prephitmp_1508;
  void * _1509;
  sizetype _1510;
  int _1512;
  int _1513;
  void * _1517;
  long unsigned int _1518;
  long unsigned int _1520;
  int _1521;
  int prephitmp_1522;
  sizetype _1529;
  void * _1531;
  void * _1533;
  vector(2) long unsigned int _1546;
  vector(2) long unsigned int _1548;
  vector(2) long unsigned int _1550;
  vector(2) long unsigned int _1552;
  vector(2) long unsigned int _1554;
  vector(2) long unsigned int _1556;
  vector(2) long unsigned int _1569;
  vector(2) long unsigned int _1577;
  vector(2) long unsigned int _1579;
  vector(2) long unsigned int _1581;
  vector(2) long unsigned int _1583;
  vector(2) long unsigned int _1585;
  vector(2) long unsigned int _1598;
  vector(2) long unsigned int _1600;
  vector(2) long unsigned int _1602;
  vector(2) long unsigned int _1604;
  vector(2) long unsigned int _1606;
  vector(2) long unsigned int _1608;
  unsigned char _1616;
  void * _1617;
  int _1650;

  <bb 2> [local count: 24299731]:
  _1 = g_scalar_64(D) != 0B;
  __builtin_memset (&nq, 0, 192);
  if (num_points_67(D) != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 12149866]:

  <bb 4> [local count: 24299732]:
  # i_56 = PHI <255(2), 31(3)>
  _941 = num_points_67(D) + 4294967295;
  _929 = (unsigned long) _941;
  _773 = _929 * 32;
  goto <bb 8>; [100.00%]

  <bb 5> [local count: 114196315]:
  if (skip_502 == 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [100.00%]

  <bb 6> [local count: 64880290]:
  point_double (&nq[0], &nq[1], &nq[2], &nq[0], &nq[1], &nq[2]);

  <bb 7> [local count: 179071159]:
  # skip_59 = PHI <0(6), skip_502(5)>

  <bb 8> [local count: 196606909]:
  # i_139 = PHI <_1650(7), i_56(4)>
  # skip_502 = PHI <skip_59(7), 1(4)>
  _3 = i_139 <= 31;
  _4 = _1 & _3;
  _1650 = i_139 + -1;
  if (_4 != 0)
    goto <bb 9>; [33.00%]
  else
    goto <bb 21>; [67.00%]

  <bb 9> [local count: 64880290]:
  _26 = (unsigned int) i_139;
  _1399 = _26 + 224;
  _1398 = (int) _1399;
  _323 = _1398 >> 3;
  _324 = (sizetype) _323;
  _325 = g_scalar_64(D) + _324;
  _326 = *_325;
  _327 = (int) _326;
  _328 = _1398 & 7;
  _329 = _327 >> _328;
  _330 = (char) _329;
  _331 = _330 & 1;
  _7 = (int) _331;
  _8 = _7 << 3;
  _1421 = (unsigned int) i_139;
  _1396 = _1421 + 160;
  _1395 = (int) _1396;
  _313 = _1395 >> 3;
  _314 = (sizetype) _313;
  _315 = g_scalar_64(D) + _314;
  _316 = *_315;
  _317 = (int) _316;
  _318 = _1395 & 7;
  _319 = _317 >> _318;
  _320 = (char) _319;
  _321 = _320 & 1;
  _11 = (int) _321;
  _72 = _11 << 2;
  _94 = _8 | _72;
  _32 = (unsigned int) i_139;
  _1393 = _32 + 96;
  _1392 = (int) _1393;
  _303 = _1392 >> 3;
  _304 = (sizetype) _303;
  _305 = g_scalar_64(D) + _304;
  _306 = *_305;
  _307 = (int) _306;
  _308 = _1392 & 7;
  _309 = _307 >> _308;
  _310 = (char) _309;
  _311 = _310 & 1;
  _13 = (int) _311;
  _73 = _13 << 1;
  _66 = _73 | _94;
  bits_74 = (u64) _66;
  _1427 = (unsigned int) i_139;
  _1390 = _1427 + 32;
  _1389 = (int) _1390;
  _293 = _1389 >> 3;
  _294 = (sizetype) _293;
  _295 = g_scalar_64(D) + _294;
  _296 = *_295;
  _297 = (int) _296;
  _298 = _1389 & 7;
  _299 = _297 >> _298;
  _300 = (char) _299;
  _301 = _300 & 1;
  _15 = (long unsigned int) _301;
  bits_75 = _15 | bits_74;
  _1447 = g_pre_comp_76(D) + 1536;
  ivtmp.174_1448 = (unsigned long) _1447;

  <bb 10> [local count: 524940478]:
  # tmp__lsm.125_507 = PHI <0(9), _850(10)>
  # tmp__lsm.126_55 = PHI <0(9), _862(10)>
  # tmp__lsm.127_61 = PHI <0(9), _874(10)>
  # tmp__lsm.128_136 = PHI <0(9), _886(10)>
  # tmp__lsm.129_501 = PHI <0(9), _898(10)>
  # tmp__lsm.130_54 = PHI <0(9), _910(10)>
  # tmp__lsm.131_526 = PHI <0(9), _922(10)>
  # tmp__lsm.132_516 = PHI <0(9), _934(10)>
  # tmp__lsm.133_515 = PHI <0(9), _946(10)>
  # tmp__lsm.134_171 = PHI <0(9), _958(10)>
  # tmp__lsm.135_168 = PHI <0(9), _970(10)>
  # tmp__lsm.136_389 = PHI <0(9), _982(10)>
  # ivtmp.169_1452 = PHI <0(9), ivtmp.169_1451(10)>
  # ivtmp.174_1450 = PHI <ivtmp.174_1448(9), ivtmp.174_1449(10)>
  mask_273 = bits_75 ^ ivtmp.169_1452;
  _276 = mask_273 >> 2;
  mask_277 = mask_273 | _276;
  _278 = mask_277 >> 1;
  mask_279 = mask_277 | _278;
  mask_280 = mask_279 & 1;
  mask_281 = mask_280 + 18446744073709551615;
  _1446 = (void *) ivtmp.174_1450;
  _848 = MEM[base: _1446, offset: 0B];
  _849 = mask_281 & _848;
  _850 = tmp__lsm.125_507 | _849;
  _860 = MEM[base: _1446, offset: 8B];
  _861 = mask_281 & _860;
  _862 = tmp__lsm.126_55 | _861;
  _872 = MEM[base: _1446, offset: 16B];
  _873 = mask_281 & _872;
  _874 = tmp__lsm.127_61 | _873;
  _884 = MEM[base: _1446, offset: 24B];
  _885 = mask_281 & _884;
  _886 = tmp__lsm.128_136 | _885;
  _896 = MEM[base: _1446, offset: 32B];
  _897 = mask_281 & _896;
  _898 = tmp__lsm.129_501 | _897;
  _908 = MEM[base: _1446, offset: 40B];
  _909 = mask_281 & _908;
  _910 = tmp__lsm.130_54 | _909;
  _920 = MEM[base: _1446, offset: 48B];
  _921 = mask_281 & _920;
  _922 = tmp__lsm.131_526 | _921;
  _932 = MEM[base: _1446, offset: 56B];
  _933 = mask_281 & _932;
  _934 = tmp__lsm.132_516 | _933;
  _944 = MEM[base: _1446, offset: 64B];
  _945 = mask_281 & _944;
  _946 = tmp__lsm.133_515 | _945;
  _956 = MEM[base: _1446, offset: 72B];
  _957 = mask_281 & _956;
  _958 = tmp__lsm.134_171 | _957;
  _968 = MEM[base: _1446, offset: 80B];
  _969 = mask_281 & _968;
  _970 = tmp__lsm.135_168 | _969;
  _980 = MEM[base: _1446, offset: 88B];
  _981 = mask_281 & _980;
  _982 = tmp__lsm.136_389 | _981;
  ivtmp.169_1451 = ivtmp.169_1452 + 1;
  ivtmp.174_1449 = ivtmp.174_1450 + 96;
  if (ivtmp.169_1451 != 16)
    goto <bb 10>; [87.64%]
  else
    goto <bb 11>; [12.36%]

  <bb 11> [local count: 64880290]:
  _1606 = {_970, _982};
  _1608 = {_946, _958};
  _1604 = {_922, _934};
  _1602 = {_898, _910};
  _1600 = {_874, _886};
  _1598 = {_850, _862};
  MEM[(u64 *)&tmp] = _1598;
  MEM[(u64 *)&tmp + 16B] = _1600;
  MEM[(u64 *)&tmp + 32B] = _1602;
  MEM[(u64 *)&tmp + 48B] = _1604;
  MEM[(u64 *)&tmp + 64B] = _1608;
  MEM[(u64 *)&tmp + 80B] = _1606;
  if (skip_502 == 0)
    goto <bb 12>; [33.00%]
  else
    goto <bb 13>; [67.00%]

  <bb 12> [local count: 21410487]:
  point_add (&nq[0], &nq[1], &nq[2], &nq[0], &nq[1], &nq[2], 1, &tmp[0], &tmp[1], &tmp[2]);
  goto <bb 14>; [100.00%]

  <bb 13> [local count: 43469782]:
  _129 = (__int128 unsigned) _850;
  MEM[(limb *)&nq] = _129;
  _131 = (__int128 unsigned) _862;
  MEM[(limb *)&nq + 16B] = _131;
  _133 = (__int128 unsigned) _874;
  MEM[(limb *)&nq + 32B] = _133;
  _135 = (__int128 unsigned) _886;
  MEM[(limb *)&nq + 48B] = _135;
  _121 = (__int128 unsigned) _898;
  MEM[(limb *)&nq + 64B] = _121;
  _123 = (__int128 unsigned) _910;
  MEM[(limb *)&nq + 80B] = _123;
  _125 = (__int128 unsigned) _922;
  MEM[(limb *)&nq + 96B] = _125;
  _127 = (__int128 unsigned) _934;
  MEM[(limb *)&nq + 112B] = _127;
  _113 = (__int128 unsigned) _946;
  MEM[(limb *)&nq + 128B] = _113;
  _115 = (__int128 unsigned) _958;
  MEM[(limb *)&nq + 144B] = _115;
  _117 = (__int128 unsigned) _970;
  MEM[(limb *)&nq + 160B] = _117;
  _119 = (__int128 unsigned) _982;
  MEM[(limb *)&nq + 176B] = _119;

  <bb 14> [local count: 64880290]:
  _34 = (unsigned int) i_139;
  _1408 = _34 + 192;
  _1407 = (int) _1408;
  _390 = _1407 >> 3;
  _391 = (sizetype) _390;
  _392 = g_scalar_64(D) + _391;
  _393 = *_392;
  _394 = (int) _393;
  _395 = _1407 & 7;
  _396 = _394 >> _395;
  _397 = (char) _396;
  _398 = _397 & 1;
  _18 = (int) _398;
  _19 = _18 << 3;
  _1433 = (unsigned int) i_139;
  _1405 = _1433 + 128;
  _1404 = (int) _1405;
  _380 = _1404 >> 3;
  _381 = (sizetype) _380;
  _382 = g_scalar_64(D) + _381;
  _383 = *_382;
  _384 = (int) _383;
  _385 = _1404 & 7;
  _386 = _384 >> _385;
  _387 = (char) _386;
  _388 = _387 & 1;
  _21 = (int) _388;
  _80 = _21 << 2;
  _69 = _19 | _80;
  _36 = (unsigned int) i_139;
  _1402 = _36 + 64;
  _1401 = (int) _1402;
  _370 = _1401 >> 3;
  _371 = (sizetype) _370;
  _372 = g_scalar_64(D) + _371;
  _373 = *_372;
  _374 = (int) _373;
  _375 = _1401 & 7;
  _376 = _374 >> _375;
  _377 = (char) _376;
  _378 = _377 & 1;
  _23 = (int) _378;
  _81 = _23 << 1;
  _68 = _69 | _81;
  bits_82 = (u64) _68;
  _360 = i_139 >> 3;
  _361 = (sizetype) _360;
  _362 = g_scalar_64(D) + _361;
  _363 = *_362;
  _364 = (int) _363;
  _365 = i_139 & 7;
  _366 = _364 >> _365;
  _367 = (char) _366;
  _368 = _367 & 1;
  _24 = (long unsigned int) _368;
  bits_84 = _24 | bits_82;
  ivtmp.167_1475 = (unsigned long) g_pre_comp_76(D);

  <bb 15> [local count: 524940478]:
  # tmp__lsm.113_155 = PHI <0(14), _706(15)>
  # tmp__lsm.114_158 = PHI <0(14), _718(15)>
  # tmp__lsm.115_161 = PHI <0(14), _730(15)>
  # tmp__lsm.116_164 = PHI <0(14), _742(15)>
  # tmp__lsm.117_2 = PHI <0(14), _754(15)>
  # tmp__lsm.118_223 = PHI <0(14), _766(15)>
  # tmp__lsm.119_509 = PHI <0(14), _778(15)>
  # tmp__lsm.120_240 = PHI <0(14), _790(15)>
  # tmp__lsm.121_514 = PHI <0(14), _802(15)>
  # tmp__lsm.122_399 = PHI <0(14), _814(15)>
  # tmp__lsm.123_98 = PHI <0(14), _826(15)>
  # tmp__lsm.124_268 = PHI <0(14), _838(15)>
  # ivtmp.162_1487 = PHI <0(14), ivtmp.162_1486(15)>
  # ivtmp.167_1477 = PHI <ivtmp.167_1475(14), ivtmp.167_1476(15)>
  mask_340 = bits_84 ^ ivtmp.162_1487;
  _343 = mask_340 >> 2;
  mask_344 = mask_340 | _343;
  _345 = mask_344 >> 1;
  mask_346 = mask_344 | _345;
  mask_347 = mask_346 & 1;
  mask_348 = mask_347 + 18446744073709551615;
  _1474 = (void *) ivtmp.167_1477;
  _704 = MEM[base: _1474, offset: 0B];
  _705 = mask_348 & _704;
  _706 = tmp__lsm.113_155 | _705;
  _716 = MEM[base: _1474, offset: 8B];
  _717 = mask_348 & _716;
  _718 = tmp__lsm.114_158 | _717;
  _728 = MEM[base: _1474, offset: 16B];
  _729 = mask_348 & _728;
  _730 = tmp__lsm.115_161 | _729;
  _740 = MEM[base: _1474, offset: 24B];
  _741 = mask_348 & _740;
  _742 = tmp__lsm.116_164 | _741;
  _752 = MEM[base: _1474, offset: 32B];
  _753 = mask_348 & _752;
  _754 = tmp__lsm.117_2 | _753;
  _764 = MEM[base: _1474, offset: 40B];
  _765 = mask_348 & _764;
  _766 = tmp__lsm.118_223 | _765;
  _776 = MEM[base: _1474, offset: 48B];
  _777 = mask_348 & _776;
  _778 = tmp__lsm.119_509 | _777;
  _788 = MEM[base: _1474, offset: 56B];
  _789 = mask_348 & _788;
  _790 = tmp__lsm.120_240 | _789;
  _800 = MEM[base: _1474, offset: 64B];
  _801 = mask_348 & _800;
  _802 = tmp__lsm.121_514 | _801;
  _812 = MEM[base: _1474, offset: 72B];
  _813 = mask_348 & _812;
  _814 = tmp__lsm.122_399 | _813;
  _824 = MEM[base: _1474, offset: 80B];
  _825 = mask_348 & _824;
  _826 = tmp__lsm.123_98 | _825;
  _836 = MEM[base: _1474, offset: 88B];
  _837 = mask_348 & _836;
  _838 = tmp__lsm.124_268 | _837;
  ivtmp.162_1486 = ivtmp.162_1487 + 1;
  ivtmp.167_1476 = ivtmp.167_1477 + 96;
  if (ivtmp.162_1486 != 16)
    goto <bb 15>; [87.64%]
  else
    goto <bb 16>; [12.36%]

  <bb 16> [local count: 64880290]:
  _1585 = {_826, _838};
  _1583 = {_802, _814};
  _1581 = {_778, _790};
  _1579 = {_754, _766};
  _1577 = {_730, _742};
  _1569 = {_706, _718};
  MEM[(u64 *)&tmp] = _1569;
  MEM[(u64 *)&tmp + 16B] = _1577;
  MEM[(u64 *)&tmp + 32B] = _1579;
  MEM[(u64 *)&tmp + 48B] = _1581;
  MEM[(u64 *)&tmp + 64B] = _1583;
  MEM[(u64 *)&tmp + 80B] = _1585;
  point_add (&nq[0], &nq[1], &nq[2], &nq[0], &nq[1], &nq[2], 1, &tmp[0], &tmp[1], &tmp[2]);
  if (num_points_67(D) != 0)
    goto <bb 17>; [50.00%]
  else
    goto <bb 20>; [50.00%]

  <bb 17> [local count: 32440145]:
  _52 = i_139 % 5;
  if (_52 == 0)
    goto <bb 23>; [27.00%]
  else
    goto <bb 18>; [73.00%]

  <bb 18> [local count: 23681306]:
  if (_1650 >= 0)
    goto <bb 6>; [87.37%]
  else
    goto <bb 19>; [12.63%]

  <bb 19> [local count: 24299732]:
  _217 = MEM[(const limb *)&nq];
  *x_out_104(D) = _217;
  _218 = MEM[(const limb *)&nq + 16B];
  MEM[(limb *)x_out_104(D) + 16B] = _218;
  _219 = MEM[(const limb *)&nq + 32B];
  MEM[(limb *)x_out_104(D) + 32B] = _219;
  _220 = MEM[(const limb *)&nq + 48B];
  MEM[(limb *)x_out_104(D) + 48B] = _220;
  _213 = MEM[(const limb *)&nq + 64B];
  *y_out_105(D) = _213;
  _214 = MEM[(const limb *)&nq + 80B];
  MEM[(limb *)y_out_105(D) + 16B] = _214;
  _215 = MEM[(const limb *)&nq + 96B];
  MEM[(limb *)y_out_105(D) + 32B] = _215;
  _216 = MEM[(const limb *)&nq + 112B];
  MEM[(limb *)y_out_105(D) + 48B] = _216;
  _209 = MEM[(const limb *)&nq + 128B];
  *z_out_106(D) = _209;
  _210 = MEM[(const limb *)&nq + 144B];
  MEM[(limb *)z_out_106(D) + 16B] = _210;
  _211 = MEM[(const limb *)&nq + 160B];
  MEM[(limb *)z_out_106(D) + 32B] = _211;
  _212 = MEM[(const limb *)&nq + 176B];
  MEM[(limb *)z_out_106(D) + 48B] = _212;
  nq ={v} {CLOBBER};
  ftmp ={v} {CLOBBER};
  tmp ={v} {CLOBBER};
  sign ={v} {CLOBBER};
  digit ={v} {CLOBBER};
  return;

  <bb 20> [local count: 32440145]:
  if (_1650 != -1)
    goto <bb 6>; [89.00%]
  else
    goto <bb 19>; [11.00%]

  <bb 21> [local count: 131726619]:
  if (num_points_67(D) != 0)
    goto <bb 22>; [50.00%]
  else
    goto <bb 39>; [50.00%]

  <bb 22> [local count: 65863309]:
  _25 = i_139 % 5;
  if (_25 == 0)
    goto <bb 23>; [27.00%]
  else
    goto <bb 39>; [73.00%]

  <bb 23> [local count: 23622320]:
  # skip_530 = PHI <_52(17), skip_502(22)>
  _1415 = (unsigned int) _1650;
  _821 = (unsigned int) i_139;
  _1414 = _821 + 4;
  _1413 = (int) _1414;
  _400 = _1413 >> 3;
  _401 = (sizetype) _400;
  _737 = (unsigned int) i_139;
  _1420 = _737 + 3;
  _1419 = (int) _1420;
  _410 = _1419 >> 3;
  _411 = (sizetype) _410;
  _1412 = (unsigned int) i_139;
  _1426 = _1412 + 2;
  _1425 = (int) _1426;
  _420 = _1425 >> 3;
  _421 = (sizetype) _420;
  _1411 = (unsigned int) i_139;
  _1432 = _1411 + 1;
  _1431 = (int) _1432;
  _430 = _1431 >> 3;
  _431 = (sizetype) _430;
  _440 = i_139 >> 3;
  _441 = (sizetype) _440;
  _450 = _1650 >> 3;
  _451 = (sizetype) _450;
  _1484 = i_139 & 7;
  ivtmp.153_641 = (unsigned long) pre_comp_97(D);
  _725 = scalars_87(D) + _441;
  ivtmp.155_605 = (unsigned long) _725;
  _749 = (unsigned long) scalars_87(D);
  _167 = _749 + 32;
  _270 = _167 + _773;
  _511 = _270 + _441;

  <bb 24> [local count: 214748415]:
  # skip_462 = PHI <skip_530(23), 0(38)>
  # ivtmp.153_665 = PHI <ivtmp.153_641(23), ivtmp.153_653(38)>
  # ivtmp.155_629 = PHI <ivtmp.155_605(23), ivtmp.155_617(38)>
  if (_1414 > 255)
    goto <bb 26>; [34.00%]
  else
    goto <bb 25>; [66.00%]

  <bb 25> [local count: 141733950]:
  _1490 = ivtmp.155_629 - _441;
  _1489 = (void *) _1490;
  _403 = MEM[base: _1489, index: _401, offset: 0B];
  _404 = (int) _403;
  _405 = _1413 & 7;
  _406 = _404 >> _405;
  _407 = (char) _406;
  _408 = _407 & 1;
  _1495 = (int) _408;
  _1497 = _1495 << 5;

  <bb 26> [local count: 214748415]:
  # prephitmp_1498 = PHI <_1497(25), 0(24)>
  if (_1420 > 255)
    goto <bb 28>; [34.00%]
  else
    goto <bb 27>; [66.00%]

  <bb 27> [local count: 141733950]:
  _1494 = ivtmp.155_629 - _441;
  _1493 = (void *) _1494;
  _413 = MEM[base: _1493, index: _411, offset: 0B];
  _414 = (int) _413;
  _415 = _1419 & 7;
  _416 = _414 >> _415;
  _417 = (char) _416;
  _418 = _417 & 1;
  _1500 = (int) _418;
  _1502 = _1500 << 4;

  <bb 28> [local count: 214748415]:
  # prephitmp_1503 = PHI <_1502(27), 0(26)>
  if (_1426 > 255)
    goto <bb 30>; [34.00%]
  else
    goto <bb 29>; [66.00%]

  <bb 29> [local count: 141733950]:
  _1510 = ivtmp.155_629 - _441;
  _1509 = (void *) _1510;
  _423 = MEM[base: _1509, index: _421, offset: 0B];
  _424 = (int) _423;
  _425 = _1425 & 7;
  _426 = _424 >> _425;
  _427 = (char) _426;
  _428 = _427 & 1;
  _1505 = (int) _428;
  _1507 = _1505 << 3;

  <bb 30> [local count: 214748415]:
  # prephitmp_1508 = PHI <_1507(29), 0(28)>
  if (_1432 == 256)
    goto <bb 41>; [34.00%]
  else
    goto <bb 31>; [66.00%]

  <bb 31> [local count: 141733953]:
  _1529 = ivtmp.155_629 - _441;
  _1517 = (void *) _1529;
  _433 = MEM[base: _1517, index: _431, offset: 0B];
  _434 = (int) _433;
  _435 = _1431 & 7;
  _436 = _434 >> _435;
  _437 = (char) _436;
  _438 = _437 & 1;
  _1512 = (int) _438;
  _1513 = _1512 << 2;
  _1531 = (void *) ivtmp.155_629;
  _443 = MEM[base: _1531, offset: 0B];
  _444 = (int) _443;
  _446 = _444 >> _1484;
  _447 = (char) _446;
  _448 = _447 & 1;
  _38 = (int) _448;
  _92 = _38 << 1;
  _237 = _92 | prephitmp_1498;
  _238 = _237 | prephitmp_1503;
  _239 = _238 | prephitmp_1508;
  _224 = _239 | _1513;
  if (_1415 > 255)
    goto <bb 33>; [51.52%]
  else
    goto <bb 32>; [48.48%]

  <bb 32> [local count: 141733950]:
  # _442 = PHI <_643(41), _224(31)>
  _893 = ivtmp.155_629 - _441;
  _1533 = (void *) _893;
  _453 = MEM[base: _1533, index: _451, offset: 0B];
  _454 = (int) _453;
  _455 = _1650 & 7;
  _456 = _454 >> _455;
  _457 = (char) _456;
  _458 = _457 & 1;
  _1518 = (long unsigned int) _458;
  bits_93 = (u64) _442;
  _1520 = bits_93 | _1518;
  _1521 = (int) _1520;

  <bb 33> [local count: 214748415]:
  # prephitmp_1522 = PHI <_1521(32), _224(31)>
  ec_GFp_nistp_recode_scalar_bits (&sign, &digit, prephitmp_1522);
  digit.17_45 = digit;
  _46 = (long unsigned int) digit.17_45;

  <bb 34> [local count: 1737509919]:
  # tmp__lsm.101_128 = PHI <0(33), _562(34)>
  # tmp__lsm.102_130 = PHI <0(33), _574(34)>
  # tmp__lsm.103_132 = PHI <0(33), _586(34)>
  # tmp__lsm.104_134 = PHI <0(33), _598(34)>
  # tmp__lsm.105_120 = PHI <0(33), _610(34)>
  # tmp__lsm.106_122 = PHI <0(33), _622(34)>
  # tmp__lsm.107_124 = PHI <0(33), _634(34)>
  # tmp__lsm.108_126 = PHI <0(33), _646(34)>
  # tmp__lsm.109_112 = PHI <0(33), _658(34)>
  # tmp__lsm.110_114 = PHI <0(33), _670(34)>
  # tmp__lsm.111_116 = PHI <0(33), _682(34)>
  # tmp__lsm.112_118 = PHI <0(33), _694(34)>
  # ivtmp.144_541 = PHI <0(33), ivtmp.144_691(34)>
  # ivtmp.149_679 = PHI <ivtmp.153_665(33), ivtmp.149_667(34)>
  mask_467 = _46 ^ ivtmp.144_541;
  _468 = mask_467 >> 4;
  mask_469 = mask_467 | _468;
  _470 = mask_469 >> 2;
  mask_471 = mask_469 | _470;
  _472 = mask_471 >> 1;
  mask_473 = mask_471 | _472;
  mask_474 = mask_473 & 1;
  mask_475 = mask_474 + 18446744073709551615;
  _631 = (void *) ivtmp.149_679;
  _560 = MEM[base: _631, offset: 0B];
  _561 = mask_475 & _560;
  _562 = tmp__lsm.101_128 | _561;
  _572 = MEM[base: _631, offset: 8B];
  _573 = mask_475 & _572;
  _574 = tmp__lsm.102_130 | _573;
  _584 = MEM[base: _631, offset: 16B];
  _585 = mask_475 & _584;
  _586 = tmp__lsm.103_132 | _585;
  _596 = MEM[base: _631, offset: 24B];
  _597 = mask_475 & _596;
  _598 = tmp__lsm.104_134 | _597;
  _608 = MEM[base: _631, offset: 32B];
  _609 = mask_475 & _608;
  _610 = tmp__lsm.105_120 | _609;
  _620 = MEM[base: _631, offset: 40B];
  _621 = mask_475 & _620;
  _622 = tmp__lsm.106_122 | _621;
  _632 = MEM[base: _631, offset: 48B];
  _633 = mask_475 & _632;
  _634 = tmp__lsm.107_124 | _633;
  _644 = MEM[base: _631, offset: 56B];
  _645 = mask_475 & _644;
  _646 = tmp__lsm.108_126 | _645;
  _656 = MEM[base: _631, offset: 64B];
  _657 = mask_475 & _656;
  _658 = tmp__lsm.109_112 | _657;
  _668 = MEM[base: _631, offset: 72B];
  _669 = mask_475 & _668;
  _670 = tmp__lsm.110_114 | _669;
  _680 = MEM[base: _631, offset: 80B];
  _681 = mask_475 & _680;
  _682 = tmp__lsm.111_116 | _681;
  _692 = MEM[base: _631, offset: 88B];
  _693 = mask_475 & _692;
  _694 = tmp__lsm.112_118 | _693;
  ivtmp.144_691 = ivtmp.144_541 + 1;
  ivtmp.149_667 = ivtmp.149_679 + 96;
  if (ivtmp.144_691 != 17)
    goto <bb 34>; [87.64%]
  else
    goto <bb 35>; [12.36%]

  <bb 35> [local count: 214748419]:
  _1556 = {_682, _694};
  _1554 = {_658, _670};
  _1552 = {_634, _646};
  _1550 = {_610, _622};
  _1548 = {_586, _598};
  _1546 = {_562, _574};
  MEM[(u64 *)&tmp] = _1546;
  MEM[(u64 *)&tmp + 16B] = _1548;
  MEM[(u64 *)&tmp + 32B] = _1550;
  MEM[(u64 *)&tmp + 48B] = _1552;
  MEM[(u64 *)&tmp + 64B] = _1554;
  MEM[(u64 *)&tmp + 80B] = _1556;
  _156 = (__int128 unsigned) _610;
  _157 = 0x1fffffffffffffffdfffffffe00 - _156;
  _159 = (__int128 unsigned) _622;
  _160 = 0x200000000000000000000000000 - _159;
  _162 = (__int128 unsigned) _634;
  _163 = 0x1fffffffffffffffe0000000200 - _162;
  _165 = (__int128 unsigned) _646;
  _166 = 0x1fffffffffffffffe0000000200 - _165;
  sign.18_47 = sign;
  _48 = (__int128 unsigned) sign.18_47;
  _49 = _48 + 0xffffffffffffffffffffffffffffffff;
  mask64_141 = (const u64) _49;
  _461 = mask64_141 & _610;
  _369 = (__int128 unsigned) _461;
  _302 = -_48;
  _312 = _157 & _302;
  _322 = _312 | _369;
  MEM[(limb *)&ftmp] = _322;
  _85 = mask64_141 & _622;
  _77 = (__int128 unsigned) _85;
  _517 = _160 & _302;
  _518 = _77 | _517;
  MEM[(limb *)&ftmp + 16B] = _518;
  _527 = mask64_141 & _634;
  _528 = (__int128 unsigned) _527;
  _533 = _163 & _302;
  _534 = _528 | _533;
  MEM[(limb *)&ftmp + 32B] = _534;
  _543 = mask64_141 & _646;
  _544 = (__int128 unsigned) _543;
  _549 = _166 & _302;
  _550 = _544 | _549;
  MEM[(limb *)&ftmp + 48B] = _550;
  felem_contract (&tmp[1], &ftmp);
  if (skip_462 == 0)
    goto <bb 36>; [33.00%]
  else
    goto <bb 37>; [67.00%]

  <bb 36> [local count: 70866975]:
  point_add (&nq[0], &nq[1], &nq[2], &nq[0], &nq[1], &nq[2], mixed_100(D), &tmp[0], &tmp[1], &tmp[2]);
  goto <bb 38>; [100.00%]

  <bb 37> [local count: 143881440]:
  _201 = MEM[(const u64 *)&tmp];
  _202 = (__int128 unsigned) _201;
  MEM[(limb *)&nq] = _202;
  _203 = MEM[(const u64 *)&tmp + 8B];
  _204 = (__int128 unsigned) _203;
  MEM[(limb *)&nq + 16B] = _204;
  _205 = MEM[(const u64 *)&tmp + 16B];
  _206 = (__int128 unsigned) _205;
  MEM[(limb *)&nq + 32B] = _206;
  _207 = MEM[(const u64 *)&tmp + 24B];
  _208 = (__int128 unsigned) _207;
  MEM[(limb *)&nq + 48B] = _208;
  _193 = MEM[(const u64 *)&tmp + 32B];
  _194 = (__int128 unsigned) _193;
  MEM[(limb *)&nq + 64B] = _194;
  _195 = MEM[(const u64 *)&tmp + 40B];
  _196 = (__int128 unsigned) _195;
  MEM[(limb *)&nq + 80B] = _196;
  _197 = MEM[(const u64 *)&tmp + 48B];
  _198 = (__int128 unsigned) _197;
  MEM[(limb *)&nq + 96B] = _198;
  _199 = MEM[(const u64 *)&tmp + 56B];
  _200 = (__int128 unsigned) _199;
  MEM[(limb *)&nq + 112B] = _200;
  _185 = MEM[(const u64 *)&tmp + 64B];
  _186 = (__int128 unsigned) _185;
  MEM[(limb *)&nq + 128B] = _186;
  _187 = MEM[(const u64 *)&tmp + 72B];
  _188 = (__int128 unsigned) _187;
  MEM[(limb *)&nq + 144B] = _188;
  _189 = MEM[(const u64 *)&tmp + 80B];
  _190 = (__int128 unsigned) _189;
  MEM[(limb *)&nq + 160B] = _190;
  _191 = MEM[(const u64 *)&tmp + 88B];
  _192 = (__int128 unsigned) _191;
  MEM[(limb *)&nq + 176B] = _192;

  <bb 38> [local count: 214748416]:
  ivtmp.153_653 = ivtmp.153_665 + 1632;
  ivtmp.155_617 = ivtmp.155_629 + 32;
  if (_511 != ivtmp.155_617)
    goto <bb 24>; [89.00%]
  else
    goto <bb 40>; [11.00%]

  <bb 39> [local count: 115899681]:
  if (_1650 >= 0)
    goto <bb 5>; [98.53%]
  else
    goto <bb 19>; [1.47%]

  <bb 40> [local count: 23622326]:
  if (_1650 >= 0)
    goto <bb 6>; [32.62%]
  else
    goto <bb 19>; [67.38%]

  <bb 41> [local count: 73014462]:
  _1617 = (void *) ivtmp.155_629;
  _1616 = MEM[base: _1617, offset: 0B];
  _531 = (int) _1616;
  _359 = _531 >> _1484;
  _338 = (char) _359;
  _508 = _338 & 1;
  _27 = (int) _508;
  _28 = _27 << 1;
  _43 = _28 | prephitmp_1498;
  _29 = _43 | prephitmp_1503;
  _643 = _29 | prephitmp_1508;
  goto <bb 32>; [100.00%]

}



;; Function ec_GFp_nistp256_points_mul (ec_GFp_nistp256_points_mul, funcdef_no=450, decl_uid=10105, cgraph_uid=450, symbol_order=458)

ec_GFp_nistp256_points_mul (const struct EC_GROUP * group, struct EC_POINT * r, const struct BIGNUM * scalar, size_t num, const struct EC_POINT * * points, const struct BIGNUM * * scalars, struct BN_CTX * ctx)
{
  unsigned long ivtmp.317;
  unsigned long ivtmp.315;
  unsigned long ivtmp.307;
  unsigned long ivtmp.305;
  unsigned long ivtmp.297;
  unsigned long ivtmp.295;
  unsigned long ivtmp.285;
  unsigned int ivtmp.283;
  unsigned long ivtmp.276;
  unsigned long ivtmp.264;
  unsigned int ivtmp.262;
  unsigned long ivtmp.257;
  unsigned long ivtmp.255;
  unsigned long ivtmp.247;
  unsigned long ivtmp.245;
  unsigned long ivtmp.237;
  unsigned long ivtmp.235;
  const vector(2) long unsigned int vect__345.226;
  const vector(2) long unsigned int vect__345.225;
  const vector(2) long unsigned int vect__332.220;
  const vector(2) long unsigned int vect__332.219;
  const vector(2) long unsigned int vect__319.214;
  const vector(2) long unsigned int vect__319.213;
  const vector(2) long unsigned int vect__258.208;
  const vector(2) long unsigned int vect__258.207;
  const vector(2) long unsigned int vect__245.202;
  const vector(2) long unsigned int vect__245.201;
  const vector(2) long unsigned int vect__232.196;
  const vector(2) long unsigned int vect__232.195;
  u8 b_in[32];
  u8 b_out[32];
  u8 b_in[32];
  u8 b_out[32];
  u8 b_in[32];
  u8 b_out[32];
  limb felem_x_out[4];
  limb felem_y_out[4];
  limb felem_z_out[4];
  limb felem_x_in[4];
  limb felem_y_in[4];
  limb felem_z_in[4];
  limb felem_x3[4];
  limb felem_y3[4];
  limb felem_z3[4];
  limb felem_x1[4];
  limb felem_y1[4];
  limb felem_z1[4];
  u8 b_in[32];
  u8 b_out[32];
  u8 b_in[32];
  u8 b_out[32];
  u8 b_in[32];
  u8 b_out[32];
  const struct BIGNUM * p_scalar;
  const struct EC_POINT * p;
  struct EC_POINT * generator;
  const u64[16][3][4] * g_pre_comp;
  struct NISTP256_PRE_COMP * pre;
  limb z_out[4];
  limb y_out[4];
  limb x_out[4];
  u64 z_in[4];
  u64 y_in[4];
  u64 x_in[4];
  size_t num_points;
  unsigned int num_bytes;
  unsigned int i;
  u8 tmp[32];
  u64[4] * tmp_smallfelems;
  u64[17][3][4] * pre_comp;
  u8[32] * secrets;
  u8 g_secret[32];
  struct BIGNUM * tmp_scalar;
  struct BIGNUM * z;
  struct BIGNUM * y;
  struct BIGNUM * x;
  int mixed;
  int j;
  int ret;
  int _7;
  struct EC_POINT * _8;
  int _9;
  long unsigned int _12;
  long unsigned int _13;
  _Bool _14;
  _Bool _15;
  _Bool _16;
  long unsigned int _20;
  const struct EC_POINT * * _21;
  const struct BIGNUM * * _22;
  _Bool _23;
  _Bool _24;
  _Bool _25;
  int _26;
  int _27;
  struct BIGNUM * _28;
  int _29;
  int _30;
  int _31;
  long unsigned int _32;
  struct BIGNUM * _33;
  int _34;
  struct BIGNUM * _35;
  int _36;
  struct BIGNUM * _37;
  int _38;
  long unsigned int _39;
  u64[17][3][4] * _40;
  u64[4] * _41;
  u64[4] * _42;
  u64[4] * _43;
  int _44;
  int _52;
  u64[4] * _53;
  u64[4] * _54;
  u64[4] * _55;
  long unsigned int _59;
  long unsigned int _60;
  _Bool _61;
  _Bool _63;
  int _64;
  int _65;
  struct BIGNUM * _66;
  int _67;
  int _68;
  int _69;
  unsigned int _70;
  unsigned int _71;
  unsigned long _90;
  void * _92;
  void * _93;
  sizetype _206;
  sizetype _210;
  const u8 * _211;
  unsigned char _214;
  sizetype _219;
  const u8 * _220;
  unsigned char _223;
  unsigned char _242;
  struct BIGNUM * _244;
  unsigned char _255;
  struct BIGNUM * _257;
  unsigned char _268;
  struct BIGNUM * _270;
  long unsigned int _271;
  __int128 unsigned _272;
  long unsigned int _273;
  __int128 unsigned _274;
  long unsigned int _275;
  __int128 unsigned _276;
  long unsigned int _277;
  __int128 unsigned _278;
  long unsigned int _279;
  __int128 unsigned _280;
  long unsigned int _281;
  __int128 unsigned _282;
  long unsigned int _283;
  __int128 unsigned _284;
  long unsigned int _285;
  __int128 unsigned _286;
  long unsigned int _287;
  __int128 unsigned _288;
  long unsigned int _289;
  __int128 unsigned _290;
  long unsigned int _291;
  __int128 unsigned _292;
  long unsigned int _293;
  __int128 unsigned _294;
  long unsigned int _295;
  __int128 unsigned _296;
  long unsigned int _297;
  __int128 unsigned _298;
  long unsigned int _299;
  __int128 unsigned _300;
  long unsigned int _301;
  __int128 unsigned _302;
  long unsigned int _303;
  __int128 unsigned _304;
  long unsigned int _305;
  __int128 unsigned _306;
  long unsigned int _307;
  __int128 unsigned _308;
  long unsigned int _309;
  __int128 unsigned _310;
  long unsigned int _311;
  __int128 unsigned _312;
  long unsigned int _313;
  __int128 unsigned _314;
  long unsigned int _315;
  __int128 unsigned _316;
  long unsigned int _317;
  __int128 unsigned _318;
  unsigned char _329;
  struct BIGNUM * _331;
  unsigned char _342;
  struct BIGNUM * _344;
  _Bool _349;
  unsigned char _355;
  struct BIGNUM * _357;
  sizetype _360;
  unsigned long _367;
  void * _373;
  void * _374;
  unsigned long _438;
  void * _439;
  void * _445;
  unsigned long _464;
  void * _465;
  void * _466;
  _Bool _497;
  long unsigned int _501;
  sizetype _504;
  sizetype _506;
  _Bool _508;
  unsigned long _517;
  void * _530;
  void * _531;
  void * _539;
  u8 * _540;
  u64[17][3][4] * _547;
  unsigned long _548;
  u64[17][3][4] * _549;
  unsigned long _550;
  u64[4] * _551;
  unsigned long _552;
  u64[4] * _553;
  unsigned long _554;
  u64[4] * _555;
  unsigned long _556;
  u64[17][3][4] * _557;
  void * _571;
  unsigned int _582;
  unsigned long _589;
  void * _590;
  _Bool prephitmp_591;
  long unsigned int _592;
  long unsigned int _593;
  void * _594;
  unsigned int _603;
  u64[17][3][4] * _656;

  <bb 2> [local count: 172801983]:
  BN_CTX_start (ctx_117(D));
  x_120 = BN_CTX_get (ctx_117(D));
  y_122 = BN_CTX_get (ctx_117(D));
  z_124 = BN_CTX_get (ctx_117(D));
  tmp_scalar_126 = BN_CTX_get (ctx_117(D));
  if (tmp_scalar_126 == 0B)
    goto <bb 3>; [18.09%]
  else
    goto <bb 4>; [81.91%]

  <bb 3> [local count: 61924976]:
  goto <bb 72>; [100.00%]

  <bb 4> [local count: 141542105]:
  if (scalar_127(D) != 0B)
    goto <bb 5>; [70.00%]
  else
    goto <bb 76>; [30.00%]

  <bb 5> [local count: 99079473]:
  pre_129 = group_128(D)->pre_comp.nistp256;
  if (pre_129 != 0B)
    goto <bb 6>; [70.00%]
  else
    goto <bb 7>; [30.00%]

  <bb 6> [local count: 69355631]:
  g_pre_comp_130 = &pre_129->g_pre_comp;

  <bb 7> [local count: 99079473]:
  # g_pre_comp_91 = PHI <g_pre_comp_130(6), &gmul[0](5)>
  generator_132 = EC_POINT_new (group_128(D));
  if (generator_132 == 0B)
    goto <bb 3>; [30.95%]
  else
    goto <bb 8>; [69.05%]

  <bb 8> [local count: 68414376]:
  vect__232.195_648 = MEM[(const u64 *)g_pre_comp_91 + 96B];
  vect__232.196_646 = MEM[(const u64 *)g_pre_comp_91 + 112B];
  MEM[(u64 *)&b_in] = vect__232.195_648;
  MEM[(u64 *)&b_in + 16B] = vect__232.196_646;
  ivtmp.315_141 = (unsigned long) &MEM[(void *)&b_in + 31B];
  ivtmp.317_98 = (unsigned long) &b_out;
  _90 = (unsigned long) &b_in;

  <bb 9> [local count: 553534497]:
  # ivtmp.315_143 = PHI <ivtmp.315_141(8), ivtmp.315_142(9)>
  # ivtmp.317_107 = PHI <ivtmp.317_98(8), ivtmp.317_99(9)>
  _93 = (void *) ivtmp.315_143;
  _242 = MEM[base: _93, offset: 0B];
  _92 = (void *) ivtmp.317_107;
  MEM[base: _92, offset: 0B] = _242;
  ivtmp.315_142 = ivtmp.315_143 + 18446744073709551615;
  ivtmp.317_99 = ivtmp.317_107 + 1;
  if (_90 != ivtmp.315_143)
    goto <bb 9>; [87.64%]
  else
    goto <bb 10>; [12.36%]

  <bb 10> [local count: 68414376]:
  _244 = BN_bin2bn (&b_out, 32, x_120);
  b_in ={v} {CLOBBER};
  b_out ={v} {CLOBBER};
  if (_244 == 0B)
    goto <bb 11>; [18.09%]
  else
    goto <bb 12>; [81.91%]

  <bb 11> [local count: 41695902]:
  ERR_put_error (16, 231, 3, "ecp_nistp256.c", 2068);
  goto <bb 72>; [100.00%]

  <bb 12> [local count: 56038215]:
  vect__245.201_641 = MEM[(const u64 *)g_pre_comp_91 + 128B];
  vect__245.202_639 = MEM[(const u64 *)g_pre_comp_91 + 144B];
  MEM[(u64 *)&b_in] = vect__245.201_641;
  MEM[(u64 *)&b_in + 16B] = vect__245.202_639;
  ivtmp.305_511 = (unsigned long) &MEM[(void *)&b_in + 31B];
  ivtmp.307_468 = (unsigned long) &b_out;
  _464 = (unsigned long) &b_in;

  <bb 13> [local count: 453400105]:
  # ivtmp.305_514 = PHI <ivtmp.305_511(12), ivtmp.305_512(13)>
  # ivtmp.307_482 = PHI <ivtmp.307_468(12), ivtmp.307_470(13)>
  _466 = (void *) ivtmp.305_514;
  _255 = MEM[base: _466, offset: 0B];
  _465 = (void *) ivtmp.307_482;
  MEM[base: _465, offset: 0B] = _255;
  ivtmp.305_512 = ivtmp.305_514 + 18446744073709551615;
  ivtmp.307_470 = ivtmp.307_482 + 1;
  if (_464 != ivtmp.305_514)
    goto <bb 13>; [87.64%]
  else
    goto <bb 14>; [12.36%]

  <bb 14> [local count: 56038215]:
  _257 = BN_bin2bn (&b_out, 32, y_122);
  b_in ={v} {CLOBBER};
  b_out ={v} {CLOBBER};
  if (_257 == 0B)
    goto <bb 11>; [30.95%]
  else
    goto <bb 15>; [69.05%]

  <bb 15> [local count: 38694388]:
  vect__258.207_634 = MEM[(const u64 *)g_pre_comp_91 + 160B];
  vect__258.208_632 = MEM[(const u64 *)g_pre_comp_91 + 176B];
  MEM[(u64 *)&b_in] = vect__258.207_634;
  MEM[(u64 *)&b_in + 16B] = vect__258.208_632;
  ivtmp.295_536 = (unsigned long) &MEM[(void *)&b_in + 31B];
  ivtmp.297_532 = (unsigned long) &b_out;
  _517 = (unsigned long) &b_in;

  <bb 16> [local count: 313072771]:
  # ivtmp.295_538 = PHI <ivtmp.295_536(15), ivtmp.295_537(16)>
  # ivtmp.297_534 = PHI <ivtmp.297_532(15), ivtmp.297_533(16)>
  _531 = (void *) ivtmp.295_538;
  _268 = MEM[base: _531, offset: 0B];
  _530 = (void *) ivtmp.297_534;
  MEM[base: _530, offset: 0B] = _268;
  ivtmp.295_537 = ivtmp.295_538 + 18446744073709551615;
  ivtmp.297_533 = ivtmp.297_534 + 1;
  if (_517 != ivtmp.295_538)
    goto <bb 16>; [87.64%]
  else
    goto <bb 17>; [12.36%]

  <bb 17> [local count: 38694387]:
  _270 = BN_bin2bn (&b_out, 32, z_124);
  b_in ={v} {CLOBBER};
  b_out ={v} {CLOBBER};
  if (_270 == 0B)
    goto <bb 11>; [30.95%]
  else
    goto <bb 18>; [69.05%]

  <bb 18> [local count: 26718475]:
  _7 = EC_POINT_set_Jprojective_coordinates_GFp (group_128(D), generator_132, x_120, y_122, z_124, ctx_117(D));
  if (_7 == 0)
    goto <bb 72>; [51.12%]
  else
    goto <bb 19>; [48.88%]

  <bb 19> [local count: 13059990]:
  _8 = group_128(D)->generator;
  _9 = EC_POINT_cmp (group_128(D), generator_132, _8, ctx_117(D));
  if (_9 == 0)
    goto <bb 75>; [50.00%]
  else
    goto <bb 20>; [50.00%]

  <bb 20> [local count: 6529995]:
  num_points_138 = num_115(D) + 1;
  goto <bb 76>; [100.00%]

  <bb 21> [local count: 27761311]:
  # num_points_187 = PHI <num_115(D)(75), num_points_481(76)>
  # g_pre_comp_381 = PHI <g_pre_comp_91(75), g_pre_comp_480(76)>
  # generator_372 = PHI <generator_132(75), generator_476(76)>
  # prephitmp_591 = PHI <1(75), 0(76)>
  _592 = num_points_187 * 32;
  _593 = num_points_187 * 1632;
  if (num_points_187 > 2)
    goto <bb 74>; [50.00%]
  else
    goto <bb 73>; [50.00%]

  <bb 22> [local count: 11319206]:
  if (tmp_smallfelems_145 == 0B)
    goto <bb 23>; [100.00%]
  else
    goto <bb 24>; [0.00%]

  <bb 23> [local count: 16938095]:
  # tmp_smallfelems_444 = PHI <tmp_smallfelems_145(22), 0B(73), tmp_smallfelems_145(74)>
  # secrets_477 = PHI <secrets_493(22), secrets_486(73), secrets_493(74)>
  # pre_comp_471 = PHI <pre_comp_496(22), pre_comp_489(73), pre_comp_496(74)>
  ERR_put_error (16, 231, 65, "ecp_nistp256.c", 2100);
  goto <bb 72>; [100.00%]

  <bb 24> [local count: 10823216]:
  # tmp_smallfelems_103 = PHI <tmp_smallfelems_145(22), 0B(73)>
  # mixed_478 = PHI <1(22), 0(73)>
  # secrets_134 = PHI <secrets_493(22), secrets_486(73)>
  # pre_comp_472 = PHI <pre_comp_496(22), pre_comp_489(73)>
  __builtin_memset (secrets_134, 0, _592);
  __builtin_memset (pre_comp_472, 0, _593);

  <bb 25> [local count: 221087119]:
  # _501 = PHI <0(24), _59(29)>
  # i_76 = PHI <0(24), i_169(29)>
  if (num_115(D) == _501)
    goto <bb 26>; [20.24%]
  else
    goto <bb 27>; [79.76%]

  <bb 26> [local count: 44748033]:
  p_147 = EC_GROUP_get0_generator (group_128(D));
  goto <bb 28>; [100.00%]

  <bb 27> [local count: 176339086]:
  _20 = _501 * 8;
  _21 = points_148(D) + _20;
  p_149 = *_21;
  _22 = scalars_150(D) + _20;
  p_scalar_151 = *_22;

  <bb 28> [local count: 221087119]:
  # p_95 = PHI <p_147(26), p_149(27)>
  # p_scalar_96 = PHI <scalar_127(D)(26), p_scalar_151(27)>
  _23 = p_scalar_96 != 0B;
  _24 = p_95 != 0B;
  _25 = _23 & _24;
  if (_25 != 0)
    goto <bb 30>; [33.00%]
  else
    goto <bb 29>; [67.00%]

  <bb 29> [local count: 215237238]:
  i_169 = i_76 + 1;
  _59 = (long unsigned int) i_169;
  if (_59 < num_points_187)
    goto <bb 25>; [97.80%]
  else
    goto <bb 47>; [2.20%]

  <bb 30> [local count: 72958749]:
  _26 = BN_num_bits (p_scalar_96);
  if (_26 > 256)
    goto <bb 31>; [27.00%]
  else
    goto <bb 32>; [73.00%]

  <bb 31> [local count: 55382987]:
  _28 = group_128(D)->order;
  _29 = BN_nnmod (tmp_scalar_126, p_scalar_96, _28, ctx_117(D));
  if (_29 == 0)
    goto <bb 33>; [2.20%]
  else
    goto <bb 34>; [97.80%]

  <bb 32> [local count: 53259887]:
  _27 = BN_is_negative (p_scalar_96);
  if (_27 != 0)
    goto <bb 31>; [67.00%]
  else
    goto <bb 35>; [33.00%]

  <bb 33> [local count: 1218426]:
  ERR_put_error (16, 231, 3, "ecp_nistp256.c", 2134);
  goto <bb 72>; [100.00%]

  <bb 34> [local count: 54164561]:
  _30 = BN_bn2bin (tmp_scalar_126, &tmp);
  num_bytes_159 = (unsigned int) _30;
  goto <bb 36>; [100.00%]

  <bb 35> [local count: 17575763]:
  _31 = BN_bn2bin (p_scalar_96, &tmp);
  num_bytes_155 = (unsigned int) _31;

  <bb 36> [local count: 71740324]:
  # num_bytes_87 = PHI <num_bytes_159(34), num_bytes_155(35)>
  _32 = _501 * 32;
  if (num_bytes_87 != 0)
    goto <bb 38>; [89.00%]
  else
    goto <bb 37>; [11.00%]

  <bb 37> [local count: 71740323]:
  _33 = p_95->X;
  _34 = BN_to_felem (&x_out, _33);
  if (_34 == 0)
    goto <bb 72>; [2.20%]
  else
    goto <bb 40>; [97.80%]

  <bb 38> [local count: 63848888]:
  _603 = num_bytes_87 + 4294967295;
  _540 = secrets_134 + _32;
  ivtmp.285_541 = (unsigned long) _540;

  <bb 39> [local count: 580444434]:
  # ivtmp.283_546 = PHI <_603(38), ivtmp.283_545(39)>
  # ivtmp.285_543 = PHI <ivtmp.285_541(38), ivtmp.285_542(39)>
  _210 = (sizetype) ivtmp.283_546;
  _211 = &tmp + _210;
  _214 = *_211;
  _539 = (void *) ivtmp.285_543;
  MEM[base: _539, offset: 0B] = _214;
  ivtmp.283_545 = ivtmp.283_546 + 4294967295;
  ivtmp.285_542 = ivtmp.285_543 + 1;
  if (ivtmp.283_545 != 4294967295)
    goto <bb 39>; [89.00%]
  else
    goto <bb 37>; [11.00%]

  <bb 40> [local count: 70162036]:
  _35 = p_95->Y;
  _36 = BN_to_felem (&y_out, _35);
  if (_36 == 0)
    goto <bb 72>; [2.20%]
  else
    goto <bb 41>; [97.80%]

  <bb 41> [local count: 68618471]:
  _37 = p_95->Z;
  _38 = BN_to_felem (&z_out, _37);
  if (_38 == 0)
    goto <bb 72>; [2.20%]
  else
    goto <bb 42>; [97.80%]

  <bb 42> [local count: 67108865]:
  _39 = _501 * 1632;
  _40 = pre_comp_472 + _39;
  _41 = &*_40[1][0];
  felem_shrink (_41, &x_out);
  _42 = &*_40[1][1];
  felem_shrink (_42, &y_out);
  _43 = &*_40[1][2];
  felem_shrink (_43, &z_out);
  _557 = _40 + 192;
  ivtmp.276_563 = (unsigned long) _557;

  <bb 43> [local count: 1006632960]:
  # j_513 = PHI <2(42), j_168(46)>
  # ivtmp.276_570 = PHI <ivtmp.276_563(42), ivtmp.276_564(46)>
  _44 = j_513 & 1;
  _548 = ivtmp.276_570 + 64;
  _547 = (u64[17][3][4] *) _548;
  _550 = ivtmp.276_570 + 32;
  _549 = (u64[17][3][4] *) _550;
  _656 = (u64[17][3][4] *) ivtmp.276_570;
  if (_44 != 0)
    goto <bb 44>; [50.00%]
  else
    goto <bb 45>; [50.00%]

  <bb 44> [local count: 503316480]:
  _552 = ivtmp.276_570 + 18446744073709551584;
  _551 = (u64[4] *) _552;
  _554 = ivtmp.276_570 + 18446744073709551552;
  _553 = (u64[4] *) _554;
  _556 = ivtmp.276_570 + 18446744073709551520;
  _555 = (u64[4] *) _556;
  _271 = MEM[(const u64 *)_40 + 96B];
  _272 = (__int128 unsigned) _271;
  MEM[(limb *)&felem_x1] = _272;
  _273 = MEM[(const u64 *)_40 + 104B];
  _274 = (__int128 unsigned) _273;
  MEM[(limb *)&felem_x1 + 16B] = _274;
  _275 = MEM[(const u64 *)_40 + 112B];
  _276 = (__int128 unsigned) _275;
  MEM[(limb *)&felem_x1 + 32B] = _276;
  _277 = MEM[(const u64 *)_40 + 120B];
  _278 = (__int128 unsigned) _277;
  MEM[(limb *)&felem_x1 + 48B] = _278;
  _279 = MEM[(const u64 *)_40 + 128B];
  _280 = (__int128 unsigned) _279;
  MEM[(limb *)&felem_y1] = _280;
  _281 = MEM[(const u64 *)_40 + 136B];
  _282 = (__int128 unsigned) _281;
  MEM[(limb *)&felem_y1 + 16B] = _282;
  _283 = MEM[(const u64 *)_40 + 144B];
  _284 = (__int128 unsigned) _283;
  MEM[(limb *)&felem_y1 + 32B] = _284;
  _285 = MEM[(const u64 *)_40 + 152B];
  _286 = (__int128 unsigned) _285;
  MEM[(limb *)&felem_y1 + 48B] = _286;
  _287 = MEM[(const u64 *)_40 + 160B];
  _288 = (__int128 unsigned) _287;
  MEM[(limb *)&felem_z1] = _288;
  _289 = MEM[(const u64 *)_40 + 168B];
  _290 = (__int128 unsigned) _289;
  MEM[(limb *)&felem_z1 + 16B] = _290;
  _291 = MEM[(const u64 *)_40 + 176B];
  _292 = (__int128 unsigned) _291;
  MEM[(limb *)&felem_z1 + 32B] = _292;
  _293 = MEM[(const u64 *)_40 + 184B];
  _294 = (__int128 unsigned) _293;
  MEM[(limb *)&felem_z1 + 48B] = _294;
  point_add (&felem_x3, &felem_y3, &felem_z3, &felem_x1, &felem_y1, &felem_z1, 0, _555, _553, _551);
  felem_shrink (_656, &felem_x3);
  felem_shrink (_549, &felem_y3);
  felem_shrink (_547, &felem_z3);
  felem_x3 ={v} {CLOBBER};
  felem_y3 ={v} {CLOBBER};
  felem_z3 ={v} {CLOBBER};
  felem_x1 ={v} {CLOBBER};
  felem_y1 ={v} {CLOBBER};
  felem_z1 ={v} {CLOBBER};
  goto <bb 46>; [100.00%]

  <bb 45> [local count: 503316480]:
  _52 = j_513 >> 1;
  _504 = (sizetype) _52;
  _506 = _504 * 96;
  _206 = _506 + 64;
  _53 = _40 + _206;
  _360 = _506 + 32;
  _54 = _40 + _360;
  _55 = _40 + _506;
  _295 = MEM[(const u64 *)_55];
  _296 = (__int128 unsigned) _295;
  MEM[(limb *)&felem_x_in] = _296;
  _297 = MEM[(const u64 *)_55 + 8B];
  _298 = (__int128 unsigned) _297;
  MEM[(limb *)&felem_x_in + 16B] = _298;
  _299 = MEM[(const u64 *)_55 + 16B];
  _300 = (__int128 unsigned) _299;
  MEM[(limb *)&felem_x_in + 32B] = _300;
  _301 = MEM[(const u64 *)_55 + 24B];
  _302 = (__int128 unsigned) _301;
  MEM[(limb *)&felem_x_in + 48B] = _302;
  _303 = MEM[(const u64 *)_54];
  _304 = (__int128 unsigned) _303;
  MEM[(limb *)&felem_y_in] = _304;
  _305 = MEM[(const u64 *)_54 + 8B];
  _306 = (__int128 unsigned) _305;
  MEM[(limb *)&felem_y_in + 16B] = _306;
  _307 = MEM[(const u64 *)_54 + 16B];
  _308 = (__int128 unsigned) _307;
  MEM[(limb *)&felem_y_in + 32B] = _308;
  _309 = MEM[(const u64 *)_54 + 24B];
  _310 = (__int128 unsigned) _309;
  MEM[(limb *)&felem_y_in + 48B] = _310;
  _311 = MEM[(const u64 *)_53];
  _312 = (__int128 unsigned) _311;
  MEM[(limb *)&felem_z_in] = _312;
  _313 = MEM[(const u64 *)_53 + 8B];
  _314 = (__int128 unsigned) _313;
  MEM[(limb *)&felem_z_in + 16B] = _314;
  _315 = MEM[(const u64 *)_53 + 16B];
  _316 = (__int128 unsigned) _315;
  MEM[(limb *)&felem_z_in + 32B] = _316;
  _317 = MEM[(const u64 *)_53 + 24B];
  _318 = (__int128 unsigned) _317;
  MEM[(limb *)&felem_z_in + 48B] = _318;
  point_double (&felem_x_out, &felem_y_out, &felem_z_out, &felem_x_in, &felem_y_in, &felem_z_in);
  felem_shrink (_656, &felem_x_out);
  felem_shrink (_549, &felem_y_out);
  felem_shrink (_547, &felem_z_out);
  felem_x_out ={v} {CLOBBER};
  felem_y_out ={v} {CLOBBER};
  felem_z_out ={v} {CLOBBER};
  felem_x_in ={v} {CLOBBER};
  felem_y_in ={v} {CLOBBER};
  felem_z_in ={v} {CLOBBER};

  <bb 46> [local count: 1006632960]:
  j_168 = j_513 + 1;
  ivtmp.276_564 = ivtmp.276_570 + 96;
  if (j_168 != 17)
    goto <bb 43>; [93.33%]
  else
    goto <bb 29>; [6.67%]

  <bb 47> [local count: 4973330]:
  if (mixed_478 != 0)
    goto <bb 48>; [33.00%]
  else
    goto <bb 49>; [67.00%]

  <bb 48> [local count: 1641199]:
  _60 = num_points_187 * 17;
  ec_GFp_nistp_points_make_affine_internal (_60, pre_comp_472, 32, tmp_smallfelems_103, smallfelem_one, smallfelem_is_zero_int, smallfelem_assign, smallfelem_square_contract, smallfelem_mul_contract, smallfelem_inv_contract, smallfelem_assign);

  <bb 49> [local count: 9837325]:
  # mixed_78 = PHI <mixed_478(48), mixed_478(47)>
  _61 = scalar_127(D) != 0B;
  _63 = _61 & prephitmp_591;
  if (_63 != 0)
    goto <bb 50>; [100.00%]
  else
    goto <bb 60>; [0.00%]

  <bb 50> [local count: 16367320]:
  # mixed_469 = PHI <mixed_78(49), _9(75)>
  # secrets_73 = PHI <secrets_134(49), 0B(75)>
  # pre_comp_5 = PHI <pre_comp_472(49), 0B(75)>
  # tmp_smallfelems_6 = PHI <tmp_smallfelems_103(49), 0B(75)>
  # num_points_463 = PHI <num_points_187(49), num_115(D)(75)>
  # g_pre_comp_2 = PHI <g_pre_comp_381(49), g_pre_comp_91(75)>
  # generator_74 = PHI <generator_372(49), generator_132(75)>
  __builtin_memset (&g_secret, 0, 32);
  _64 = BN_num_bits (scalar_127(D));
  if (_64 > 256)
    goto <bb 51>; [50.00%]
  else
    goto <bb 52>; [50.00%]

  <bb 51> [local count: 13666713]:
  _66 = group_128(D)->order;
  _67 = BN_nnmod (tmp_scalar_126, scalar_127(D), _66, ctx_117(D));
  if (_67 == 0)
    goto <bb 53>; [34.00%]
  else
    goto <bb 54>; [66.00%]

  <bb 52> [local count: 8183660]:
  _65 = BN_is_negative (scalar_127(D));
  if (_65 != 0)
    goto <bb 51>; [67.00%]
  else
    goto <bb 55>; [33.00%]

  <bb 53> [local count: 4646682]:
  ERR_put_error (16, 231, 3, "ecp_nistp256.c", 2182);
  goto <bb 72>; [100.00%]

  <bb 54> [local count: 9020030]:
  _68 = BN_bn2bin (tmp_scalar_126, &tmp);
  num_bytes_179 = (unsigned int) _68;
  goto <bb 56>; [100.00%]

  <bb 55> [local count: 2700608]:
  _69 = BN_bn2bin (scalar_127(D), &tmp);
  num_bytes_175 = (unsigned int) _69;

  <bb 56> [local count: 11720638]:
  # num_bytes_88 = PHI <num_bytes_179(54), num_bytes_175(55)>
  if (num_bytes_88 != 0)
    goto <bb 58>; [89.00%]
  else
    goto <bb 57>; [11.00%]

  <bb 57> [local count: 11720638]:
  _70 = (unsigned int) num_points_463;
  batch_mul (&x_out, &y_out, &z_out, secrets_73, _70, &g_secret, mixed_469, pre_comp_5, g_pre_comp_2);
  goto <bb 61>; [100.00%]

  <bb 58> [local count: 10431368]:
  _582 = num_bytes_88 + 4294967295;
  ivtmp.264_577 = (unsigned long) &g_secret;

  <bb 59> [local count: 94830617]:
  # ivtmp.262_587 = PHI <_582(58), ivtmp.262_581(59)>
  # ivtmp.264_579 = PHI <ivtmp.264_577(58), ivtmp.264_578(59)>
  _219 = (sizetype) ivtmp.262_587;
  _220 = &tmp + _219;
  _223 = *_220;
  _571 = (void *) ivtmp.264_579;
  MEM[base: _571, offset: 0B] = _223;
  ivtmp.262_581 = ivtmp.262_587 + 4294967295;
  ivtmp.264_578 = ivtmp.264_579 + 1;
  if (ivtmp.262_581 != 4294967295)
    goto <bb 59>; [89.00%]
  else
    goto <bb 57>; [11.00%]

  <bb 60> [local count: 16367320]:
  # mixed_467 = PHI <mixed_78(49), 0(76)>
  # secrets_462 = PHI <secrets_134(49), 0B(76)>
  # pre_comp_3 = PHI <pre_comp_472(49), 0B(76)>
  # tmp_smallfelems_390 = PHI <tmp_smallfelems_103(49), 0B(76)>
  # num_points_133 = PHI <num_points_187(49), num_points_481(76)>
  # generator_474 = PHI <generator_372(49), generator_476(76)>
  _71 = (unsigned int) num_points_133;
  batch_mul (&x_out, &y_out, &z_out, secrets_462, _71, 0B, mixed_467, pre_comp_3, 0B);

  <bb 61> [local count: 28087958]:
  # secrets_166 = PHI <secrets_73(57), secrets_462(60)>
  # pre_comp_1 = PHI <pre_comp_5(57), pre_comp_3(60)>
  # tmp_smallfelems_4 = PHI <tmp_smallfelems_6(57), tmp_smallfelems_390(60)>
  # generator_473 = PHI <generator_74(57), generator_474(60)>
  felem_contract (&x_in, &x_out);
  felem_contract (&y_in, &y_out);
  felem_contract (&z_in, &z_out);
  vect__319.213_628 = MEM[(const u64 *)&x_in];
  vect__319.214_626 = MEM[(const u64 *)&x_in + 16B];
  MEM[(u64 *)&b_in] = vect__319.213_628;
  MEM[(u64 *)&b_in + 16B] = vect__319.214_626;
  ivtmp.255_599 = (unsigned long) &MEM[(void *)&b_in + 31B];
  ivtmp.257_595 = (unsigned long) &b_out;
  _589 = (unsigned long) &b_in;

  <bb 62> [local count: 227257118]:
  # ivtmp.255_365 = PHI <ivtmp.255_599(61), ivtmp.255_364(62)>
  # ivtmp.257_597 = PHI <ivtmp.257_595(61), ivtmp.257_596(62)>
  _594 = (void *) ivtmp.255_365;
  _329 = MEM[base: _594, offset: 0B];
  _590 = (void *) ivtmp.257_597;
  MEM[base: _590, offset: 0B] = _329;
  ivtmp.255_364 = ivtmp.255_365 + 18446744073709551615;
  ivtmp.257_596 = ivtmp.257_597 + 1;
  if (ivtmp.255_365 != _589)
    goto <bb 62>; [87.64%]
  else
    goto <bb 63>; [12.36%]

  <bb 63> [local count: 28087958]:
  _331 = BN_bin2bn (&b_out, 32, x_120);
  b_in ={v} {CLOBBER};
  b_out ={v} {CLOBBER};
  if (_331 == 0B)
    goto <bb 64>; [18.09%]
  else
    goto <bb 65>; [81.91%]

  <bb 64> [local count: 17118518]:
  ERR_put_error (16, 231, 3, "ecp_nistp256.c", 2205);
  goto <bb 72>; [100.00%]

  <bb 65> [local count: 23006847]:
  vect__332.219_622 = MEM[(const u64 *)&y_in];
  vect__332.220_620 = MEM[(const u64 *)&y_in + 16B];
  MEM[(u64 *)&b_in] = vect__332.219_622;
  MEM[(u64 *)&b_in + 16B] = vect__332.220_620;
  ivtmp.245_384 = (unsigned long) &MEM[(void *)&b_in + 31B];
  ivtmp.247_375 = (unsigned long) &b_out;
  _367 = (unsigned long) &b_in;

  <bb 66> [local count: 186146304]:
  # ivtmp.245_436 = PHI <ivtmp.245_384(65), ivtmp.245_385(66)>
  # ivtmp.247_382 = PHI <ivtmp.247_375(65), ivtmp.247_376(66)>
  _374 = (void *) ivtmp.245_436;
  _342 = MEM[base: _374, offset: 0B];
  _373 = (void *) ivtmp.247_382;
  MEM[base: _373, offset: 0B] = _342;
  ivtmp.245_385 = ivtmp.245_436 + 18446744073709551615;
  ivtmp.247_376 = ivtmp.247_382 + 1;
  if (_367 != ivtmp.245_436)
    goto <bb 66>; [87.64%]
  else
    goto <bb 67>; [12.36%]

  <bb 67> [local count: 23006847]:
  _344 = BN_bin2bn (&b_out, 32, y_122);
  b_in ={v} {CLOBBER};
  b_out ={v} {CLOBBER};
  if (_344 == 0B)
    goto <bb 64>; [30.95%]
  else
    goto <bb 68>; [69.05%]

  <bb 68> [local count: 15886228]:
  vect__345.225_610 = MEM[(const u64 *)&z_in];
  vect__345.226_608 = MEM[(const u64 *)&z_in + 16B];
  MEM[(u64 *)&b_in] = vect__345.225_610;
  MEM[(u64 *)&b_in + 16B] = vect__345.226_608;
  ivtmp.235_455 = (unsigned long) &MEM[(void *)&b_in + 31B];
  ivtmp.237_446 = (unsigned long) &b_out;
  _438 = (unsigned long) &b_in;

  <bb 69> [local count: 128534022]:
  # ivtmp.235_457 = PHI <ivtmp.235_455(68), ivtmp.235_456(69)>
  # ivtmp.237_448 = PHI <ivtmp.237_446(68), ivtmp.237_447(69)>
  _445 = (void *) ivtmp.235_457;
  _355 = MEM[base: _445, offset: 0B];
  _439 = (void *) ivtmp.237_448;
  MEM[base: _439, offset: 0B] = _355;
  ivtmp.235_456 = ivtmp.235_457 + 18446744073709551615;
  ivtmp.237_447 = ivtmp.237_448 + 1;
  if (_438 != ivtmp.235_457)
    goto <bb 69>; [87.64%]
  else
    goto <bb 70>; [12.36%]

  <bb 70> [local count: 15886227]:
  _357 = BN_bin2bn (&b_out, 32, z_124);
  b_in ={v} {CLOBBER};
  b_out ={v} {CLOBBER};
  if (_357 == 0B)
    goto <bb 64>; [30.95%]
  else
    goto <bb 71>; [69.05%]

  <bb 71> [local count: 10969440]:
  ret_190 = EC_POINT_set_Jprojective_coordinates_GFp (group_128(D), r_188(D), x_120, y_122, z_124, ctx_117(D));

  <bb 72> [local count: 172801981]:
  # ret_75 = PHI <_7(18), _36(40), 0(11), 0(3), 0(23), _29(33), _34(37), _67(53), 0(64), ret_190(71), _38(41)>
  # secrets_80 = PHI <0B(18), secrets_134(40), 0B(11), 0B(3), secrets_477(23), secrets_134(33), secrets_134(37), secrets_73(53), secrets_166(64), secrets_166(71), secrets_134(41)>
  # pre_comp_82 = PHI <0B(18), pre_comp_472(40), 0B(11), 0B(3), pre_comp_471(23), pre_comp_472(33), pre_comp_472(37), pre_comp_5(53), pre_comp_1(64), pre_comp_1(71), pre_comp_472(41)>
  # tmp_smallfelems_85 = PHI <0B(18), tmp_smallfelems_103(40), 0B(11), 0B(3), tmp_smallfelems_444(23), tmp_smallfelems_103(33), tmp_smallfelems_103(37), tmp_smallfelems_6(53), tmp_smallfelems_4(64), tmp_smallfelems_4(71), tmp_smallfelems_103(41)>
  # generator_94 = PHI <generator_132(18), generator_372(40), generator_132(11), 0B(3), generator_372(23), generator_372(33), generator_372(37), generator_74(53), generator_473(64), generator_473(71), generator_372(41)>
err:
  BN_CTX_end (ctx_117(D));
  EC_POINT_free (generator_94);
  CRYPTO_free (secrets_80, "ecp_nistp256.c", 2213);
  CRYPTO_free (pre_comp_82, "ecp_nistp256.c", 2214);
  CRYPTO_free (tmp_smallfelems_85, "ecp_nistp256.c", 2215);
  g_secret ={v} {CLOBBER};
  tmp ={v} {CLOBBER};
  x_in ={v} {CLOBBER};
  y_in ={v} {CLOBBER};
  z_in ={v} {CLOBBER};
  x_out ={v} {CLOBBER};
  y_out ={v} {CLOBBER};
  z_out ={v} {CLOBBER};
  return ret_75;

  <bb 73> [local count: 13880656]:
  secrets_486 = CRYPTO_malloc (_592, "ecp_nistp256.c", 2093);
  pre_comp_489 = CRYPTO_malloc (_593, "ecp_nistp256.c", 2094);
  _497 = secrets_486 == 0B;
  _349 = pre_comp_489 == 0B;
  _508 = _349 | _497;
  if (_508 != 0)
    goto <bb 23>; [22.03%]
  else
    goto <bb 24>; [77.97%]

  <bb 74> [local count: 13880655]:
  secrets_493 = CRYPTO_malloc (_592, "ecp_nistp256.c", 2093);
  pre_comp_496 = CRYPTO_malloc (_593, "ecp_nistp256.c", 2094);
  _12 = num_points_187 * 544;
  _13 = _12 + 32;
  tmp_smallfelems_145 = CRYPTO_malloc (_13, "ecp_nistp256.c", 2097);
  _14 = secrets_493 == 0B;
  _15 = pre_comp_496 == 0B;
  _16 = _14 | _15;
  if (_16 != 0)
    goto <bb 23>; [18.45%]
  else
    goto <bb 22>; [81.55%]

  <bb 75> [local count: 6529995]:
  if (num_115(D) != 0)
    goto <bb 21>; [0.00%]
  else
    goto <bb 50>; [100.00%]

  <bb 76> [local count: 48992626]:
  # num_points_481 = PHI <num_points_138(20), num_115(D)(4)>
  # g_pre_comp_480 = PHI <g_pre_comp_91(20), 0B(4)>
  # generator_476 = PHI <generator_132(20), 0B(4)>
  if (num_points_481 != 0)
    goto <bb 21>; [66.59%]
  else
    goto <bb 60>; [33.41%]

}



;; Function felem_small_mul (felem_small_mul, funcdef_no=421, decl_uid=10487, cgraph_uid=421, symbol_order=427)

__attribute__((used))
felem_small_mul (limb * out, const u64 * small1, const limb * in2)
{
  u64 low;
  u64 high;
  u64 mask;
  u64 b;
  u64 a;
  u64 small2[4];
  __int128 unsigned _8;
  __int128 unsigned _9;
  __int128 unsigned _10;
  __int128 unsigned _11;
  __int128 unsigned _12;
  __int128 unsigned _13;
  __int128 unsigned _14;
  __int128 unsigned _15;
  __int128 unsigned _16;
  __int128 unsigned _17;
  __int128 unsigned _18;
  __int128 unsigned _19;
  __int128 unsigned _21;
  __int128 unsigned _23;
  __int128 unsigned _24;
  __int128 unsigned _25;
  __int128 unsigned _28;
  __int128 unsigned _30;
  __int128 unsigned _31;
  __int128 unsigned _32;
  __int128 unsigned _33;
  __int128 unsigned _34;
  __int128 unsigned _35;
  __int128 unsigned _36;
  signed long low.0_40;
  signed long _41;
  signed long low.1_46;
  signed long _47;
  long unsigned int _49;
  __int128 unsigned _51;
  __int128 unsigned _52;
  long unsigned int _53;
  __int128 unsigned _54;
  __int128 unsigned _55;
  long unsigned int _56;
  __int128 unsigned _57;
  __int128 unsigned _58;
  __int128 unsigned _59;
  __int128 unsigned _60;
  long unsigned int _61;
  __int128 unsigned _62;
  __int128 unsigned _63;
  long unsigned int _64;
  __int128 unsigned _65;
  __int128 unsigned _66;
  long unsigned int _67;
  long unsigned int _68;
  __int128 unsigned _78;
  __int128 unsigned _79;

  <bb 2> [local count: 1073741825]:
  _8 = MEM[(const limb *)in2_2(D) + 48B];
  _9 = _8 + 18446744069414584320;
  _10 = MEM[(const limb *)in2_2(D) + 32B];
  _11 = _10 >> 64;
  _12 = _9 + _11;
  _13 = _10 & 18446744073709551615;
  _14 = _13 + 18446673704965373952;
  _15 = *in2_2(D);
  _16 = _15 + 18446744073709551615;
  _17 = MEM[(const limb *)in2_2(D) + 16B];
  _18 = _17 + 0x40000000000000000000ffffffff;
  _19 = _12 >> 64;
  a_20 = (u64) _19;
  _21 = _12 & 18446744073709551615;
  _23 = _19 << 32;
  _79 = _23 - _19;
  _24 = _21 + _79;
  _25 = _24 >> 64;
  a_26 = (u64) _25;
  b_27 = a_20 + a_26;
  _28 = _24 & 18446744073709551615;
  _30 = _25 << 32;
  _78 = _30 - _25;
  _31 = _28 + _78;
  _32 = (__int128 unsigned) b_27;
  _33 = _16 + _32;
  _34 = _32 << 32;
  _35 = _18 - _34;
  _36 = _31 >> 64;
  high_37 = (u64) _36;
  high_38 = -high_37;
  low_39 = (u64) _31;
  low.0_40 = (signed long) _31;
  _41 = low.0_40 >> 63;
  mask_42 = (u64) _41;
  low_43 = low_39 & 9223372036854775807;
  low_44 = low_43 + 9223372041149743103;
  low_45 = ~low_44;
  low.1_46 = (signed long) low_45;
  _47 = low.1_46 >> 63;
  low_48 = (u64) _47;
  _49 = mask_42 & low_48;
  mask_50 = high_38 | _49;
  _51 = (__int128 unsigned) mask_50;
  _52 = _33 - _51;
  _53 = mask_50 & 4294967295;
  _54 = (__int128 unsigned) _53;
  _55 = _35 - _54;
  _56 = mask_50 & 18446744069414584321;
  _57 = (__int128 unsigned) _56;
  _58 = _31 - _57;
  _59 = _52 >> 64;
  _60 = _55 + _59;
  _61 = (long unsigned int) _52;
  _62 = _60 >> 64;
  _63 = _14 + _62;
  _64 = (long unsigned int) _60;
  _65 = _63 >> 64;
  _66 = _58 + _65;
  _67 = (long unsigned int) _63;
  MEM[(u64 *)&small2] = _61;
  MEM[(u64 *)&small2 + 8B] = _64;
  MEM[(u64 *)&small2 + 16B] = _67;
  _68 = (long unsigned int) _66;
  MEM[(u64 *)&small2 + 24B] = _68;
  smallfelem_mul (out_4(D), small1_5(D), &small2);
  small2 ={v} {CLOBBER};
  return;

}



;; Function EC_GFp_nistp256_method (EC_GFp_nistp256_method, funcdef_no=442, decl_uid=8527, cgraph_uid=442, symbol_order=450)

EC_GFp_nistp256_method ()
{
  static const struct EC_METHOD ret = {.flags=1, .field_type=406, .group_init=ec_GFp_nistp256_group_init, .group_finish=ec_GFp_simple_group_finish, .group_clear_finish=ec_GFp_simple_group_clear_finish, .group_copy=ec_GFp_nist_group_copy, .group_set_curve=ec_GFp_nistp256_group_set_curve, .group_get_curve=ec_GFp_simple_group_get_curve, .group_get_degree=ec_GFp_simple_group_get_degree, .group_order_bits=ec_group_simple_order_bits, .group_check_discriminant=ec_GFp_simple_group_check_discriminant, .point_init=ec_GFp_simple_point_init, .point_finish=ec_GFp_simple_point_finish, .point_clear_finish=ec_GFp_simple_point_clear_finish, .point_copy=ec_GFp_simple_point_copy, .point_set_to_infinity=ec_GFp_simple_point_set_to_infinity, .point_set_Jprojective_coordinates_GFp=ec_GFp_simple_set_Jprojective_coordinates_GFp, .point_get_Jprojective_coordinates_GFp=ec_GFp_simple_get_Jprojective_coordinates_GFp, .point_set_affine_coordinates=ec_GFp_simple_point_set_affine_coordinates, .point_get_affine_coordinates=ec_GFp_nistp256_point_get_affine_coordinates, .point_set_compressed_coordinates=0B, .point2oct=0B, .oct2point=0B, .add=ec_GFp_simple_add, .dbl=ec_GFp_simple_dbl, .invert=ec_GFp_simple_invert, .is_at_infinity=ec_GFp_simple_is_at_infinity, .is_on_curve=ec_GFp_simple_is_on_curve, .point_cmp=ec_GFp_simple_cmp, .make_affine=ec_GFp_simple_make_affine, .points_make_affine=ec_GFp_simple_points_make_affine, .mul=ec_GFp_nistp256_points_mul, .precompute_mult=ec_GFp_nistp256_precompute_mult, .have_precompute_mult=ec_GFp_nistp256_have_precompute_mult, .field_mul=ec_GFp_nist_field_mul, .field_sqr=ec_GFp_nist_field_sqr, .field_div=0B, .field_encode=0B, .field_decode=0B, .field_set_to_one=0B, .priv2oct=ec_key_simple_priv2oct, .oct2priv=ec_key_simple_oct2priv, .set_private=0B, .keygen=ec_key_simple_generate_key, .keycheck=ec_key_simple_check_key, .keygenpub=ec_key_simple_generate_public_key, .keycopy=0B, .keyfinish=0B, .ecdh_compute_key=ecdh_simple_compute_key, .field_inverse_mod_ord=0B, .blind_coordinates=0B, .ladder_pre=0B, .ladder_step=0B, .ladder_post=0B};

  <bb 2> [local count: 1073741825]:
  return &ret;

}



;; Function EC_nistp256_pre_comp_dup (EC_nistp256_pre_comp_dup, funcdef_no=444, decl_uid=9673, cgraph_uid=444, symbol_order=452)

EC_nistp256_pre_comp_dup (struct NISTP256_PRE_COMP * p)
{
  atomic CRYPTO_REF_COUNT * _1;

  <bb 2> [local count: 1073741825]:
  if (p_3(D) != 0B)
    goto <bb 3>; [53.47%]
  else
    goto <bb 4>; [46.53%]

  <bb 3> [local count: 574129753]:
  _1 = &p_3(D)->references;
  __atomic_fetch_add_4 (_1, 1, 0);

  <bb 4> [local count: 1073741825]:
  return p_3(D);

}



;; Function EC_nistp256_pre_comp_free (EC_nistp256_pre_comp_free, funcdef_no=445, decl_uid=9687, cgraph_uid=445, symbol_order=453)

EC_nistp256_pre_comp_free (struct NISTP256_PRE_COMP * pre)
{
  atomic CRYPTO_REF_COUNT * _2;
  unsigned int _10;
  int _11;
  int _12;
  CRYPTO_RWLOCK * _13;

  <bb 2> [local count: 1073741825]:
  if (pre_5(D) == 0B)
    goto <bb 3>; [30.95%]
  else
    goto <bb 4>; [69.05%]

  <bb 3> [local count: 777767468]:
  goto <bb 8>; [100.00%]

  <bb 4> [local count: 741418730]:
  _2 = &pre_5(D)->references;
  _10 = __atomic_fetch_sub_4 (_2, 1, 0);
  _11 = (int) _10;
  _12 = _11 + -1;
  if (_12 == 0)
    goto <bb 5>; [33.00%]
  else
    goto <bb 6>; [67.00%]

  <bb 5> [local count: 244668181]:
  __atomic_thread_fence (2);
  goto <bb 7>; [100.00%]

  <bb 6> [local count: 496750549]:
  if (_12 > 0)
    goto <bb 3>; [89.67%]
  else
    goto <bb 7>; [10.33%]

  <bb 7> [local count: 295974357]:
  _13 = pre_5(D)->lock;
  CRYPTO_THREAD_lock_free (_13);
  CRYPTO_free (pre_5(D), "ecp_nistp256.c", 1889); [tail call]

  <bb 8> [local count: 1073741825]:
  return;

}



;; Function ec_GFp_nistp256_precompute_mult (ec_GFp_nistp256_precompute_mult, funcdef_no=451, decl_uid=10108, cgraph_uid=451, symbol_order=459)

ec_GFp_nistp256_precompute_mult (struct EC_GROUP * group, struct BN_CTX * ctx)
{
  unsigned long ivtmp.362;
  unsigned long ivtmp.328;
  limb felem_x3[4];
  limb felem_y3[4];
  limb felem_z3[4];
  limb felem_x1[4];
  limb felem_y1[4];
  limb felem_z1[4];
  limb felem_x3[4];
  limb felem_y3[4];
  limb felem_z3[4];
  limb felem_x1[4];
  limb felem_y1[4];
  limb felem_z1[4];
  limb felem_x3[4];
  limb felem_y3[4];
  limb felem_z3[4];
  limb felem_x1[4];
  limb felem_y1[4];
  limb felem_z1[4];
  limb felem_x3[4];
  limb felem_y3[4];
  limb felem_z3[4];
  limb felem_x1[4];
  limb felem_y1[4];
  limb felem_z1[4];
  limb felem_x3[4];
  limb felem_y3[4];
  limb felem_z3[4];
  limb felem_x1[4];
  limb felem_y1[4];
  limb felem_z1[4];
  limb felem_x_out[4];
  limb felem_y_out[4];
  limb felem_z_out[4];
  limb felem_x_in[4];
  limb felem_y_in[4];
  limb felem_z_in[4];
  limb felem_x_out[4];
  limb felem_y_out[4];
  limb felem_z_out[4];
  limb felem_x_in[4];
  limb felem_y_in[4];
  limb felem_z_in[4];
  limb felem_x_out[4];
  limb felem_y_out[4];
  limb felem_z_out[4];
  limb felem_x_in[4];
  limb felem_y_in[4];
  limb felem_z_in[4];
  limb felem_x_out[4];
  limb felem_y_out[4];
  limb felem_z_out[4];
  limb felem_x_in[4];
  limb felem_y_in[4];
  limb felem_z_in[4];
  struct NISTP256_PRE_COMP * ret;
  limb z_tmp[4];
  limb y_tmp[4];
  limb x_tmp[4];
  u64 tmp_smallfelems[32][4];
  struct EC_POINT * generator;
  struct BIGNUM * y;
  struct BIGNUM * x;
  struct BN_CTX * new_ctx;
  int i;
  struct NISTP256_PRE_COMP * pre;
  int ret;
  struct EC_POINT * _1;
  int _2;
  struct EC_POINT * _3;
  int _4;
  u64[2][16][3][4] * _5;
  struct EC_POINT * _6;
  struct BIGNUM * _7;
  int _8;
  struct EC_POINT * _9;
  struct BIGNUM * _10;
  int _11;
  struct EC_POINT * _12;
  struct BIGNUM * _13;
  int _14;
  u64[4] * _15;
  u64[4] * _16;
  u64[4] * _17;
  u64[4] * _18;
  u64[4] * _19;
  u64[4] * _20;
  u64[4] * _21;
  u64[4] * _22;
  u64[4] * _23;
  sizetype _24;
  int _25;
  u64[4] * _26;
  u64[4] * _27;
  u64[4] * _28;
  u64[4] * _61;
  sizetype _66;
  sizetype _68;
  sizetype _69;
  int _72;
  sizetype _76;
  sizetype _77;
  sizetype _79;
  sizetype _80;
  sizetype _134;
  atomic CRYPTO_REF_COUNT * _139;
  CRYPTO_RWLOCK * _140;
  long unsigned int _142;
  __int128 unsigned _143;
  long unsigned int _144;
  __int128 unsigned _145;
  long unsigned int _146;
  __int128 unsigned _147;
  long unsigned int _148;
  __int128 unsigned _149;
  long unsigned int _150;
  __int128 unsigned _151;
  long unsigned int _152;
  __int128 unsigned _153;
  long unsigned int _154;
  __int128 unsigned _155;
  long unsigned int _156;
  __int128 unsigned _157;
  long unsigned int _158;
  __int128 unsigned _159;
  long unsigned int _160;
  __int128 unsigned _161;
  long unsigned int _162;
  __int128 unsigned _163;
  long unsigned int _164;
  __int128 unsigned _165;
  long unsigned int _166;
  __int128 unsigned _167;
  long unsigned int _168;
  __int128 unsigned _169;
  long unsigned int _170;
  __int128 unsigned _171;
  long unsigned int _172;
  __int128 unsigned _173;
  long unsigned int _174;
  __int128 unsigned _175;
  long unsigned int _176;
  __int128 unsigned _177;
  long unsigned int _178;
  __int128 unsigned _179;
  long unsigned int _180;
  __int128 unsigned _181;
  long unsigned int _182;
  __int128 unsigned _183;
  long unsigned int _184;
  __int128 unsigned _185;
  long unsigned int _186;
  __int128 unsigned _187;
  long unsigned int _188;
  __int128 unsigned _189;
  long unsigned int _190;
  __int128 unsigned _191;
  long unsigned int _192;
  __int128 unsigned _193;
  long unsigned int _194;
  __int128 unsigned _195;
  long unsigned int _196;
  __int128 unsigned _197;
  long unsigned int _198;
  __int128 unsigned _199;
  long unsigned int _200;
  __int128 unsigned _201;
  long unsigned int _202;
  __int128 unsigned _203;
  long unsigned int _204;
  __int128 unsigned _205;
  long unsigned int _206;
  __int128 unsigned _207;
  long unsigned int _208;
  __int128 unsigned _209;
  long unsigned int _210;
  __int128 unsigned _211;
  long unsigned int _212;
  __int128 unsigned _213;
  long unsigned int _214;
  __int128 unsigned _215;
  long unsigned int _216;
  __int128 unsigned _217;
  long unsigned int _218;
  __int128 unsigned _219;
  long unsigned int _220;
  __int128 unsigned _221;
  long unsigned int _222;
  __int128 unsigned _223;
  long unsigned int _224;
  __int128 unsigned _225;
  long unsigned int _226;
  __int128 unsigned _227;
  long unsigned int _228;
  __int128 unsigned _229;
  long unsigned int _230;
  __int128 unsigned _231;
  long unsigned int _232;
  __int128 unsigned _233;
  long unsigned int _234;
  __int128 unsigned _235;
  long unsigned int _236;
  __int128 unsigned _237;
  long unsigned int _238;
  __int128 unsigned _239;
  long unsigned int _240;
  __int128 unsigned _241;
  long unsigned int _242;
  __int128 unsigned _243;
  long unsigned int _244;
  __int128 unsigned _245;
  long unsigned int _246;
  __int128 unsigned _247;
  long unsigned int _248;
  __int128 unsigned _249;
  long unsigned int _250;
  __int128 unsigned _251;
  long unsigned int _252;
  __int128 unsigned _253;
  long unsigned int _254;
  __int128 unsigned _255;
  long unsigned int _256;
  __int128 unsigned _257;
  long unsigned int _258;
  __int128 unsigned _259;
  long unsigned int _260;
  __int128 unsigned _261;
  long unsigned int _262;
  __int128 unsigned _263;
  long unsigned int _264;
  __int128 unsigned _265;
  long unsigned int _266;
  __int128 unsigned _267;
  long unsigned int _268;
  __int128 unsigned _269;
  long unsigned int _270;
  __int128 unsigned _271;
  long unsigned int _272;
  __int128 unsigned _273;
  long unsigned int _274;
  __int128 unsigned _275;
  long unsigned int _276;
  __int128 unsigned _277;
  long unsigned int _278;
  __int128 unsigned _279;
  long unsigned int _280;
  __int128 unsigned _281;
  long unsigned int _282;
  __int128 unsigned _283;
  long unsigned int _284;
  __int128 unsigned _285;
  long unsigned int _286;
  __int128 unsigned _287;
  long unsigned int _288;
  __int128 unsigned _289;
  long unsigned int _290;
  __int128 unsigned _291;
  long unsigned int _292;
  __int128 unsigned _293;
  long unsigned int _294;
  __int128 unsigned _295;
  long unsigned int _296;
  __int128 unsigned _297;
  long unsigned int _298;
  __int128 unsigned _299;
  long unsigned int _300;
  __int128 unsigned _301;
  long unsigned int _302;
  __int128 unsigned _303;
  long unsigned int _304;
  __int128 unsigned _305;
  long unsigned int _306;
  __int128 unsigned _307;
  long unsigned int _308;
  __int128 unsigned _309;
  long unsigned int _310;
  __int128 unsigned _311;
  long unsigned int _312;
  __int128 unsigned _313;
  long unsigned int _314;
  __int128 unsigned _315;
  long unsigned int _316;
  __int128 unsigned _317;
  long unsigned int _318;
  __int128 unsigned _319;
  long unsigned int _320;
  __int128 unsigned _321;
  long unsigned int _322;
  __int128 unsigned _323;
  long unsigned int _324;
  __int128 unsigned _325;
  long unsigned int _326;
  __int128 unsigned _327;
  long unsigned int _328;
  __int128 unsigned _329;
  long unsigned int _330;
  __int128 unsigned _331;
  long unsigned int _332;
  __int128 unsigned _333;
  long unsigned int _334;
  __int128 unsigned _335;
  long unsigned int _336;
  __int128 unsigned _337;
  long unsigned int _338;
  __int128 unsigned _339;
  long unsigned int _340;
  __int128 unsigned _341;
  long unsigned int _342;
  __int128 unsigned _343;
  long unsigned int _344;
  __int128 unsigned _345;
  long unsigned int _346;
  __int128 unsigned _347;
  long unsigned int _348;
  __int128 unsigned _349;
  long unsigned int _350;
  __int128 unsigned _351;
  long unsigned int _352;
  __int128 unsigned _353;
  long unsigned int _354;
  __int128 unsigned _355;
  long unsigned int _356;
  __int128 unsigned _357;
  sizetype _602;
  sizetype _605;
  u64[4] * _767;
  unsigned long _768;
  u64[4] * _769;
  unsigned long _770;
  u64[4] * _771;
  unsigned long _772;
  unsigned long _773;
  unsigned long _774;
  u64[4] * _776;
  unsigned long _777;
  u64[4] * _778;
  unsigned long _779;
  u64[4] * _780;
  unsigned long _781;
  u64[4] * _782;
  unsigned long _783;
  u64[4] * _784;
  unsigned long _785;
  u64[4] * _786;
  unsigned long _787;
  u64[4] * _788;
  unsigned long _789;
  u64[4] * _790;
  unsigned long _791;
  u64[4] * _792;
  unsigned long _793;
  u64[4] * _794;
  unsigned long _795;
  u64[4] * _796;
  unsigned long _797;
  u64[4] * _798;
  unsigned long _799;
  u64[4] * _800;
  unsigned long _801;
  u64[4] * _802;
  unsigned long _803;
  u64[4] * _804;
  unsigned long _805;
  u64[4] * _806;
  unsigned long _807;
  u64[4] * _808;
  unsigned long _809;
  u64[4] * _810;
  unsigned long _811;
  struct NISTP256_PRE_COMP * _812;
  unsigned long _813;
  unsigned long _814;
  u64[4] * _821;
  unsigned long _822;
  u64[4] * _823;
  unsigned long _824;
  unsigned int ivtmp_890;
  unsigned int ivtmp_891;
  unsigned int ivtmp_892;
  unsigned int ivtmp_893;
  unsigned int ivtmp_894;
  unsigned int ivtmp_895;

  <bb 2> [local count: 1073741825]:
  EC_pre_comp_free (group_85(D));
  if (ctx_87(D) == 0B)
    goto <bb 3>; [30.00%]
  else
    goto <bb 4>; [70.00%]

  <bb 3> [local count: 322122547]:
  new_ctx_89 = BN_CTX_new ();
  if (new_ctx_89 == 0B)
    goto <bb 32>; [18.09%]
  else
    goto <bb 4>; [81.91%]

  <bb 4> [local count: 1015469856]:
  # ctx_62 = PHI <ctx_87(D)(2), new_ctx_89(3)>
  # new_ctx_70 = PHI <0B(2), new_ctx_89(3)>
  BN_CTX_start (ctx_62);
  x_92 = BN_CTX_get (ctx_62);
  y_94 = BN_CTX_get (ctx_62);
  if (y_94 == 0B)
    goto <bb 5>; [18.09%]
  else
    goto <bb 6>; [81.91%]

  <bb 5> [local count: 618889384]:
  goto <bb 31>; [100.00%]

  <bb 6> [local count: 831771359]:
  _1 = group_85(D)->generator;
  if (_1 == 0B)
    goto <bb 5>; [30.95%]
  else
    goto <bb 7>; [69.05%]

  <bb 7> [local count: 574338123]:
  generator_96 = EC_POINT_new (group_85(D));
  if (generator_96 == 0B)
    goto <bb 5>; [30.95%]
  else
    goto <bb 8>; [69.05%]

  <bb 8> [local count: 396580474]:
  BN_bin2bn (&nistp256_curve_params[3], 32, x_92);
  BN_bin2bn (&nistp256_curve_params[4], 32, y_94);
  _2 = EC_POINT_set_affine_coordinates (group_85(D), generator_96, x_92, y_94, ctx_62);
  if (_2 == 0)
    goto <bb 31>; [51.12%]
  else
    goto <bb 9>; [48.88%]

  <bb 9> [local count: 193848536]:
  ret_138 = CRYPTO_zalloc (3088, "ecp_nistp256.c", 1849);
  if (ret_138 == 0B)
    goto <bb 10>; [8.27%]
  else
    goto <bb 11>; [91.73%]

  <bb 10> [local count: 16031274]:
  ERR_put_error (16, 236, 65, "ecp_nistp256.c", 1852);
  goto <bb 31>; [100.00%]

  <bb 11> [local count: 177817262]:
  _139 = &ret_138->references;
  __atomic_store_4 (_139, 1, 5);
  _140 = CRYPTO_THREAD_lock_new ();
  ret_138->lock = _140;
  if (_140 == 0B)
    goto <bb 12>; [4.25%]
  else
    goto <bb 13>; [95.75%]

  <bb 12> [local count: 7557234]:
  ERR_put_error (16, 236, 65, "ecp_nistp256.c", 1860);
  CRYPTO_free (ret_138, "ecp_nistp256.c", 1861);
  goto <bb 31>; [100.00%]

  <bb 13> [local count: 170260027]:
  _3 = group_85(D)->generator;
  _4 = EC_POINT_cmp (group_85(D), generator_96, _3, ctx_62);
  if (_4 == 0)
    goto <bb 14>; [34.00%]
  else
    goto <bb 15>; [66.00%]

  <bb 14> [local count: 45509821]:
  _5 = &ret_138->g_pre_comp;
  __builtin_memcpy (_5, &gmul, 3072);
  goto <bb 30>; [100.00%]

  <bb 15> [local count: 88342593]:
  _6 = group_85(D)->generator;
  _7 = _6->X;
  _8 = BN_to_felem (&x_tmp, _7);
  if (_8 == 0)
    goto <bb 31>; [51.12%]
  else
    goto <bb 16>; [48.88%]

  <bb 16> [local count: 43181859]:
  _9 = group_85(D)->generator;
  _10 = _9->Y;
  _11 = BN_to_felem (&y_tmp, _10);
  if (_11 == 0)
    goto <bb 31>; [51.12%]
  else
    goto <bb 17>; [48.88%]

  <bb 17> [local count: 21107293]:
  _12 = group_85(D)->generator;
  _13 = _12->Z;
  _14 = BN_to_felem (&z_tmp, _13);
  if (_14 == 0)
    goto <bb 31>; [51.12%]
  else
    goto <bb 18>; [48.88%]

  <bb 18> [local count: 10317245]:
  _15 = &ret_138->g_pre_comp[0][1][0];
  felem_shrink (_15, &x_tmp);
  _16 = &ret_138->g_pre_comp[0][1][1];
  felem_shrink (_16, &y_tmp);
  _17 = &ret_138->g_pre_comp[0][1][2];
  felem_shrink (_17, &z_tmp);

  <bb 19> [local count: 20634490]:
  # i_607 = PHI <1(18), i_115(25)>
  # ivtmp_891 = PHI <4(18), ivtmp_890(25)>
  _24 = (sizetype) i_607;
  _66 = _24 * 96;
  _69 = _66 + 64;
  _18 = ret_138 + _69;
  _68 = _66 + 32;
  _19 = ret_138 + _68;
  _20 = ret_138 + _66;
  _605 = _66 + 1600;
  _21 = ret_138 + _605;
  _602 = _66 + 1568;
  _22 = ret_138 + _602;
  _80 = _66 + 1536;
  _23 = ret_138 + _80;
  _142 = MEM[(const u64 *)_20];
  _143 = (__int128 unsigned) _142;
  MEM[(limb *)&felem_x_in] = _143;
  _144 = MEM[(const u64 *)_20 + 8B];
  _145 = (__int128 unsigned) _144;
  MEM[(limb *)&felem_x_in + 16B] = _145;
  _146 = MEM[(const u64 *)_20 + 16B];
  _147 = (__int128 unsigned) _146;
  MEM[(limb *)&felem_x_in + 32B] = _147;
  _148 = MEM[(const u64 *)_20 + 24B];
  _149 = (__int128 unsigned) _148;
  MEM[(limb *)&felem_x_in + 48B] = _149;
  _150 = MEM[(const u64 *)_19];
  _151 = (__int128 unsigned) _150;
  MEM[(limb *)&felem_y_in] = _151;
  _152 = MEM[(const u64 *)_19 + 8B];
  _153 = (__int128 unsigned) _152;
  MEM[(limb *)&felem_y_in + 16B] = _153;
  _154 = MEM[(const u64 *)_19 + 16B];
  _155 = (__int128 unsigned) _154;
  MEM[(limb *)&felem_y_in + 32B] = _155;
  _156 = MEM[(const u64 *)_19 + 24B];
  _157 = (__int128 unsigned) _156;
  MEM[(limb *)&felem_y_in + 48B] = _157;
  _158 = MEM[(const u64 *)_18];
  _159 = (__int128 unsigned) _158;
  MEM[(limb *)&felem_z_in] = _159;
  _160 = MEM[(const u64 *)_18 + 8B];
  _161 = (__int128 unsigned) _160;
  MEM[(limb *)&felem_z_in + 16B] = _161;
  _162 = MEM[(const u64 *)_18 + 16B];
  _163 = (__int128 unsigned) _162;
  MEM[(limb *)&felem_z_in + 32B] = _163;
  _164 = MEM[(const u64 *)_18 + 24B];
  _165 = (__int128 unsigned) _164;
  MEM[(limb *)&felem_z_in + 48B] = _165;
  point_double (&felem_x_out, &felem_y_out, &felem_z_out, &felem_x_in, &felem_y_in, &felem_z_in);
  felem_shrink (_23, &felem_x_out);
  felem_shrink (_22, &felem_y_out);
  felem_shrink (_21, &felem_z_out);
  felem_x_out ={v} {CLOBBER};
  felem_y_out ={v} {CLOBBER};
  felem_z_out ={v} {CLOBBER};
  felem_x_in ={v} {CLOBBER};
  felem_y_in ={v} {CLOBBER};
  felem_z_in ={v} {CLOBBER};

  <bb 20> [local count: 638614384]:
  # ivtmp_893 = PHI <31(19), ivtmp_892(20)>
  _166 = MEM[(const u64 *)_23];
  _167 = (__int128 unsigned) _166;
  MEM[(limb *)&felem_x_in] = _167;
  _168 = MEM[(const u64 *)_23 + 8B];
  _169 = (__int128 unsigned) _168;
  MEM[(limb *)&felem_x_in + 16B] = _169;
  _170 = MEM[(const u64 *)_23 + 16B];
  _171 = (__int128 unsigned) _170;
  MEM[(limb *)&felem_x_in + 32B] = _171;
  _172 = MEM[(const u64 *)_23 + 24B];
  _173 = (__int128 unsigned) _172;
  MEM[(limb *)&felem_x_in + 48B] = _173;
  _174 = MEM[(const u64 *)_22];
  _175 = (__int128 unsigned) _174;
  MEM[(limb *)&felem_y_in] = _175;
  _176 = MEM[(const u64 *)_22 + 8B];
  _177 = (__int128 unsigned) _176;
  MEM[(limb *)&felem_y_in + 16B] = _177;
  _178 = MEM[(const u64 *)_22 + 16B];
  _179 = (__int128 unsigned) _178;
  MEM[(limb *)&felem_y_in + 32B] = _179;
  _180 = MEM[(const u64 *)_22 + 24B];
  _181 = (__int128 unsigned) _180;
  MEM[(limb *)&felem_y_in + 48B] = _181;
  _182 = MEM[(const u64 *)_21];
  _183 = (__int128 unsigned) _182;
  MEM[(limb *)&felem_z_in] = _183;
  _184 = MEM[(const u64 *)_21 + 8B];
  _185 = (__int128 unsigned) _184;
  MEM[(limb *)&felem_z_in + 16B] = _185;
  _186 = MEM[(const u64 *)_21 + 16B];
  _187 = (__int128 unsigned) _186;
  MEM[(limb *)&felem_z_in + 32B] = _187;
  _188 = MEM[(const u64 *)_21 + 24B];
  _189 = (__int128 unsigned) _188;
  MEM[(limb *)&felem_z_in + 48B] = _189;
  point_double (&felem_x_out, &felem_y_out, &felem_z_out, &felem_x_in, &felem_y_in, &felem_z_in);
  felem_shrink (_23, &felem_x_out);
  felem_shrink (_22, &felem_y_out);
  felem_shrink (_21, &felem_z_out);
  felem_x_out ={v} {CLOBBER};
  felem_y_out ={v} {CLOBBER};
  felem_z_out ={v} {CLOBBER};
  felem_x_in ={v} {CLOBBER};
  felem_y_in ={v} {CLOBBER};
  felem_z_in ={v} {CLOBBER};
  ivtmp_892 = ivtmp_893 + 4294967295;
  if (ivtmp_892 != 0)
    goto <bb 20>; [96.77%]
  else
    goto <bb 21>; [3.23%]

  <bb 21> [local count: 20634490]:
  if (i_607 == 8)
    goto <bb 22>; [25.00%]
  else
    goto <bb 23>; [75.00%]

  <bb 22> [local count: 10317245]:
  _814 = (unsigned long) ret_138;
  ivtmp.362_815 = _814 + 1632;
  _774 = _814 + 4704;
  goto <bb 26>; [100.00%]

  <bb 23> [local count: 15475867]:
  _25 = i_607 * 2;
  _79 = (sizetype) _25;
  _77 = _79 * 96;
  _76 = _77 + 64;
  _26 = ret_138 + _76;
  _134 = _77 + 32;
  _27 = ret_138 + _134;
  _28 = _20 + _66;
  _190 = MEM[(const u64 *)_23];
  _191 = (__int128 unsigned) _190;
  MEM[(limb *)&felem_x_in] = _191;
  _192 = MEM[(const u64 *)_23 + 8B];
  _193 = (__int128 unsigned) _192;
  MEM[(limb *)&felem_x_in + 16B] = _193;
  _194 = MEM[(const u64 *)_23 + 16B];
  _195 = (__int128 unsigned) _194;
  MEM[(limb *)&felem_x_in + 32B] = _195;
  _196 = MEM[(const u64 *)_23 + 24B];
  _197 = (__int128 unsigned) _196;
  MEM[(limb *)&felem_x_in + 48B] = _197;
  _198 = MEM[(const u64 *)_22];
  _199 = (__int128 unsigned) _198;
  MEM[(limb *)&felem_y_in] = _199;
  _200 = MEM[(const u64 *)_22 + 8B];
  _201 = (__int128 unsigned) _200;
  MEM[(limb *)&felem_y_in + 16B] = _201;
  _202 = MEM[(const u64 *)_22 + 16B];
  _203 = (__int128 unsigned) _202;
  MEM[(limb *)&felem_y_in + 32B] = _203;
  _204 = MEM[(const u64 *)_22 + 24B];
  _205 = (__int128 unsigned) _204;
  MEM[(limb *)&felem_y_in + 48B] = _205;
  _206 = MEM[(const u64 *)_21];
  _207 = (__int128 unsigned) _206;
  MEM[(limb *)&felem_z_in] = _207;
  _208 = MEM[(const u64 *)_21 + 8B];
  _209 = (__int128 unsigned) _208;
  MEM[(limb *)&felem_z_in + 16B] = _209;
  _210 = MEM[(const u64 *)_21 + 16B];
  _211 = (__int128 unsigned) _210;
  MEM[(limb *)&felem_z_in + 32B] = _211;
  _212 = MEM[(const u64 *)_21 + 24B];
  _213 = (__int128 unsigned) _212;
  MEM[(limb *)&felem_z_in + 48B] = _213;
  point_double (&felem_x_out, &felem_y_out, &felem_z_out, &felem_x_in, &felem_y_in, &felem_z_in);
  felem_shrink (_28, &felem_x_out);
  felem_shrink (_27, &felem_y_out);
  felem_shrink (_26, &felem_z_out);
  felem_x_out ={v} {CLOBBER};
  felem_y_out ={v} {CLOBBER};
  felem_z_out ={v} {CLOBBER};
  felem_x_in ={v} {CLOBBER};
  felem_y_in ={v} {CLOBBER};
  felem_z_in ={v} {CLOBBER};

  <bb 24> [local count: 478960790]:
  # ivtmp_895 = PHI <31(23), ivtmp_894(24)>
  _214 = MEM[(const u64 *)_28];
  _215 = (__int128 unsigned) _214;
  MEM[(limb *)&felem_x_in] = _215;
  _216 = MEM[(const u64 *)_28 + 8B];
  _217 = (__int128 unsigned) _216;
  MEM[(limb *)&felem_x_in + 16B] = _217;
  _218 = MEM[(const u64 *)_28 + 16B];
  _219 = (__int128 unsigned) _218;
  MEM[(limb *)&felem_x_in + 32B] = _219;
  _220 = MEM[(const u64 *)_28 + 24B];
  _221 = (__int128 unsigned) _220;
  MEM[(limb *)&felem_x_in + 48B] = _221;
  _222 = MEM[(const u64 *)_27];
  _223 = (__int128 unsigned) _222;
  MEM[(limb *)&felem_y_in] = _223;
  _224 = MEM[(const u64 *)_27 + 8B];
  _225 = (__int128 unsigned) _224;
  MEM[(limb *)&felem_y_in + 16B] = _225;
  _226 = MEM[(const u64 *)_27 + 16B];
  _227 = (__int128 unsigned) _226;
  MEM[(limb *)&felem_y_in + 32B] = _227;
  _228 = MEM[(const u64 *)_27 + 24B];
  _229 = (__int128 unsigned) _228;
  MEM[(limb *)&felem_y_in + 48B] = _229;
  _230 = MEM[(const u64 *)_26];
  _231 = (__int128 unsigned) _230;
  MEM[(limb *)&felem_z_in] = _231;
  _232 = MEM[(const u64 *)_26 + 8B];
  _233 = (__int128 unsigned) _232;
  MEM[(limb *)&felem_z_in + 16B] = _233;
  _234 = MEM[(const u64 *)_26 + 16B];
  _235 = (__int128 unsigned) _234;
  MEM[(limb *)&felem_z_in + 32B] = _235;
  _236 = MEM[(const u64 *)_26 + 24B];
  _237 = (__int128 unsigned) _236;
  MEM[(limb *)&felem_z_in + 48B] = _237;
  point_double (&felem_x_out, &felem_y_out, &felem_z_out, &felem_x_in, &felem_y_in, &felem_z_in);
  felem_shrink (_28, &felem_x_out);
  felem_shrink (_27, &felem_y_out);
  felem_shrink (_26, &felem_z_out);
  felem_x_out ={v} {CLOBBER};
  felem_y_out ={v} {CLOBBER};
  felem_z_out ={v} {CLOBBER};
  felem_x_in ={v} {CLOBBER};
  felem_y_in ={v} {CLOBBER};
  felem_z_in ={v} {CLOBBER};
  ivtmp_894 = ivtmp_895 + 4294967295;
  if (ivtmp_894 != 0)
    goto <bb 24>; [96.77%]
  else
    goto <bb 25>; [3.23%]

  <bb 25> [local count: 15475867]:
  i_115 = i_607 << 1;
  ivtmp_890 = ivtmp_891 + 4294967295;
  if (ivtmp_890 != 0)
    goto <bb 19>; [66.67%]
  else
    goto <bb 22>; [33.33%]

  <bb 26> [local count: 20637585]:
  # ivtmp.362_817 = PHI <ivtmp.362_815(22), ivtmp.362_816(28)>
  _813 = ivtmp.362_817 + 18446744073709549984;
  _812 = (struct NISTP256_PRE_COMP *) _813;
  __builtin_memset (_812, 0, 96);
  _807 = ivtmp.362_817 + 18446744073709550240;
  _806 = (u64[4] *) _807;
  _809 = ivtmp.362_817 + 18446744073709550208;
  _808 = (u64[4] *) _809;
  _811 = ivtmp.362_817 + 18446744073709550176;
  _810 = (u64[4] *) _811;
  _789 = ivtmp.362_817 + 18446744073709550432;
  _788 = (u64[4] *) _789;
  _791 = ivtmp.362_817 + 18446744073709550400;
  _790 = (u64[4] *) _791;
  _793 = ivtmp.362_817 + 18446744073709550368;
  _792 = (u64[4] *) _793;
  _801 = ivtmp.362_817 + 18446744073709550624;
  _800 = (u64[4] *) _801;
  _803 = ivtmp.362_817 + 18446744073709550592;
  _802 = (u64[4] *) _803;
  _805 = ivtmp.362_817 + 18446744073709550560;
  _804 = (u64[4] *) _805;
  _310 = MEM[base: 0B, index: ivtmp.362_817, offset: -1248B];
  _311 = (__int128 unsigned) _310;
  MEM[(limb *)&felem_x1] = _311;
  _312 = MEM[base: 0B, index: ivtmp.362_817, offset: -1240B];
  _313 = (__int128 unsigned) _312;
  MEM[(limb *)&felem_x1 + 16B] = _313;
  _314 = MEM[base: 0B, index: ivtmp.362_817, offset: -1232B];
  _315 = (__int128 unsigned) _314;
  MEM[(limb *)&felem_x1 + 32B] = _315;
  _316 = MEM[base: 0B, index: ivtmp.362_817, offset: -1224B];
  _317 = (__int128 unsigned) _316;
  MEM[(limb *)&felem_x1 + 48B] = _317;
  _318 = MEM[base: 0B, index: ivtmp.362_817, offset: -1216B];
  _319 = (__int128 unsigned) _318;
  MEM[(limb *)&felem_y1] = _319;
  _320 = MEM[base: 0B, index: ivtmp.362_817, offset: -1208B];
  _321 = (__int128 unsigned) _320;
  MEM[(limb *)&felem_y1 + 16B] = _321;
  _322 = MEM[base: 0B, index: ivtmp.362_817, offset: -1200B];
  _323 = (__int128 unsigned) _322;
  MEM[(limb *)&felem_y1 + 32B] = _323;
  _324 = MEM[base: 0B, index: ivtmp.362_817, offset: -1192B];
  _325 = (__int128 unsigned) _324;
  MEM[(limb *)&felem_y1 + 48B] = _325;
  _326 = MEM[base: 0B, index: ivtmp.362_817, offset: -1184B];
  _327 = (__int128 unsigned) _326;
  MEM[(limb *)&felem_z1] = _327;
  _328 = MEM[base: 0B, index: ivtmp.362_817, offset: -1176B];
  _329 = (__int128 unsigned) _328;
  MEM[(limb *)&felem_z1 + 16B] = _329;
  _330 = MEM[base: 0B, index: ivtmp.362_817, offset: -1168B];
  _331 = (__int128 unsigned) _330;
  MEM[(limb *)&felem_z1 + 32B] = _331;
  _332 = MEM[base: 0B, index: ivtmp.362_817, offset: -1160B];
  _333 = (__int128 unsigned) _332;
  MEM[(limb *)&felem_z1 + 48B] = _333;
  point_add (&felem_x3, &felem_y3, &felem_z3, &felem_x1, &felem_y1, &felem_z1, 0, _810, _808, _806);
  felem_shrink (_804, &felem_x3);
  felem_shrink (_802, &felem_y3);
  felem_shrink (_800, &felem_z3);
  felem_x3 ={v} {CLOBBER};
  felem_y3 ={v} {CLOBBER};
  felem_z3 ={v} {CLOBBER};
  felem_x1 ={v} {CLOBBER};
  felem_y1 ={v} {CLOBBER};
  felem_z1 ={v} {CLOBBER};
  _795 = ivtmp.362_817 + 18446744073709551008;
  _794 = (u64[4] *) _795;
  _797 = ivtmp.362_817 + 18446744073709550976;
  _796 = (u64[4] *) _797;
  _799 = ivtmp.362_817 + 18446744073709550944;
  _798 = (u64[4] *) _799;
  _286 = MEM[base: 0B, index: ivtmp.362_817, offset: -864B];
  _287 = (__int128 unsigned) _286;
  MEM[(limb *)&felem_x1] = _287;
  _288 = MEM[base: 0B, index: ivtmp.362_817, offset: -856B];
  _289 = (__int128 unsigned) _288;
  MEM[(limb *)&felem_x1 + 16B] = _289;
  _290 = MEM[base: 0B, index: ivtmp.362_817, offset: -848B];
  _291 = (__int128 unsigned) _290;
  MEM[(limb *)&felem_x1 + 32B] = _291;
  _292 = MEM[base: 0B, index: ivtmp.362_817, offset: -840B];
  _293 = (__int128 unsigned) _292;
  MEM[(limb *)&felem_x1 + 48B] = _293;
  _294 = MEM[base: 0B, index: ivtmp.362_817, offset: -832B];
  _295 = (__int128 unsigned) _294;
  MEM[(limb *)&felem_y1] = _295;
  _296 = MEM[base: 0B, index: ivtmp.362_817, offset: -824B];
  _297 = (__int128 unsigned) _296;
  MEM[(limb *)&felem_y1 + 16B] = _297;
  _298 = MEM[base: 0B, index: ivtmp.362_817, offset: -816B];
  _299 = (__int128 unsigned) _298;
  MEM[(limb *)&felem_y1 + 32B] = _299;
  _300 = MEM[base: 0B, index: ivtmp.362_817, offset: -808B];
  _301 = (__int128 unsigned) _300;
  MEM[(limb *)&felem_y1 + 48B] = _301;
  _302 = MEM[base: 0B, index: ivtmp.362_817, offset: -800B];
  _303 = (__int128 unsigned) _302;
  MEM[(limb *)&felem_z1] = _303;
  _304 = MEM[base: 0B, index: ivtmp.362_817, offset: -792B];
  _305 = (__int128 unsigned) _304;
  MEM[(limb *)&felem_z1 + 16B] = _305;
  _306 = MEM[base: 0B, index: ivtmp.362_817, offset: -784B];
  _307 = (__int128 unsigned) _306;
  MEM[(limb *)&felem_z1 + 32B] = _307;
  _308 = MEM[base: 0B, index: ivtmp.362_817, offset: -776B];
  _309 = (__int128 unsigned) _308;
  MEM[(limb *)&felem_z1 + 48B] = _309;
  point_add (&felem_x3, &felem_y3, &felem_z3, &felem_x1, &felem_y1, &felem_z1, 0, _810, _808, _806);
  felem_shrink (_798, &felem_x3);
  felem_shrink (_796, &felem_y3);
  felem_shrink (_794, &felem_z3);
  felem_x3 ={v} {CLOBBER};
  felem_y3 ={v} {CLOBBER};
  felem_z3 ={v} {CLOBBER};
  felem_x1 ={v} {CLOBBER};
  felem_y1 ={v} {CLOBBER};
  felem_z1 ={v} {CLOBBER};
  _783 = ivtmp.362_817 + 18446744073709551200;
  _782 = (u64[4] *) _783;
  _785 = ivtmp.362_817 + 18446744073709551168;
  _784 = (u64[4] *) _785;
  _787 = ivtmp.362_817 + 18446744073709551136;
  _786 = (u64[4] *) _787;
  _262 = MEM[base: 0B, index: ivtmp.362_817, offset: -864B];
  _263 = (__int128 unsigned) _262;
  MEM[(limb *)&felem_x1] = _263;
  _264 = MEM[base: 0B, index: ivtmp.362_817, offset: -856B];
  _265 = (__int128 unsigned) _264;
  MEM[(limb *)&felem_x1 + 16B] = _265;
  _266 = MEM[base: 0B, index: ivtmp.362_817, offset: -848B];
  _267 = (__int128 unsigned) _266;
  MEM[(limb *)&felem_x1 + 32B] = _267;
  _268 = MEM[base: 0B, index: ivtmp.362_817, offset: -840B];
  _269 = (__int128 unsigned) _268;
  MEM[(limb *)&felem_x1 + 48B] = _269;
  _270 = MEM[base: 0B, index: ivtmp.362_817, offset: -832B];
  _271 = (__int128 unsigned) _270;
  MEM[(limb *)&felem_y1] = _271;
  _272 = MEM[base: 0B, index: ivtmp.362_817, offset: -824B];
  _273 = (__int128 unsigned) _272;
  MEM[(limb *)&felem_y1 + 16B] = _273;
  _274 = MEM[base: 0B, index: ivtmp.362_817, offset: -816B];
  _275 = (__int128 unsigned) _274;
  MEM[(limb *)&felem_y1 + 32B] = _275;
  _276 = MEM[base: 0B, index: ivtmp.362_817, offset: -808B];
  _277 = (__int128 unsigned) _276;
  MEM[(limb *)&felem_y1 + 48B] = _277;
  _278 = MEM[base: 0B, index: ivtmp.362_817, offset: -800B];
  _279 = (__int128 unsigned) _278;
  MEM[(limb *)&felem_z1] = _279;
  _280 = MEM[base: 0B, index: ivtmp.362_817, offset: -792B];
  _281 = (__int128 unsigned) _280;
  MEM[(limb *)&felem_z1 + 16B] = _281;
  _282 = MEM[base: 0B, index: ivtmp.362_817, offset: -784B];
  _283 = (__int128 unsigned) _282;
  MEM[(limb *)&felem_z1 + 32B] = _283;
  _284 = MEM[base: 0B, index: ivtmp.362_817, offset: -776B];
  _285 = (__int128 unsigned) _284;
  MEM[(limb *)&felem_z1 + 48B] = _285;
  point_add (&felem_x3, &felem_y3, &felem_z3, &felem_x1, &felem_y1, &felem_z1, 0, _792, _790, _788);
  felem_shrink (_786, &felem_x3);
  felem_shrink (_784, &felem_y3);
  felem_shrink (_782, &felem_z3);
  felem_x3 ={v} {CLOBBER};
  felem_y3 ={v} {CLOBBER};
  felem_z3 ={v} {CLOBBER};
  felem_x1 ={v} {CLOBBER};
  felem_y1 ={v} {CLOBBER};
  felem_z1 ={v} {CLOBBER};
  _777 = ivtmp.362_817 + 18446744073709551392;
  _776 = (u64[4] *) _777;
  _779 = ivtmp.362_817 + 18446744073709551360;
  _778 = (u64[4] *) _779;
  _781 = ivtmp.362_817 + 18446744073709551328;
  _780 = (u64[4] *) _781;
  _238 = MEM[base: 0B, index: ivtmp.362_817, offset: -480B];
  _239 = (__int128 unsigned) _238;
  MEM[(limb *)&felem_x1] = _239;
  _240 = MEM[base: 0B, index: ivtmp.362_817, offset: -472B];
  _241 = (__int128 unsigned) _240;
  MEM[(limb *)&felem_x1 + 16B] = _241;
  _242 = MEM[base: 0B, index: ivtmp.362_817, offset: -464B];
  _243 = (__int128 unsigned) _242;
  MEM[(limb *)&felem_x1 + 32B] = _243;
  _244 = MEM[base: 0B, index: ivtmp.362_817, offset: -456B];
  _245 = (__int128 unsigned) _244;
  MEM[(limb *)&felem_x1 + 48B] = _245;
  _246 = MEM[base: 0B, index: ivtmp.362_817, offset: -448B];
  _247 = (__int128 unsigned) _246;
  MEM[(limb *)&felem_y1] = _247;
  _248 = MEM[base: 0B, index: ivtmp.362_817, offset: -440B];
  _249 = (__int128 unsigned) _248;
  MEM[(limb *)&felem_y1 + 16B] = _249;
  _250 = MEM[base: 0B, index: ivtmp.362_817, offset: -432B];
  _251 = (__int128 unsigned) _250;
  MEM[(limb *)&felem_y1 + 32B] = _251;
  _252 = MEM[base: 0B, index: ivtmp.362_817, offset: -424B];
  _253 = (__int128 unsigned) _252;
  MEM[(limb *)&felem_y1 + 48B] = _253;
  _254 = MEM[base: 0B, index: ivtmp.362_817, offset: -416B];
  _255 = (__int128 unsigned) _254;
  MEM[(limb *)&felem_z1] = _255;
  _256 = MEM[base: 0B, index: ivtmp.362_817, offset: -408B];
  _257 = (__int128 unsigned) _256;
  MEM[(limb *)&felem_z1 + 16B] = _257;
  _258 = MEM[base: 0B, index: ivtmp.362_817, offset: -400B];
  _259 = (__int128 unsigned) _258;
  MEM[(limb *)&felem_z1 + 32B] = _259;
  _260 = MEM[base: 0B, index: ivtmp.362_817, offset: -392B];
  _261 = (__int128 unsigned) _260;
  MEM[(limb *)&felem_z1 + 48B] = _261;
  point_add (&felem_x3, &felem_y3, &felem_z3, &felem_x1, &felem_y1, &felem_z1, 0, _810, _808, _806);
  felem_shrink (_780, &felem_x3);
  felem_shrink (_778, &felem_y3);
  felem_shrink (_776, &felem_z3);
  felem_x3 ={v} {CLOBBER};
  felem_y3 ={v} {CLOBBER};
  felem_z3 ={v} {CLOBBER};
  felem_x1 ={v} {CLOBBER};
  felem_y1 ={v} {CLOBBER};
  felem_z1 ={v} {CLOBBER};
  _768 = ivtmp.362_817 + 18446744073709550144;
  _767 = (u64[4] *) _768;
  _770 = ivtmp.362_817 + 18446744073709550112;
  _769 = (u64[4] *) _770;
  _772 = ivtmp.362_817 + 18446744073709550080;
  _771 = (u64[4] *) _772;
  _773 = ivtmp.362_817 + 18446744073709550272;

  <bb 27> [local count: 144463097]:
  # ivtmp.328_610 = PHI <_773(26), ivtmp.328_609(27)>
  _822 = ivtmp.328_610 + 64;
  _821 = (u64[4] *) _822;
  _824 = ivtmp.328_610 + 32;
  _823 = (u64[4] *) _824;
  _61 = (u64[4] *) ivtmp.328_610;
  _334 = MEM[base: _61, offset: -96B];
  _335 = (__int128 unsigned) _334;
  MEM[(limb *)&felem_x1] = _335;
  _336 = MEM[base: _61, offset: -88B];
  _337 = (__int128 unsigned) _336;
  MEM[(limb *)&felem_x1 + 16B] = _337;
  _338 = MEM[base: _61, offset: -80B];
  _339 = (__int128 unsigned) _338;
  MEM[(limb *)&felem_x1 + 32B] = _339;
  _340 = MEM[base: _61, offset: -72B];
  _341 = (__int128 unsigned) _340;
  MEM[(limb *)&felem_x1 + 48B] = _341;
  _342 = MEM[base: _61, offset: -64B];
  _343 = (__int128 unsigned) _342;
  MEM[(limb *)&felem_y1] = _343;
  _344 = MEM[base: _61, offset: -56B];
  _345 = (__int128 unsigned) _344;
  MEM[(limb *)&felem_y1 + 16B] = _345;
  _346 = MEM[base: _61, offset: -48B];
  _347 = (__int128 unsigned) _346;
  MEM[(limb *)&felem_y1 + 32B] = _347;
  _348 = MEM[base: _61, offset: -40B];
  _349 = (__int128 unsigned) _348;
  MEM[(limb *)&felem_y1 + 48B] = _349;
  _350 = MEM[base: _61, offset: -32B];
  _351 = (__int128 unsigned) _350;
  MEM[(limb *)&felem_z1] = _351;
  _352 = MEM[base: _61, offset: -24B];
  _353 = (__int128 unsigned) _352;
  MEM[(limb *)&felem_z1 + 16B] = _353;
  _354 = MEM[base: _61, offset: -16B];
  _355 = (__int128 unsigned) _354;
  MEM[(limb *)&felem_z1 + 32B] = _355;
  _356 = MEM[base: _61, offset: -8B];
  _357 = (__int128 unsigned) _356;
  MEM[(limb *)&felem_z1 + 48B] = _357;
  point_add (&felem_x3, &felem_y3, &felem_z3, &felem_x1, &felem_y1, &felem_z1, 0, _771, _769, _767);
  felem_shrink (_61, &felem_x3);
  felem_shrink (_823, &felem_y3);
  felem_shrink (_821, &felem_z3);
  felem_x3 ={v} {CLOBBER};
  felem_y3 ={v} {CLOBBER};
  felem_z3 ={v} {CLOBBER};
  felem_x1 ={v} {CLOBBER};
  felem_y1 ={v} {CLOBBER};
  felem_z1 ={v} {CLOBBER};
  ivtmp.328_609 = ivtmp.328_610 + 192;
  if (ivtmp.328_609 != ivtmp.362_817)
    goto <bb 27>; [85.71%]
  else
    goto <bb 28>; [14.29%]

  <bb 28> [local count: 20637585]:
  ivtmp.362_816 = ivtmp.362_817 + 1536;
  if (_774 != ivtmp.362_816)
    goto <bb 26>; [50.01%]
  else
    goto <bb 29>; [49.99%]

  <bb 29> [local count: 10317245]:
  ec_GFp_nistp_points_make_affine_internal (31, _15, 32, &tmp_smallfelems, smallfelem_one, smallfelem_is_zero_int, smallfelem_assign, smallfelem_square_contract, smallfelem_mul_contract, smallfelem_inv_contract, smallfelem_assign);

  <bb 30> [local count: 55827066]:
done:
  group_85(D)->pre_comp_type = 2;
  group_85(D)->pre_comp.nistp256 = ret_138;

  <bb 31> [local count: 1015469855]:
  # ret_63 = PHI <0(10), _2(8), 0(12), _8(15), 0(5), _11(16), 1(30), _14(17)>
  # pre_64 = PHI <ret_138(10), 0B(8), 0B(12), ret_138(15), 0B(5), ret_138(16), 0B(30), ret_138(17)>
  # generator_71 = PHI <generator_96(10), generator_96(8), generator_96(12), generator_96(15), 0B(5), generator_96(16), generator_96(30), generator_96(17)>
err:
  BN_CTX_end (ctx_62);
  EC_POINT_free (generator_71);
  BN_CTX_free (new_ctx_70);
  EC_nistp256_pre_comp_free (pre_64);

  <bb 32> [local count: 1073741824]:
  # _72 = PHI <ret_63(31), 0(3)>
  tmp_smallfelems ={v} {CLOBBER};
  x_tmp ={v} {CLOBBER};
  y_tmp ={v} {CLOBBER};
  z_tmp ={v} {CLOBBER};
  return _72;

}



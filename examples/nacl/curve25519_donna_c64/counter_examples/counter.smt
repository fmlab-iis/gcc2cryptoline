(set-logic QF_BV)
(set-info :smt-lib-version 2.0)
(declare-fun v9_1 () (_ BitVec 64))
(declare-fun v6_1 () (_ BitVec 64))
(declare-fun v51_1 () (_ BitVec 64))
(declare-fun v50_1 () (_ BitVec 64))
(declare-fun v47_1 () (_ BitVec 64))
(declare-fun v46_1 () (_ BitVec 64))
(declare-fun v43_1 () (_ BitVec 64))
(declare-fun v42_1 () (_ BitVec 64))
(declare-fun v39_1 () (_ BitVec 64))
(declare-fun v38_1 () (_ BitVec 64))
(declare-fun v35_1 () (_ BitVec 64))
(declare-fun v34_1 () (_ BitVec 64))
(declare-fun v33_1 () (_ BitVec 64))
(declare-fun v32_1 () (_ BitVec 64))
(declare-fun v31_1 () (_ BitVec 64))
(declare-fun v30_1 () (_ BitVec 64))
(declare-fun v3_1 () (_ BitVec 64))
(declare-fun v29_1 () (_ BitVec 64))
(declare-fun v28_1 () (_ BitVec 64))
(declare-fun v27_1 () (_ BitVec 64))
(declare-fun v26_1 () (_ BitVec 64))
(declare-fun v25_1 () (_ BitVec 64))
(declare-fun v24_1 () (_ BitVec 64))
(declare-fun v23_1 () (_ BitVec 64))
(declare-fun v22_1 () (_ BitVec 64))
(declare-fun v21_1 () (_ BitVec 64))
(declare-fun v20_1 () (_ BitVec 64))
(declare-fun v19_1 () (_ BitVec 64))
(declare-fun v18_1 () (_ BitVec 64))
(declare-fun v17_1 () (_ BitVec 64))
(declare-fun v16_1 () (_ BitVec 64))
(declare-fun v15_1 () (_ BitVec 64))
(declare-fun v12_1 () (_ BitVec 64))
(declare-fun signbit_v47_2 () (_ BitVec 1))
(declare-fun signbit_v47_1 () (_ BitVec 64))
(declare-fun signbit_v43_2 () (_ BitVec 1))
(declare-fun signbit_v43_1 () (_ BitVec 64))
(declare-fun signbit_v39_2 () (_ BitVec 1))
(declare-fun signbit_v39_1 () (_ BitVec 64))
(declare-fun signbit_v35_2 () (_ BitVec 1))
(declare-fun signbit_v35_1 () (_ BitVec 64))
(declare-fun signbit_v31_2 () (_ BitVec 1))
(declare-fun signbit_v31_1 () (_ BitVec 64))
(declare-fun signbit_v3_2 () (_ BitVec 1))
(declare-fun signbit_v3_1 () (_ BitVec 64))
(declare-fun signbit_v27_2 () (_ BitVec 1))
(declare-fun signbit_v27_1 () (_ BitVec 64))
(declare-fun signbit_v23_2 () (_ BitVec 1))
(declare-fun signbit_v23_1 () (_ BitVec 64))
(declare-fun signbit_v19_2 () (_ BitVec 1))
(declare-fun signbit_v19_1 () (_ BitVec 64))
(declare-fun ioutput53_8_1 () (_ BitVec 64))
(declare-fun ioutput53_32_1 () (_ BitVec 64))
(declare-fun ioutput53_24_1 () (_ BitVec 64))
(declare-fun ioutput53_16_1 () (_ BitVec 64))
(declare-fun ioutput53_0_1 () (_ BitVec 64))
(declare-fun iin52_8_1 () (_ BitVec 64))
(declare-fun iin52_32_1 () (_ BitVec 64))
(declare-fun iin52_24_1 () (_ BitVec 64))
(declare-fun iin52_16_1 () (_ BitVec 64))
(declare-fun iin52_0_1 () (_ BitVec 64))
(declare-fun discard_9 () (_ BitVec 64))
(declare-fun discard_8 () (_ BitVec 64))
(declare-fun discard_7 () (_ BitVec 64))
(declare-fun discard_6 () (_ BitVec 64))
(declare-fun discard_5 () (_ BitVec 64))
(declare-fun discard_4 () (_ BitVec 64))
(declare-fun discard_3 () (_ BitVec 64))
(declare-fun discard_2 () (_ BitVec 64))
(declare-fun discard_1 () (_ BitVec 64))
(declare-fun b4_0 () (_ BitVec 64))
(declare-fun b3_0 () (_ BitVec 64))
(declare-fun b2_0 () (_ BitVec 64))
(declare-fun b1_0 () (_ BitVec 64))
(declare-fun b0_0 () (_ BitVec 64))
(declare-fun a4_0 () (_ BitVec 64))
(declare-fun a3_0 () (_ BitVec 64))
(declare-fun a2_0 () (_ BitVec 64))
(declare-fun a1_0 () (_ BitVec 64))
(declare-fun a0_0 () (_ BitVec 64))
(assert (and (and (and (and (and (and (and (and (and (bvult a0_0 #x0008000000008000) (bvult a1_0 #x0008000000008000)) (bvult a2_0 #x0008000000008000)) (bvult a3_0 #x0008000000008000)) (bvult a4_0 #x0008000000008000)) (bvult b0_0 #x0008000000008000)) (bvult b1_0 #x0008000000008000)) (bvult b2_0 #x0008000000008000)) (bvult b3_0 #x0008000000008000)) (bvult b4_0 #x0008000000008000)))
(assert (= iin52_0_1 a0_0))
(assert (= iin52_8_1 a1_0))
(assert (= iin52_16_1 a2_0))
(assert (= iin52_24_1 a3_0))
(assert (= iin52_32_1 a4_0))
(assert (= ioutput53_0_1 b0_0))
(assert (= ioutput53_8_1 b1_0))
(assert (= ioutput53_16_1 b2_0))
(assert (= ioutput53_24_1 b3_0))
(assert (= ioutput53_32_1 b4_0))
(assert (= v3_1 (bvsub iin52_0_1 ioutput53_0_1)))
(assert (= v6_1 (bvsub iin52_8_1 ioutput53_8_1)))
(assert (= v9_1 (bvsub iin52_16_1 ioutput53_16_1)))
(assert (= v12_1 (bvsub iin52_24_1 ioutput53_24_1)))
(assert (= v15_1 (bvsub iin52_32_1 ioutput53_32_1)))
(assert (and (= signbit_v3_1 ((_ sign_extend 63) ((_ extract 63 63) v3_1))) (= discard_1 ((_ zero_extend 1) ((_ extract 62 0) v3_1)))))
(assert (= signbit_v3_2 ((_ extract 0 0) signbit_v3_1)))
(assert (= v16_1 (ite (= signbit_v3_2 #b1) #x0008000000000000 #x0000000000000000)))
(assert (= v17_1 (bvadd v3_1 v16_1)))
(assert (= v18_1 (ite (= signbit_v3_2 #b1) #x0000000000000001 #x0000000000000000)))
(assert (= v19_1 (bvsub v6_1 v18_1)))
(assert (and (= signbit_v19_1 ((_ sign_extend 63) ((_ extract 63 63) v19_1))) (= discard_2 ((_ zero_extend 1) ((_ extract 62 0) v19_1)))))
(assert (= signbit_v19_2 ((_ extract 0 0) signbit_v19_1)))
(assert (= v20_1 (ite (= signbit_v19_2 #b1) #x0008000000000000 #x0000000000000000)))
(assert (= v21_1 (bvadd v19_1 v20_1)))
(assert (= v22_1 (ite (= signbit_v19_2 #b1) #x0000000000000001 #x0000000000000000)))
(assert (= v23_1 (bvsub v9_1 v22_1)))
(assert (and (= signbit_v23_1 ((_ sign_extend 63) ((_ extract 63 63) v23_1))) (= discard_3 ((_ zero_extend 1) ((_ extract 62 0) v23_1)))))
(assert (= signbit_v23_2 ((_ extract 0 0) signbit_v23_1)))
(assert (= v24_1 (ite (= signbit_v23_2 #b1) #x0008000000000000 #x0000000000000000)))
(assert (= v25_1 (bvadd v23_1 v24_1)))
(assert (= v26_1 (ite (= signbit_v23_2 #b1) #x0000000000000001 #x0000000000000000)))
(assert (= v27_1 (bvsub v12_1 v26_1)))
(assert (and (= signbit_v27_1 ((_ sign_extend 63) ((_ extract 63 63) v27_1))) (= discard_4 ((_ zero_extend 1) ((_ extract 62 0) v27_1)))))
(assert (= signbit_v27_2 ((_ extract 0 0) signbit_v27_1)))
(assert (= v28_1 (ite (= signbit_v27_2 #b1) #x0008000000000000 #x0000000000000000)))
(assert (= v29_1 (bvadd v27_1 v28_1)))
(assert (= v30_1 (ite (= signbit_v27_2 #b1) #x0000000000000001 #x0000000000000000)))
(assert (= v31_1 (bvsub v15_1 v30_1)))
(assert (and (= signbit_v31_1 ((_ sign_extend 63) ((_ extract 63 63) v31_1))) (= discard_5 ((_ zero_extend 1) ((_ extract 62 0) v31_1)))))
(assert (= signbit_v31_2 ((_ extract 0 0) signbit_v31_1)))
(assert (= v32_1 (ite (= signbit_v31_2 #b1) #x0008000000000000 #x0000000000000000)))
(assert (= v33_1 (bvadd v31_1 v32_1)))
(assert (= v34_1 (ite (= signbit_v31_2 #b1) #x0000000000000013 #x0000000000000000)))
(assert (= v35_1 (bvsub v17_1 v34_1)))
(assert (and (= signbit_v35_1 ((_ sign_extend 63) ((_ extract 63 63) v35_1))) (= discard_6 ((_ zero_extend 1) ((_ extract 62 0) v35_1)))))
(assert (= signbit_v35_2 ((_ extract 0 0) signbit_v35_1)))
(assert (= v38_1 (ite (= signbit_v35_2 #b1) #x0000000000000001 #x0000000000000000)))
(assert (= v39_1 (bvsub v21_1 v38_1)))
(assert (and (= signbit_v39_1 ((_ sign_extend 63) ((_ extract 63 63) v39_1))) (= discard_7 ((_ zero_extend 1) ((_ extract 62 0) v39_1)))))
(assert (= signbit_v39_2 ((_ extract 0 0) signbit_v39_1)))
(assert (= v42_1 (ite (= signbit_v39_2 #b1) #x0000000000000001 #x0000000000000000)))
(assert (= v43_1 (bvsub v25_1 v42_1)))
(assert (and (= signbit_v43_1 ((_ sign_extend 63) ((_ extract 63 63) v43_1))) (= discard_8 ((_ zero_extend 1) ((_ extract 62 0) v43_1)))))
(assert (= signbit_v43_2 ((_ extract 0 0) signbit_v43_1)))
(assert (= v46_1 (ite (= signbit_v43_2 #b1) #x0000000000000001 #x0000000000000000)))
(assert (= v47_1 (bvsub v29_1 v46_1)))
(assert (and (= signbit_v47_1 ((_ sign_extend 63) ((_ extract 63 63) v47_1))) (= discard_9 ((_ zero_extend 1) ((_ extract 62 0) v47_1)))))
(assert (= signbit_v47_2 ((_ extract 0 0) signbit_v47_1)))
(assert (= v50_1 (ite (= signbit_v47_2 #b1) #x0000000000000001 #x0000000000000000)))
(assert (= v51_1 (bvsub v33_1 v50_1)))
(assert (not (= ((_ extract 63 63) v51_1) #b0)))
(check-sat)
(exit)